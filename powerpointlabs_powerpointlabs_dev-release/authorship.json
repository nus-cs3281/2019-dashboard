[
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/ColorsLab/ColorsLabActionHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using Microsoft.Office.Tools;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ColorsLab;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.ActionFramework.ColorsLab"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    [ExportActionRibbonId(ColorsLabText.PaneTag)]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    class ColorsLabActionHandler : ActionHandler"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        protected override void ExecuteAction(string ribbonId)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.RegisterTaskPane(typeof(ColorsLabPane), ColorsLabText.TaskPanelTitle);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CustomTaskPane colorPane \u003d this.GetTaskPane(typeof(ColorsLabPane));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // if currently the pane is hidden, show the pane, vice versa."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            colorPane.Visible \u003d !colorPane.Visible;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 5,
      "-": 18
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/PictureSlidesLab/PictureSlidesEnabledHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.PictureSlidesLab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportEnabledRibbonId(PictureSlidesLabText.PaneTag)]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class PictureSlidesEnabledHandler : EnabledHandler"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override bool GetEnabled(string ribbonId)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return PowerPointLabs.PictureSlidesLab.PictureSlidesLab.IsPictureSlidesEnabled;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 15
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/ShapesLab/ShapesLabActionHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using Microsoft.Office.Tools;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ShapesLab;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.ActionFramework.ShapesLab"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    [ExportActionRibbonId(ShapesLabText.PaneTag)]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    class ShapesLabActionHandler : ActionHandler"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        protected override void ExecuteAction(string ribbonId)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.RegisterTaskPane(typeof(CustomShapePane), ShapesLabText.TaskPanelTitle);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomTaskPane shapesLabPane \u003d this.GetTaskPane(typeof(CustomShapePane));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (shapesLabPane \u003d\u003d null)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // toggle pane visibility"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shapesLabPane.Visible \u003d !shapesLabPane.Visible;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePane customShapePane \u003d shapesLabPane.Control as CustomShapePane;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            customShapePane.InitCustomShapePaneStorage();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 8,
      "-": 23
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/ShortcutsLab/AddCustomShape/AddCustomShapeActionHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Microsoft.Office.Tools;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ShapesLab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.ActionFramework.ShortcutsLab"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    [ExportActionRibbonId(ShortcutsLabText.AddCustomShapeTag)]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class AddCustomShapeActionHandler : ActionHandler"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        protected override void ExecuteAction(string ribbonId)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            PowerPointPresentation pres \u003d this.GetCurrentPresentation();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            PowerPointSlide slide \u003d this.GetCurrentSlide();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Selection selection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomTaskPane shapesLabPane \u003d this.GetTaskPane(typeof(CustomShapePane));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (shapesLabPane \u003d\u003d null)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                this.RegisterTaskPane(typeof(CustomShapePane), ShapesLabText.TaskPanelTitle);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                shapesLabPane \u003d this.GetTaskPane(typeof(CustomShapePane));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (shapesLabPane \u003d\u003d null)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shapesLabPane.Visible \u003d true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePane customShapePane \u003d shapesLabPane.Control as CustomShapePane;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            customShapePane.InitCustomShapePaneStorage();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            customShapePane.AddShapeFromSelection(selection);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 40,
      "-": 1
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/ShortcutsLab/AddCustomShape/AddCustomShapeImageHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System.Drawing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.ActionFramework.ShortcutsLab"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    [ExportImageRibbonId(ShortcutsLabText.AddCustomShapeTag)]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class AddCustomShapeImageHandler : ImageHandler"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        protected override Bitmap GetImage(string ribbonId)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Bitmap(Properties.Resources.AddToCustomShapes);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 2,
      "-": 15
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/ShortcutsLab/AddCustomShape/AddCustomShapeShapeLabelHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.ActionFramework.ShortcutsLab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    [ExportLabelRibbonId(ShortcutsLabText.AddCustomShapeTag)]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class AddCustomShapeShapeLabelHandler : LabelHandler"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        protected override string GetLabel(string ribbonId)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            return ShortcutsLabText.AddCustomShapeLabel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 2,
      "-": 13
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/ShortcutsLab/ContextMenuContentHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System.Collections.Generic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Text;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.ActionFramework.ShortcutsLab"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    [ExportContentRibbonId("
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        ShortcutsLabText.MenuShape, ShortcutsLabText.MenuLine, ShortcutsLabText.MenuFreeform,"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        ShortcutsLabText.MenuPicture, ShortcutsLabText.MenuSlide, ShortcutsLabText.MenuGroup,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        ShortcutsLabText.MenuInk, ShortcutsLabText.MenuVideo, ShortcutsLabText.MenuTextEdit,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        ShortcutsLabText.MenuChart, ShortcutsLabText.MenuTable, ShortcutsLabText.MenuTableCell,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        ShortcutsLabText.MenuSmartArt, ShortcutsLabText.MenuEditSmartArt, ShortcutsLabText.MenuEditSmartArtText,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        ShortcutsLabText.MenuThumbnail)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    class ContextMenuContentHandler : ContentHandler"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        protected override string GetContent(string ribbonId)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cContextMenuGroup\u003e contextMenuGroups \u003d GetContextMenuGroups(ribbonId);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            StringBuilder xmlString \u003d new System.Text.StringBuilder();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (ContextMenuGroup group in contextMenuGroups)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                string id \u003d group.Name.Replace(\" \", \"\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                xmlString.Append(string.Format(CommonText.DynamicMenuXmlTitleMenuSeparator,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    id + ShortcutsLabText.MenuSeparator, group.Name));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                foreach (string groupItem in group.Items)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    xmlString.Append(string.Format(CommonText.DynamicMenuXmlImageButton, groupItem + ribbonId, groupItem));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return string.Format(CommonText.DynamicMenuXmlMenu, xmlString);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        private List\u003cContextMenuGroup\u003e GetContextMenuGroups(string ribbonId)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cContextMenuGroup\u003e contextMenuGroups \u003d new List\u003cContextMenuGroup\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            ContextMenuGroup pasteLab \u003d new ContextMenuGroup(ShortcutsLabText.PasteMenuLabel, new List\u003cstring\u003e());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            ContextMenuGroup shortcuts \u003d new ContextMenuGroup(ShortcutsLabText.ShortcutsMenuLabel, new List\u003cstring\u003e());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // All context menus will have these Shortcuts"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            contextMenuGroups.Add(shortcuts);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            shortcuts.Items.Add(ShortcutsLabText.ExportSlideAsImageTag);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // All context menus will other than slide thumbnails have these PasteLab buttons"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (ribbonId !\u003d ShortcutsLabText.MenuThumbnail)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                contextMenuGroups.Add(pasteLab);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                pasteLab.Items.Add(PasteLabText.PasteAtCursorPositionTag);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                pasteLab.Items.Add(PasteLabText.PasteAtOriginalPositionTag);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                pasteLab.Items.Add(PasteLabText.PasteToFillSlideTag);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                pasteLab.Items.Add(PasteLabText.PasteToFitSlideTag);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "           "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Context menus other than slide and slide thumbnail will have these buttons"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (ribbonId !\u003d ShortcutsLabText.MenuSlide \u0026\u0026 ribbonId !\u003d ShortcutsLabText.MenuThumbnail)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!ribbonId.Contains(ShortcutsLabText.MenuEditSmartArtBase) \u0026\u0026"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    ribbonId !\u003d ShortcutsLabText.MenuTextEdit \u0026\u0026"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                    ribbonId !\u003d ShortcutsLabText.MenuTable)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    pasteLab.Items.Add(PasteLabText.ReplaceWithClipboardTag);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                shortcuts.Items.Add(ShortcutsLabText.EditNameTag);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                // Context menus other than picture will have these buttons"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                if (ribbonId !\u003d ShortcutsLabText.MenuPicture)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                    shortcuts.Items.Add(ShortcutsLabText.ConvertToPictureTag);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                shortcuts.Items.Add(ShortcutsLabText.HideShapeTag);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                shortcuts.Items.Add(ShortcutsLabText.AddCustomShapeTag);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                shortcuts.Items.Add(ShortcutsLabText.FillSlideTag);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                // Context menu group will have these buttons"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                if (ribbonId \u003d\u003d ShortcutsLabText.MenuGroup)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                    pasteLab.Items.Add(PasteLabText.PasteIntoGroupTag);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                    shortcuts.Items.Add(ShortcutsLabText.AddIntoGroupTag);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return contextMenuGroups;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public class ContextMenuGroup"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            public string Name { get; private set; }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            public List\u003cstring\u003e Items { get; private set; }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            public ContextMenuGroup(string groupName, List\u003cstring\u003e groupItems)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                Name \u003d groupName;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                Items \u003d groupItems;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 12,
      "-": 94
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/ShortcutsLab/EditName/EditNameActionHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ShortcutsLab.Views;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.ActionFramework.ShortcutsLab"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    [ExportActionRibbonId(ShortcutsLabText.EditNameTag)]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    class EditNameActionHandler : ActionHandler"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        protected override void ExecuteAction(string ribbonId)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            Selection selection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape selectedShape \u003d selection.ShapeRange[1];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selection.HasChildShapeRange)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedShape \u003d selection.ChildShapeRange[1];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            EditNameDialogBox editForm \u003d new EditNameDialogBox(selectedShape);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            editForm.ShowDialog();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (!this.GetApplication().CommandBars.GetPressedMso(\"SelectionPane\"))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                this.GetApplication().CommandBars.ExecuteMso(\"SelectionPane\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 5,
      "-": 27
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/ShortcutsLab/ExportSlideAsImage/ExportSlideAsImageActionHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blewjy"
        },
        "content": "﻿using System.Collections.Generic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ShortcutsLab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace PowerPointLabs.ActionFramework.ShortcutsLab"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blewjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    [ExportActionRibbonId(ShortcutsLabText.ExportSlideAsImageTag)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    class ExportSlideAsImageActionHandler : ActionHandler"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        protected override void ExecuteAction(string ribbonId)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            List\u003cSlide\u003e selectedSlides \u003d new List\u003cSlide\u003e();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (this.GetCurrentSelection().Type \u003d\u003d PpSelectionType.ppSelectionSlides)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                foreach (Slide slide in this.GetCurrentSelection().SlideRange)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    selectedSlides.Add(slide);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            else"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                selectedSlides.Add(this.GetCurrentSlide().GetNativeSlide());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Forms.SaveFileDialog saveFileDialog \u003d new System.Windows.Forms.SaveFileDialog();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            saveFileDialog.Title \u003d ShortcutsLabConstants.ExportSlideSaveFileDialogTitle;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            saveFileDialog.DefaultExt \u003d ShortcutsLabConstants.ExportSlideSaveFileDialogExtension;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            saveFileDialog.Filter \u003d ShortcutsLabConstants.ExportSlideSaveFileDialogFilter;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Forms.DialogResult result \u003d saveFileDialog.ShowDialog();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (result \u003d\u003d System.Windows.Forms.DialogResult.OK)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {           "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                GraphicsUtil.ExportSlides(selectedSlides, saveFileDialog.FileName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blewjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 48,
      "-": 1
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/ShortcutsLab/ExportSlideAsImage/ExportSlideAsImageImageHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blewjy"
        },
        "content": "﻿using System.Drawing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace PowerPointLabs.ActionFramework.ShortcutsLab"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blewjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    [ExportImageRibbonId(ShortcutsLabText.ExportSlideAsImageTag)]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    class ExportSlideAsImageImageHandler : ImageHandler"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        protected override Bitmap GetImage(string ribbonId)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return new Bitmap(Properties.Resources.ExportSlideAsPicture);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 17
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/ShortcutsLab/ExportSlideAsImage/ExportSlideAsImageLabelHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blewjy"
        },
        "content": "﻿using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace PowerPointLabs.ActionFramework.ShortcutsLab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    [ExportLabelRibbonId(ShortcutsLabText.ExportSlideAsImageTag)]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    class ExportSlideAsImageLabelHandler : LabelHandler"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        protected override string GetLabel(string ribbonId)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return ShortcutsLabText.ExportSlideAsImageLabel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blewjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 15
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/ConvertToTooltip/ConvertToTooltipActionHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TooltipsLab;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.Views;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportActionRibbonId(TooltipsLabText.ConvertToTooltipTag)]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class ConvertToTooltipActionHandler : ActionHandler"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override void ExecuteAction(string ribbonId)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PowerPointSlide currentSlide \u003d this.GetCurrentSlide();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Selection selection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (currentSlide \u003d\u003d null || !ShapeUtil.IsSelectionShape(selection))"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            try"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ShapeRange selectedShapes \u003d selection.ShapeRange;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                bool success \u003d ConvertToTooltip.AddTriggerAnimation(currentSlide, selectedShapes);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                if (success)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    // Open the animation custom pane if it is not opened"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    if (!this.GetApplication().CommandBars.GetPressedMso(\"AnimationCustom\"))"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                        this.GetApplication().CommandBars.ExecuteMso(\"AnimationCustom\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                ErrorDialogBox.ShowDialog(\"PowerPointLabs\", e.Message, e);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 46,
      "YuPeiHenry": 2,
      "-": 1
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/ConvertToTooltip/ConvertToTooltipEnabledHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportEnabledRibbonId(TooltipsLabText.ConvertToTooltipTag)]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class ConvertToTooltipEnabledHandler : EnabledHandler"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override bool GetEnabled(string ribbonId)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Selection currentSelection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return ShapeUtil.IsSelectionShape(currentSelection);      "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 20
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/ConvertToTooltip/ConvertToTooltipImageHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using System.Drawing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportImageRibbonId(TooltipsLabText.ConvertToTooltipTag)]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class ConvertToTooltipImageHandler : ImageHandler"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override Bitmap GetImage(string ribbonId)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return new Bitmap(Properties.Resources.ConvertToTooltip);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 17
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/ConvertToTooltip/ConvertToTooltipLabelHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportLabelRibbonId(TooltipsLabText.ConvertToTooltipTag)]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class ConvertToTooltipLabelHandler : LabelHandler"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override string GetLabel(string ribbonId)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return TooltipsLabText.ConvertToTooltipButtonLabel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 15
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/ConvertToTooltip/ConvertToTooltipSupertipHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportSupertipRibbonId(TooltipsLabText.ConvertToTooltipTag)]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class ConvertToTooltipSupertipHandler : SupertipHandler"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override string GetSupertip(string ribbonId)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return TooltipsLabText.ConvertToTooltipButtonSupertip;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 15
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/CreateCallout/CreateCalloutActionHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TooltipsLab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPoint \u003d Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportActionRibbonId(TooltipsLabText.CreateCalloutTag)]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class CreateCalloutActionHandler : ActionHandler"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override void ExecuteAction(string ribbonId)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PowerPointSlide currentSlide \u003d this.GetCurrentSlide();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PowerPoint.Selection selection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (currentSlide \u003d\u003d null || !ShapeUtil.IsSelectionShape(selection))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            foreach (PowerPoint.Shape selectedShape in selection.ShapeRange)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                PowerPoint.Shape callout \u003d CreateTooltip.GenerateCalloutWithReferenceTriggerShape(currentSlide, selectedShape);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                ConvertToTooltip.AddTriggerAnimation(currentSlide, selectedShape, callout);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "           }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (!this.GetApplication().CommandBars.GetPressedMso(TooltipsLabConstants.AnimationPaneName))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                this.GetApplication().CommandBars.ExecuteMso(TooltipsLabConstants.AnimationPaneName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 39,
      "-": 2
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/CreateCallout/CreateCalloutEnabledHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportEnabledRibbonId(TooltipsLabText.CreateCalloutTag)]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class CreateCalloutEnabledHandler : EnabledHandler"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override bool GetEnabled(string ribbonId)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Selection currentSelection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return ShapeUtil.IsSelectionShape(currentSelection);      "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 20
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/CreateCallout/CreateCalloutImageHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using System.Drawing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportImageRibbonId(TooltipsLabText.CreateCalloutTag)]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class CreateCalloutImageHandler : ImageHandler"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override Bitmap GetImage(string ribbonId)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return new Bitmap(Properties.Resources.CreateCallout);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 17
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/CreateCallout/CreateCalloutLabelHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportLabelRibbonId(TooltipsLabText.CreateCalloutTag)]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class CreateCalloutLabelHandler : LabelHandler"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override string GetLabel(string ribbonId)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return TooltipsLabText.CreateCalloutButtonLabel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 15
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/CreateCallout/CreateCalloutSupertipHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportSupertipRibbonId(TooltipsLabText.CreateCalloutTag)]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class CreateCalloutSupertipHandler : SupertipHandler"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override string GetSupertip(string ribbonId)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return TooltipsLabText.CreateCalloutButtonSupertip;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 15
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/CreateTooltip/CreateTooltipActionHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TooltipsLab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPoint \u003d Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportActionRibbonId(TooltipsLabText.CreateTooltipTag)]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class CreateTooltipActionHandler : ActionHandler"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override void ExecuteAction(string ribbonId)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PowerPointSlide currentSlide \u003d this.GetCurrentSlide();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (currentSlide \u003d\u003d null)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PowerPoint.Shape triggerShape \u003d CreateTooltip.GenerateTriggerShape(currentSlide);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PowerPoint.Shape callout \u003d CreateTooltip.GenerateCalloutWithReferenceTriggerShape(currentSlide, triggerShape);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ConvertToTooltip.AddTriggerAnimation(currentSlide, triggerShape, callout);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (!this.GetApplication().CommandBars.GetPressedMso(TooltipsLabConstants.AnimationPaneName))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                this.GetApplication().CommandBars.ExecuteMso(TooltipsLabConstants.AnimationPaneName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 35,
      "-": 2
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/CreateTooltip/CreateTooltipImageHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using System.Drawing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportImageRibbonId(TooltipsLabText.CreateTooltipTag)]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class CreateTooltipImageHandler : ImageHandler"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override Bitmap GetImage(string ribbonId)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return new Bitmap(Properties.Resources.CreateTooltip);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 17
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/CreateTooltip/CreateTooltipLabelHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportLabelRibbonId(TooltipsLabText.CreateTooltipTag)]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class CreateTooltipLabelHandler : LabelHandler"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override string GetLabel(string ribbonId)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return TooltipsLabText.CreateTooltipButtonLabel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 15
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/CreateTooltip/CreateTooltipSupertipHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportSupertipRibbonId(TooltipsLabText.CreateTooltipTag)]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class CreateTooltipSupertipHandler : SupertipHandler"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override string GetSupertip(string ribbonId)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return TooltipsLabText.CreateTooltipButtonSupertip;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 15
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/CreateTrigger/CreateTriggerActionHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TooltipsLab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPoint \u003d Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportActionRibbonId(TooltipsLabText.CreateTriggerTag)]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class CreateTriggerActionHandler : ActionHandler"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override void ExecuteAction(string ribbonId)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PowerPointSlide currentSlide \u003d this.GetCurrentSlide();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Selection selection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (currentSlide \u003d\u003d null || !ShapeUtil.IsSelectionShape(selection))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            foreach (PowerPoint.Shape selectedShape in selection.ShapeRange)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                PowerPoint.Shape triggerShape \u003d CreateTooltip.GenerateTriggerShapeWithReferenceCallout(currentSlide, selectedShape);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                ConvertToTooltip.AddTriggerAnimation(currentSlide, triggerShape, selectedShape);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (!this.GetApplication().CommandBars.GetPressedMso(TooltipsLabConstants.AnimationPaneName))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                this.GetApplication().CommandBars.ExecuteMso(TooltipsLabConstants.AnimationPaneName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 38,
      "-": 3
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/CreateTrigger/CreateTriggerEnabledHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportEnabledRibbonId(TooltipsLabText.CreateTriggerTag)]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class CreateTriggerEnabledHandler : EnabledHandler"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override bool GetEnabled(string ribbonId)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Selection currentSelection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return ShapeUtil.IsSelectionShape(currentSelection);      "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 20
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/CreateTrigger/CreateTriggerImageHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using System.Drawing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportImageRibbonId(TooltipsLabText.CreateTriggerTag)]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class CreateTriggerImageHandler : ImageHandler"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override Bitmap GetImage(string ribbonId)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return new Bitmap(Properties.Resources.CreateTrigger);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 17
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/CreateTrigger/CreateTriggerLabelHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportLabelRibbonId(TooltipsLabText.CreateTriggerTag)]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class CreateTriggerLabelHandler : LabelHandler"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override string GetLabel(string ribbonId)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return TooltipsLabText.CreateTriggerButtonLabel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 15
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/CreateTrigger/CreateTriggerSupertipHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportSupertipRibbonId(TooltipsLabText.CreateTriggerTag)]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class CreateTriggerSupertipHandler : SupertipHandler"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override string GetSupertip(string ribbonId)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return TooltipsLabText.CreateTriggerButtonSupertip;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 15
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/Settings/TooltipsLabSettingImageHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using System.Drawing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab.Settings"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    [ExportImageRibbonId(TooltipsLabText.SettingsTag)]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class TooltipsLabSettingsImageHandler : ImageHandler"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        protected override Bitmap GetImage(string ribbonId)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return new Bitmap(Properties.Resources.AgendaSettings);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 17
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/Settings/TooltipsLabSettingsActionHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.TooltipsLab;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab.Settings"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    [ExportActionRibbonId(TooltipsLabText.SettingsTag)]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class TooltipsLabSettingsActionHandler : ActionHandler"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        protected override void ExecuteAction(string ribbonId)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            TooltipsLabSettings.ShowSettingsDialog();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 16
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/Settings/TooltipsLabSettingsLabelHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab.Settings"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    [ExportLabelRibbonId(TooltipsLabText.SettingsTag)]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class TooltipsLabSettingsLabelHandler : LabelHandler"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        protected override string GetLabel(string ribbonId)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return TooltipsLabText.SettingsButtonLabel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 15
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/Settings/TooltipsLabSettingsSupertipHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab.Settings"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    [ExportSupertipRibbonId(TooltipsLabText.SettingsTag)]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class TooltipsLabSettingsSupertipHandler : SupertipHandler"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        protected override string GetSupertip(string ribbonId)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return TooltipsLabText.SettingsButtonSupertip;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 15
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/TooltipsLabMenu/TooltipsLabMenuImageHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using System.Drawing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportImageRibbonId(TooltipsLabText.RibbonMenuId)]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class TooltipsLabMenuImageHandler : ImageHandler"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override Bitmap GetImage(string ribbonId)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return new Bitmap(Properties.Resources.TooltipsLab);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 17
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/TooltipsLabMenu/TooltipsLabMenuLabelHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportLabelRibbonId(TooltipsLabText.RibbonMenuId)]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class TooltipsLabMenuLabelHandler : LabelHandler"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override string GetLabel(string ribbonId)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return TooltipsLabText.RibbonMenuLabel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 15
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/TooltipsLabMenu/TooltipsLabMenuSupertipHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    [ExportSupertipRibbonId(TooltipsLabText.RibbonMenuId)]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    class TooltipsLabMenuSupertipHandler : SupertipHandler"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        protected override string GetSupertip(string ribbonId)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return AnimationLabText.RibbonMenuSupertip;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 15
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ActionFramework/TooltipsLab/TooltipsLabSettings/TooltipsLabSettingsActionHandler.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Attribute;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Interface;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.TooltipsLab;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.ActionFramework.TooltipsLab"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    [ExportActionRibbonId(TooltipsLabText.SettingsTag)]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class TooltipsLabSettingsActionHandler : ActionHandler"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        protected override void ExecuteAction(string ribbonId)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            TooltipsLabSettings.ShowSettingsDialog();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 16
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ColorsLab/ColorHelper.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System.Collections.Generic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace PowerPointLabs.ColorsLab"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    class ColorHelper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        public static int ReverseRGBToArgb(int x)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "            int r \u003d 0xff \u0026 x;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "            int g \u003d (0xff00 \u0026 x) \u003e\u003e 8;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            int b \u003d (0xff0000 \u0026 x) \u003e\u003e 16;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            return (int)(0xff \u003c\u003c 24 | r \u003c\u003c 16 | g \u003c\u003c 8 | b);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public static string ColorToHexString(Color color)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return \"#\" + color.R.ToString(\"X2\") + color.G.ToString(\"X2\") + color.B.ToString(\"X2\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Color GetColorShiftedByAngle(HSLColor originalColor, float angle)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            if (angle \u003c 0)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                while (angle \u003c 0)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                    angle +\u003d 360.0f;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            float baseAngle \u003d (float) originalColor.Hue / 240.0f * 360.0f;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            float finalAngle \u003d baseAngle + angle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            if (finalAngle \u003e 360.0f)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                finalAngle -\u003d 360.0f;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            Color finalColor \u003d new HSLColor(finalAngle / 360.0f * 240.0f, originalColor.Saturation, originalColor.Luminosity);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return Color.FromArgb(255,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    finalColor.R,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    finalColor.G,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    finalColor.B);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Color GetComplementaryColor(HSLColor originalColor)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return GetColorShiftedByAngle(originalColor, 180.0f);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        public static List\u003cColor\u003e GetAnalogousColorsForColor(HSLColor originalColor)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cColor\u003e analogousColors \u003d new List\u003cColor\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                GetColorShiftedByAngle(originalColor, -30.0f),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                GetColorShiftedByAngle(originalColor, 30.0f)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return analogousColors;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        public static List\u003cColor\u003e GetTriadicColorsForColor(HSLColor originalColor)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cColor\u003e triadicColors \u003d new List\u003cColor\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                GetColorShiftedByAngle(originalColor, -120.0f),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                GetColorShiftedByAngle(originalColor, 120.0f)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return triadicColors;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        public static List\u003cColor\u003e GetTetradicColorsForColor(HSLColor originalColor)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cColor\u003e tetradicColors \u003d new List\u003cColor\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                GetColorShiftedByAngle(originalColor, -90.0f),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                GetColorShiftedByAngle(originalColor, 90.0f),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                GetComplementaryColor(originalColor)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return tetradicColors;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        public static List\u003cColor\u003e GetSplitComplementaryColorsForColor(HSLColor originalColor)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cColor\u003e splitComplementaryColors \u003d new List\u003cColor\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                GetColorShiftedByAngle(originalColor, 150.0f),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                GetColorShiftedByAngle(originalColor, 210.0f)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            return splitComplementaryColors;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 6,
      "-": 90
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ColorsLab/ColorInformationDialog.xaml.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System.Windows;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Windows.Media;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace PowerPointLabs.ColorsLab"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blewjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    /// Interaction logic for ColorInformationDialog.xaml"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    public partial class ColorInformationDialog : Window"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blewjy"
        },
        "content": "      "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public ColorInformationDialog(System.Drawing.Color color)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            DataContext \u003d this;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            WindowStartupLocation \u003d WindowStartupLocation.CenterScreen;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            InitializeComponent();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorRectangle.Fill \u003d new SolidColorBrush(System.Windows.Media.Color.FromArgb(color.A, color.R, color.G, color.B));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorHexText.Text \u003d ((HSLColor)color).ToHexString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorRgbText.Text \u003d ((HSLColor)color).ToRGBString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorHslText.Text \u003d ((HSLColor)color).ToString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blewjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 27,
      "-": 1
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ColorsLab/ColorsLabConstants.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blewjy"
        },
        "content": "﻿"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace PowerPointLabs.ColorsLab"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blewjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    static class ColorsLabConstants"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        "
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blewjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 8
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ColorsLab/ColorsLabPane.Designer.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blewjy"
        },
        "content": "﻿namespace PowerPointLabs.ColorsLab"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blewjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    partial class ColorsLabPane"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Required designer variable."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private System.ComponentModel.IContainer components \u003d null;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Clean up any resources being used."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"disposing\"\u003etrue if managed resources should be disposed; otherwise, false.\u003c/param\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        protected override void Dispose(bool disposing)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (disposing \u0026\u0026 (components !\u003d null))"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                components.Dispose();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            base.Dispose(disposing);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Windows Form Designer generated code"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Required method for Designer support - do not modify"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// the contents of this method with the code editor."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void InitializeComponent()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.elementHost1 \u003d new System.Windows.Forms.Integration.ElementHost();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.ColorsLabPaneWPF1 \u003d new PowerPointLabs.ColorsLab.ColorsLabPaneWPF();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.SuspendLayout();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // elementHost1"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.elementHost1.Dock \u003d System.Windows.Forms.DockStyle.Fill;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.elementHost1.Location \u003d new System.Drawing.Point(0, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.elementHost1.Name \u003d \"elementHost1\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.elementHost1.Size \u003d new System.Drawing.Size(300, 833);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.elementHost1.TabIndex \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.elementHost1.Text \u003d \"elementHost1\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.elementHost1.Child \u003d this.ColorsLabPaneWPF1;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // ColorsLabPaneWPF"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.AutoScaleDimensions \u003d new System.Drawing.SizeF(6F, 13F);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.AutoScaleMode \u003d System.Windows.Forms.AutoScaleMode.Font;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.Controls.Add(this.elementHost1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.Name \u003d \"ColorsLabPane\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.Size \u003d new System.Drawing.Size(300, 833);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.ResumeLayout(false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private System.Windows.Forms.Integration.ElementHost elementHost1;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public ColorsLabPaneWPF ColorsLabPaneWPF1 { get; private set; }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blewjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 60
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ColorsLab/ColorsLabPane.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blewjy"
        },
        "content": "﻿using System.Windows.Forms;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace PowerPointLabs.ColorsLab"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    public partial class ColorsLabPane : UserControl"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public ColorsLabPane()"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            InitializeComponent();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blewjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 12
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ColorsLab/ColorsLabPaneWPF.xaml.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blewjy"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.IO;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Windows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Windows.Controls;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Windows.Input;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Windows.Media;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Windows.Media.Imaging;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Windows.Threading;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.DataSources;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.Views;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using Color \u003d System.Drawing.Color;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Path \u003d System.IO.Path;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPoint \u003d Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace PowerPointLabs.ColorsLab"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blewjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    /// Interaction logic for TimerLabPaneWPF.xaml"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    public partial class ColorsLabPaneWPF : UserControl"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Functional Test API"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public Point GetApplyTextButtonLocationAsPoint()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point locationFromWindow \u003d applyTextColorButton.TranslatePoint(new Point(0, 0), this);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point topLeftOfButton \u003d PointToScreen(locationFromWindow);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return new Point("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                topLeftOfButton.X + applyTextColorButton.ActualWidth / 2, "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                topLeftOfButton.Y + applyTextColorButton.ActualHeight / 2);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public Point GetApplyLineButtonLocationAsPoint()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point locationFromWindow \u003d applyLineColorButton.TranslatePoint(new Point(0, 0), this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point topLeftOfButton \u003d PointToScreen(locationFromWindow);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return new Point("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                topLeftOfButton.X + applyLineColorButton.ActualWidth / 2,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                topLeftOfButton.Y + applyLineColorButton.ActualHeight / 2);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public Point GetApplyFillButtonLocationAsPoint()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point locationFromWindow \u003d applyFillColorButton.TranslatePoint(new Point(0, 0), this);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point topLeftOfButton \u003d PointToScreen(locationFromWindow);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return new Point("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                topLeftOfButton.X + applyFillColorButton.ActualWidth / 2,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                topLeftOfButton.Y + applyFillColorButton.ActualHeight / 2);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public Point GetMainColorRectangleLocationAsPoint()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point locationFromWindow \u003d selectedColorRectangle.TranslatePoint(new Point(0, 0), this);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point topLeftOfButton \u003d PointToScreen(locationFromWindow);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return new Point("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                topLeftOfButton.X + selectedColorRectangle.ActualWidth / 2,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                topLeftOfButton.Y + selectedColorRectangle.ActualHeight / 2);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public Point GetEyeDropperButtonLocationAsPoint()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point locationFromWindow \u003d eyeDropperButton.TranslatePoint(new Point(0, 0), this);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point topLeftOfButton \u003d PointToScreen(locationFromWindow);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return new Point("
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                topLeftOfButton.X + eyeDropperButton.ActualWidth / 2,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                topLeftOfButton.Y + eyeDropperButton.ActualHeight / 2);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public IList\u003cColor\u003e GetFavoriteColorsPanelAsList()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            IList\u003cHSLColor\u003e favoriteHslColors \u003d dataSource.GetListOfFavoriteColors();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            IList\u003cColor\u003e favoriteColors \u003d new List\u003cColor\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (HSLColor favoriteHslColor in favoriteHslColors)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                favoriteColors.Add(favoriteHslColor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return favoriteColors;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void LoadFavoriteColorsFromPath(string filePath)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            dataSource.LoadFavoriteColorsFromFile(filePath);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public IList\u003cColor\u003e GetRecentColorsPanelAsList()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            IList\u003cHSLColor\u003e recentHslColors \u003d dataSource.GetListOfRecentColors();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            IList\u003cColor\u003e recentColors \u003d new List\u003cColor\u003e();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            foreach (HSLColor recentHslColor in recentHslColors)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                recentColors.Add(recentHslColor);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return recentColors;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Clear the panel to all white color."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void EmptyRecentColorsPanel()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            try"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                if (this.GetCurrentSlide() !\u003d null)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    dataSource.ClearRecentColors();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                ErrorDialogBox.ShowDialog(\"Recent Colors Panel Reset Failed\", e.Message, e);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Private variables"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        // To set color mode"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private enum MODE"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            FILL,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            LINE,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            FONT,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            MAIN,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            NONE"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        };"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private MODE _eyedropperMode;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private Color _previousFillColor;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private Color _currentEyedroppedColor;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private Color _currentSelectedColor;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private PowerPoint.ShapeRange _selectedShapes;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private PowerPoint.TextRange _selectedText;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private bool _isEyedropperMode \u003d false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private bool _shouldAllowDrag \u003d false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        // Data-bindings datasource"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        ColorDataSource dataSource \u003d new ColorDataSource();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        // Eyedropper-related"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const float MAGNIFICATION_FACTOR \u003d 2.5f;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private Cursor eyeDropperCursor \u003d new Cursor(new MemoryStream(Properties.Resources.EyeDropper));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private Magnifier magnifier \u003d new Magnifier(MAGNIFICATION_FACTOR);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        private System.Windows.Threading.DispatcherTimer eyeDropperTimer \u003d new System.Windows.Threading.DispatcherTimer();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CLICK_THRESHOLD \u003d 2;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private int timer1Ticks;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // Saving color favorites"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private string _defaultFavoriteColorDirectory \u003d System.IO.Path.Combine("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments), "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"PowerPointLabs.defaultFavoriteColor.thm\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private string _defaultRecentColorDirectory \u003d Path.Combine("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            \"PowerPointLabs.defaultRecentColor.thm\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Constructor"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public ColorsLabPaneWPF()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Set data context to data source for XAML to reference."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            DataContext \u003d dataSource;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Do not remove. Default generated code."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            InitializeComponent();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Setup code"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SetupImageSources();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SetupEyedropperTimer();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SetDefaultColor(Color.CornflowerBlue);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            SetDefaultFavoriteColors();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SetRecentColors();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Hook the mouse process if it has not"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PPExtraEventHelper.PPMouse.TryStartHook();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Setup Code"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Function that handles the setting up of all the images in the pane."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void SetupImageSources()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            textColorIcon.Source \u003d CommonUtil.CreateBitmapSource(Properties.Resources.TextColor_icon);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            lineColorIcon.Source \u003d CommonUtil.CreateBitmapSource(Properties.Resources.LineColor_icon);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            fillColorIcon.Source \u003d CommonUtil.CreateBitmapSource(Properties.Resources.FillColor_icon);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            eyeDropperIcon.Source \u003d CommonUtil.CreateBitmapSource(Properties.Resources.EyeDropper_icon);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            brightnessIcon.Source \u003d CommonUtil.CreateBitmapSource(Properties.Resources.Brightness_icon_25x25);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            saturationIcon.Source \u003d CommonUtil.CreateBitmapSource(Properties.Resources.Saturation_icon_18x18);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            saveColorIcon.Source \u003d CommonUtil.CreateBitmapSource(Properties.Resources.Save_icon);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            loadColorIcon.Source \u003d CommonUtil.CreateBitmapSource(Properties.Resources.Load_icon);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            reloadColorIcon.Source \u003d CommonUtil.CreateBitmapSource(Properties.Resources.Reload_icon);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            clearColorIcon.Source \u003d CommonUtil.CreateBitmapSource(Properties.Resources.Clear_icon);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Set default color upon startup."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"color\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void SetDefaultColor(Color color)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            dataSource.SelectedColor \u003d color;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// Set default favorite colors for favourite colors panel."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void SetDefaultFavoriteColors()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            LoadDefaultFavoritePanel();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Load recent colors into the recent colors pane."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void SetRecentColors()"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            LoadRecentColorsPanel();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Setup the timer tick handler."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void SetupEyedropperTimer()"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.eyeDropperTimer.Tick +\u003d new System.EventHandler(this.Timer1_Tick);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Event Handlers"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        "
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region ColorsLabPane Handlers"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// This method handles the loaded ColorsLabPane."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void ColorsLabPaneWPF_Loaded(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Microsoft.Office.Tools.CustomTaskPane colorsLabPane \u003d this.GetAddIn().GetActivePane(typeof(ColorsLabPane));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (colorsLabPane \u003d\u003d null || !(colorsLabPane.Control is ColorsLabPane))"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                MessageBox.Show(\"Error: ColorsLabPane not opened.\");"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ColorsLabPane colorsLab \u003d colorsLabPane.Control as ColorsLabPane;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Add handler for closing of ColorsLab"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorsLab.HandleDestroyed +\u003d ColorsLab_Closing;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// This handler is called when ColorsLab is destroyed, i.e. when PPTLabs closes."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Current colors in the panel are saved when this happens."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void ColorsLab_Closing(Object sender, EventArgs e)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            SaveDefaultColorPaneFavoriteColors();"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SaveColorPaneRecentColors();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Button Handlers"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// On mouse down, init eyedropper mode."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void ApplyColorButton_MouseDown(object sender, MouseButtonEventArgs e)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (this.GetCurrentSelection().Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionNone)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                MessageBox.Show(ColorsLabText.ErrorNoSelection, ColorsLabText.ErrorDialogTitle);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CaptureMouse();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SetEyedropperMode(((Button)sender).Name);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            BeginEyedropping();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.GetApplication().StartNewUndoEntry();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Slider Value Changed Handlers"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Updates selected color when brightness slider is moved."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void BrightnessSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs\u003cdouble\u003e e)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            double newBrightness \u003d e.NewValue;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            HSLColor newColor \u003d new HSLColor();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            newColor.Hue \u003d dataSource.SelectedColor.Hue;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            newColor.Saturation \u003d dataSource.SelectedColor.Saturation;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            newColor.Luminosity \u003d newBrightness;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            dataSource.SelectedColor \u003d newColor;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        "
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Updates selected color when saturation slider is moved."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void SaturationSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs\u003cdouble\u003e e)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            double newSaturation \u003d e.NewValue;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            HSLColor newColor \u003d new HSLColor();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            newColor.Hue \u003d dataSource.SelectedColor.Hue;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            newColor.Saturation \u003d newSaturation;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            newColor.Luminosity \u003d dataSource.SelectedColor.Luminosity;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            dataSource.SelectedColor \u003d newColor;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Color Rectangle Handlers"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Add MouseUp event to rectangle to simulate a click event."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void SelectedColorRectangle_MouseDown(object sender, MouseButtonEventArgs e)"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_isEyedropperMode)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // We remove the MouseUp event first before adding it to ensure that at anytime there\u0027s only"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // one listener for the MouseUp event."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Shapes.Rectangle rect \u003d (System.Windows.Shapes.Rectangle)sender;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            rect.MouseUp -\u003d SelectedColorRectangle_MouseUp;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            rect.MouseUp +\u003d SelectedColorRectangle_MouseUp;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Opens up a Windows.Forms ColorDialog upon click of the selectedColor rectangle."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void SelectedColorRectangle_MouseUp(object sender, MouseButtonEventArgs e)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Shapes.Rectangle rect \u003d (System.Windows.Shapes.Rectangle)sender;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            rect.MouseUp -\u003d SelectedColorRectangle_MouseUp;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Forms.ColorDialog colorPickerDialog \u003d new System.Windows.Forms.ColorDialog();"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorPickerDialog.FullOpen \u003d true;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Sets the initial color select to the current selected color."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorPickerDialog.Color \u003d dataSource.SelectedColor;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Update the selected color if the user clicks OK"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (colorPickerDialog.ShowDialog() \u003d\u003d System.Windows.Forms.DialogResult.OK)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                dataSource.SelectedColor \u003d colorPickerDialog.Color;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Handles drag-and-drop functionality for color rects that can be dragged to favourite colors."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void DraggableColorRectangle_MouseMove(object sender, MouseEventArgs e)"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_isEyedropperMode)"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Shapes.Rectangle rect \u003d (System.Windows.Shapes.Rectangle)sender;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (rect !\u003d null \u0026\u0026 e.LeftButton \u003d\u003d MouseButtonState.Released)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                _shouldAllowDrag \u003d true;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (rect !\u003d null \u0026\u0026 e.LeftButton \u003d\u003d MouseButtonState.Pressed \u0026\u0026 _shouldAllowDrag)"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                try"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    DragDrop.DoDragDrop(rect, rect.Fill.ToString(), DragDropEffects.Copy);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                } "
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                catch (System.Runtime.InteropServices.COMException)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    // This exception occurs when user tries to drag the color rect to a textbox/shape on the slide."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    // Due to lack of drag and drop support for some PowerPoint objects, exception will be thrown."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    // When this is detected, to insert the data to the textbox instead."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    // More info: https://social.msdn.microsoft.com/Forums/en-US/9925d6c7-e92f-40e7-9467-7b4e69174e9e/vsto-addin-gt-facing-problem-in-implementing-dragdrop-functionality-gt-need-help?forum\u003dvsto"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    PowerPoint.Selection currSelection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    if (currSelection.Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionShapes ||"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        currSelection.Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionText)"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        currSelection.TextRange2.Text \u003d rect.Fill.ToString();"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                _shouldAllowDrag \u003d false;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// This function prevents user to begin the drag from outside the rectangle."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void DraggableColorRectangle_MouseLeave(object sender, MouseEventArgs e)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_isEyedropperMode)"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            _shouldAllowDrag \u003d false;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Shapes.Rectangle rect \u003d (System.Windows.Shapes.Rectangle)sender;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (rect.Name \u003d\u003d \"selectedColorRectangle\")"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect.MouseUp -\u003d SelectedColorRectangle_MouseUp;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Adds a MouseUp listener to the sender object when it detects a MouseDown."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// The purpose of this is to simulate a click event on the Rectangle object."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void ColorRectangle_MouseDown(object sender, MouseButtonEventArgs e)"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_isEyedropperMode)"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // We remove the MouseUp event first before adding it to ensure that at anytime there\u0027s only"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // one listener for the MouseUp event."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Shapes.Rectangle rect \u003d (System.Windows.Shapes.Rectangle)sender;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            rect.MouseUp -\u003d ColorRectangle_MouseUp;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            rect.MouseUp +\u003d ColorRectangle_MouseUp;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Change the selectedColor to the color of the matching color rect."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void ColorRectangle_MouseUp(object sender, MouseButtonEventArgs e)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Shapes.Rectangle rect \u003d (System.Windows.Shapes.Rectangle)sender;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            rect.MouseUp -\u003d ColorRectangle_MouseUp;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Media.Color color \u003d ((SolidColorBrush)rect.Fill).Color;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color selectedColor \u003d Color.FromArgb(color.A, color.R, color.G, color.B);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            dataSource.SelectedColor \u003d new HSLColor(selectedColor);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Handles drag and drop functionality for favourtie color rectangles."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void FavoriteRect_DragEnter(object sender, DragEventArgs e)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_isEyedropperMode)"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Shapes.Rectangle rect \u003d (System.Windows.Shapes.Rectangle)sender;"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Media.Color prevMediaColor \u003d ((SolidColorBrush)rect.Fill).Color;"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            _previousFillColor \u003d Color.FromArgb(prevMediaColor.A, prevMediaColor.R, prevMediaColor.G, prevMediaColor.B);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (rect !\u003d null)"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                // If the DataObject contains string data, extract it."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                if (e.Data.GetDataPresent(DataFormats.StringFormat))"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    string dataString \u003d (string)e.Data.GetData(DataFormats.StringFormat);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    // If the string can be converted into a Color, "
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    // convert it and apply it to the rect."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    ColorConverter converter \u003d new ColorConverter();"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    if (converter.IsValid(dataString))"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        System.Windows.Media.Color mediaColor \u003d (System.Windows.Media.Color)ColorConverter.ConvertFromString(dataString);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        Color color \u003d Color.FromArgb(mediaColor.A, mediaColor.R, mediaColor.G, mediaColor.B);"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        SetFavoriteColorRectangle(Grid.GetColumn(rect), color);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Handles drag and drop functionality for favourtie color rectangles."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void FavoriteRect_DragOver(object sender, DragEventArgs e)"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_isEyedropperMode)"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            e.Effects \u003d DragDropEffects.None;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // If the DataObject contains string data, extract it."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (e.Data.GetDataPresent(DataFormats.StringFormat))"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                string dataString \u003d (string)e.Data.GetData(DataFormats.StringFormat);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                // If the string can be converted into a Brush, allow copying."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                BrushConverter converter \u003d new BrushConverter();"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                if (converter.IsValid(dataString))"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    e.Effects \u003d DragDropEffects.Copy | DragDropEffects.Move;"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Handles drag and drop functionality for favourtie color rectangles."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void FavoriteRect_DragLeave(object sender, DragEventArgs e)"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_isEyedropperMode)"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Shapes.Rectangle rect \u003d (System.Windows.Shapes.Rectangle)sender;"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (rect !\u003d null)"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                SetFavoriteColorRectangle(Grid.GetColumn(rect), _previousFillColor);"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Handles drag and drop functionality for favourtie color rectangles."
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void FavoriteRect_Drop(object sender, DragEventArgs e)"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_isEyedropperMode)"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Shapes.Rectangle rect \u003d (System.Windows.Shapes.Rectangle)sender;"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (rect !\u003d null)"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                // If the DataObject contains string data, extract it."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                if (e.Data.GetDataPresent(DataFormats.StringFormat))"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    string dataString \u003d (string)e.Data.GetData(DataFormats.StringFormat);"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    // If the string can be converted into a Color, "
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    // convert it and apply it to the rect."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    ColorConverter converter \u003d new ColorConverter();"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    if (converter.IsValid(dataString))"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        System.Windows.Media.Color mediaColor \u003d (System.Windows.Media.Color)ColorConverter.ConvertFromString(dataString);"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        Color color \u003d Color.FromArgb(mediaColor.A, mediaColor.R, mediaColor.G, mediaColor.B);"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        SetFavoriteColorRectangle(Grid.GetColumn(rect), color);"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Eye Dropper Event Handlers"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Gets the mouse position and pixel color value every tick of the timer."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void Timer1_Tick(object sender, EventArgs e)"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            timer1Ticks++;"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Drawing.Point mousePos \u003d System.Windows.Forms.Control.MousePosition;"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            IntPtr deviceContext \u003d PPExtraEventHelper.Native.GetDC(IntPtr.Zero);"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color pickedColor \u003d System.Drawing.ColorTranslator.FromWin32(PPExtraEventHelper.Native.GetPixel(deviceContext, mousePos.X, mousePos.Y));"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // If button has not been held long enough to register as a drag, then don\u0027t pick a color."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (timer1Ticks \u003c CLICK_THRESHOLD)"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_eyedropperMode \u003d\u003d MODE.MAIN)"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                ColorMainColorRect(pickedColor);"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                _currentEyedroppedColor \u003d pickedColor;"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            else"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                ColorSelectedShapesWithColor(pickedColor, _eyedropperMode);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                _currentSelectedColor \u003d pickedColor;"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Handles the end of eye dropper mode."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        void LeftMouseButtonUpEventHandler()"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PPExtraEventHelper.PPMouse.LeftButtonUp -\u003d LeftMouseButtonUpEventHandler;"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            magnifier.Hide();"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            eyeDropperTimer.Stop();"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Only change the actual datasource selectedColor at the end of eyedropping."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_eyedropperMode \u003d\u003d MODE.MAIN)"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                selectedColorRectangle.Opacity \u003d 1;"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "                if (timer1Ticks \u003e\u003d CLICK_THRESHOLD)"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    dataSource.SelectedColor \u003d _currentEyedroppedColor;"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Update recent colors if color has been used"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_eyedropperMode \u003d\u003d MODE.FILL || _eyedropperMode \u003d\u003d MODE.FONT || _eyedropperMode \u003d\u003d MODE.LINE)"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "                if (timer1Ticks \u003e\u003d CLICK_THRESHOLD)"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    dataSource.AddColorToRecentColors(_currentSelectedColor);"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            _isEyedropperMode \u003d false;"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            _eyedropperMode \u003d MODE.NONE;"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Mouse.OverrideCursor \u003d null;"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Mouse.Capture(null);"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (timer1Ticks \u003c CLICK_THRESHOLD)"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                Dispatcher.CurrentDispatcher.BeginInvoke(DispatcherPriority.Loaded, new Action(delegate"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    MessageBox.Show(\"To use this button, click and drag to desired color.\", ColorsLabText.ErrorDialogTitle);"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void EyeDropperButton_PreviewMouseDown(object sender, MouseButtonEventArgs e)"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CaptureMouse();"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SetEyedropperMode(((Button)sender).Name);"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            BeginEyedropping();"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            this.GetApplication().StartNewUndoEntry();"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Favourite Colors Button Handlers"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// Saves the current favorite panel as a custom favorite file."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void SaveColorButton_Click(object sender, EventArgs e)"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Forms.SaveFileDialog saveFileDialog \u003d new System.Windows.Forms.SaveFileDialog();"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            saveFileDialog.DefaultExt \u003d \"thm\";"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            saveFileDialog.Filter \u003d \"PPTLabsFavorites|*.thm\";"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            saveFileDialog.Title \u003d \"Save Favorite\";"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            "
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Forms.DialogResult result \u003d saveFileDialog.ShowDialog();"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (result \u003d\u003d System.Windows.Forms.DialogResult.OK \u0026\u0026"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                dataSource.SaveFavoriteColorsInFile(saveFileDialog.FileName))"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                SaveDefaultColorPaneFavoriteColors();"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// Loads a favorite panel from an existing favorite file."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void LoadColorButton_Click(object sender, EventArgs e)"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Forms.OpenFileDialog openFileDialog \u003d new System.Windows.Forms.OpenFileDialog();"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            openFileDialog.DefaultExt \u003d \"thm\";"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            openFileDialog.Filter \u003d \"PPTLabsFavorite|*.thm\";"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            openFileDialog.Title \u003d \"Load Favorite\";"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Forms.DialogResult result \u003d openFileDialog.ShowDialog();"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (result \u003d\u003d System.Windows.Forms.DialogResult.OK \u0026\u0026"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                dataSource.LoadFavoriteColorsFromFile(openFileDialog.FileName))"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                SaveDefaultColorPaneFavoriteColors();"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// Reset to the last loaded favorite panel."
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void ReloadColorButton_Click(object sender, EventArgs e)"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ResetFavoritePanel();"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// Clears the current favorite panel, i.e. set all favourite colors to white."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void ClearColorButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            EmptyFavoritePanel();"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Context Menu Handlers"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void Color_Information_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            MenuItem menuItem \u003d sender as MenuItem;"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (menuItem \u003d\u003d null)"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Shapes.Rectangle rect \u003d ((ContextMenu)(menuItem.Parent)).PlacementTarget as System.Windows.Shapes.Rectangle;"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Media.Color color \u003d ((SolidColorBrush)rect.Fill).Color;"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color selectedColor \u003d Color.FromArgb(color.A, color.R, color.G, color.B);"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ColorInformationDialog dialog \u003d new ColorInformationDialog(selectedColor);"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            dialog.Show();"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void Set_Main_Color_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            MenuItem menuItem \u003d sender as MenuItem;"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (menuItem \u003d\u003d null)"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Shapes.Rectangle rect \u003d ((ContextMenu)(menuItem.Parent)).PlacementTarget as System.Windows.Shapes.Rectangle;"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Media.Color color \u003d ((SolidColorBrush)rect.Fill).Color;"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color selectedColor \u003d Color.FromArgb(color.A, color.R, color.G, color.B);"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            dataSource.SelectedColor \u003d new HSLColor(selectedColor);"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void Add_Favorite_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            MenuItem menuItem \u003d sender as MenuItem;"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (menuItem \u003d\u003d null)"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Shapes.Rectangle rect \u003d ((ContextMenu)(menuItem.Parent)).PlacementTarget as System.Windows.Shapes.Rectangle;"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Media.Color color \u003d ((SolidColorBrush)rect.Fill).Color;"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            HSLColor clickedColor \u003d Color.FromArgb(color.A, color.R, color.G, color.B);"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            dataSource.AddColorToFavorites(clickedColor);"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Helpers"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Apply Colors (Text, Fill, Line)"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Color selected shapes with selected color, in the given mode."
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"selectedColor\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"colorMode\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void ColorSelectedShapesWithColor(HSLColor selectedColor, MODE colorMode)"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SelectShapes();"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_selectedShapes !\u003d null"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                \u0026\u0026 this.GetCurrentSelection().Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionShapes)"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                foreach (PowerPoint.Shape s in _selectedShapes)"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    try"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        Byte r \u003d ((Color)selectedColor).R;"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        Byte g \u003d ((Color)selectedColor).G;"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        Byte b \u003d ((Color)selectedColor).B;"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        int rgb \u003d (b \u003c\u003c 16) | (g \u003c\u003c 8) | (r);"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        ColorShapeWithColor(s, rgb, colorMode);"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    catch (Exception)"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        RecreateCorruptedShape(s);"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_selectedText !\u003d null"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                \u0026\u0026 this.GetCurrentSelection().Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionText)"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                try"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    Byte r \u003d ((Color)selectedColor).R;"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    Byte g \u003d ((Color)selectedColor).G;"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    Byte b \u003d ((Color)selectedColor).B;"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    int rgb \u003d (b \u003c\u003c 16) | (g \u003c\u003c 8) | (r);"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    ColorTextWithColor(_selectedText, rgb, colorMode);"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                catch (Exception)"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Retrieves selected shapes or text."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void SelectShapes()"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            try"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                PowerPoint.Selection selection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                if (selection \u003d\u003d null)"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                if (selection.Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionShapes \u0026\u0026"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    selection.HasChildShapeRange)"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _selectedShapes \u003d selection.ChildShapeRange;"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                else if (selection.Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionShapes)"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _selectedShapes \u003d selection.ShapeRange;"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                else if (selection.Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionText)"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _selectedText \u003d selection.TextRange;"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                else"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _selectedShapes \u003d null;"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _selectedText \u003d null;"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            catch (Exception)"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                _selectedShapes \u003d null;"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                _selectedText \u003d null;"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Colors specified text range with given color."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"text\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"rgb\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"mode\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void ColorTextWithColor(PowerPoint.TextRange text, int rgb, MODE mode)"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PowerPoint.TextFrame frame \u003d text.Parent as PowerPoint.TextFrame;"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PowerPoint.Shape selectedShape \u003d frame.Parent as PowerPoint.Shape;"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (mode !\u003d MODE.NONE)"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                ColorShapeWithColor(selectedShape, rgb, mode);"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Colors specified shape with color, in the given mode."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"s\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"rgb\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"mode\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void ColorShapeWithColor(PowerPoint.Shape s, int rgb, MODE mode)"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            switch (mode)"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case MODE.FILL:"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    s.Fill.ForeColor.RGB \u003d rgb;"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case MODE.LINE:"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    s.Line.ForeColor.RGB \u003d rgb;"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    s.Line.Visible \u003d MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case MODE.FONT:"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    ColorShapeFontWithColor(s, rgb);"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Colors specified shape with color."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"s\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"rgb\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void ColorShapeFontWithColor(PowerPoint.Shape s, int rgb)"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (s.HasTextFrame \u003d\u003d MsoTriState.msoTrue)"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                PowerPoint.Selection selection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                if (selection \u003d\u003d null)"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                if (selection.ShapeRange.HasTextFrame \u003d\u003d MsoTriState.msoTrue)"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    if (selection.Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionText)"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        PowerPoint.TextRange selectedText \u003d selection.TextRange.TrimText();"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        if (selectedText.Text !\u003d \"\" \u0026\u0026 selectedText !\u003d null)"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                            selectedText.Font.Color.RGB \u003d rgb;"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        else"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                            s.TextFrame.TextRange.TrimText().Font.Color.RGB \u003d rgb;"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    else if (selection.Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionShapes)"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        s.TextFrame.TextRange.TrimText().Font.Color.RGB \u003d rgb;"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Recreates any specified corrupted shape."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"s\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void RecreateCorruptedShape(PowerPoint.Shape s)"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            s.Copy();"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PowerPoint.Shape newShape \u003d this.GetCurrentSlide().Shapes.Paste()[1];"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            newShape.Select();"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            newShape.Name \u003d s.Name;"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            newShape.Left \u003d s.Left;"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            newShape.Top \u003d s.Top;"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            while (newShape.ZOrderPosition \u003e s.ZOrderPosition)"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                newShape.ZOrder(Microsoft.Office.Core.MsoZOrderCmd.msoSendBackward);"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            s.Delete();"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Retrieves color of the selected shape(s)."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"mode\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003creturns\u003e\u003c/returns\u003e"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private Color GetSelectedShapeColor(MODE mode)"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SelectShapes();"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_selectedShapes \u003d\u003d null \u0026\u0026 _selectedText \u003d\u003d null)"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return dataSource.SelectedColor;"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (this.GetCurrentSelection().Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionShapes)"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return GetSelectedShapeColor(_selectedShapes, mode);"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (this.GetCurrentSelection().Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionText)"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                PowerPoint.TextFrame frame \u003d _selectedText.Parent as PowerPoint.TextFrame;"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                PowerPoint.Shape selectedShape \u003d frame.Parent as PowerPoint.Shape;"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return GetSelectedShapeColor(selectedShape, mode);"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return dataSource.SelectedColor;"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Retrieves color of the selected shapeRange, "
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// returning Black if shapeRange contains shapes with different colors."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"selectedShapes\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"mode\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003creturns\u003e\u003c/returns\u003e"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private Color GetSelectedShapeColor(PowerPoint.ShapeRange selectedShapes, MODE mode)"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color colorToReturn \u003d Color.Empty;"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            foreach (object selectedShape in selectedShapes)"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                Color color \u003d GetSelectedShapeColor(selectedShape as PowerPoint.Shape, mode);"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                if (colorToReturn.Equals(Color.Empty))"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    colorToReturn \u003d color;"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                else if (!colorToReturn.Equals(color))"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    return Color.Black;"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return colorToReturn;"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Retrieves color of the selected shape."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"selectedShape\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"mode\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003creturns\u003e\u003c/returns\u003e"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private Color GetSelectedShapeColor(PowerPoint.Shape selectedShape, MODE mode)"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            switch (mode)"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case MODE.FILL:"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    return Color.FromArgb(ColorHelper.ReverseRGBToArgb(selectedShape.Fill.ForeColor.RGB));"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case MODE.LINE:"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    return Color.FromArgb(ColorHelper.ReverseRGBToArgb(selectedShape.Line.ForeColor.RGB));"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case MODE.FONT:"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    if (selectedShape.HasTextFrame \u003d\u003d MsoTriState.msoTrue"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        \u0026\u0026 this.GetApplication().ActiveWindow.Selection.ShapeRange.HasTextFrame"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        \u003d\u003d MsoTriState.msoTrue)"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        if (this.GetCurrentSelection().Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionText)"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                            PowerPoint.TextRange selectedText"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                \u003d this.GetApplication().ActiveWindow.Selection.TextRange.TrimText();"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                            if (selectedText !\u003d null \u0026\u0026 selectedText.Text !\u003d \"\")"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                            {"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                return Color.FromArgb(ColorHelper.ReverseRGBToArgb(selectedText.Font.Color.RGB));"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                            else"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                            {"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                return"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                Color.FromArgb("
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                    ColorHelper.ReverseRGBToArgb(selectedShape.TextFrame.TextRange.Font.Color.RGB));"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        else if (this.GetCurrentSelection().Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionShapes)"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                            return"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                Color.FromArgb("
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                    ColorHelper.ReverseRGBToArgb(selectedShape.TextFrame.TextRange.Font.Color.RGB));"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return dataSource.SelectedColor;"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Eye Dropper"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Sets the eyedropper mode given the name of the rectangle."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"rectName\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void SetEyedropperMode(string rectName)"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            switch (rectName)"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case \"applyTextColorButton\":"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _eyedropperMode \u003d MODE.FONT;"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case \"applyLineColorButton\":"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _eyedropperMode \u003d MODE.LINE;"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case \"applyFillColorButton\":"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _eyedropperMode \u003d MODE.FILL;"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case \"eyeDropperButton\":"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _eyedropperMode \u003d MODE.MAIN;"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _eyedropperMode \u003d MODE.NONE;"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Show magnifier and begin eye dropping."
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void BeginEyedropping()"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            _isEyedropperMode \u003d true;"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            timer1Ticks \u003d 0;"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            eyeDropperTimer.Start();"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Mouse.OverrideCursor \u003d eyeDropperCursor;"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PPExtraEventHelper.PPMouse.LeftButtonUp +\u003d LeftMouseButtonUpEventHandler;"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            magnifier.Show();"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_eyedropperMode \u003d\u003d MODE.MAIN)"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                eyeDropperPreviewRectangle.Fill \u003d selectedColorRectangle.Fill;"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                selectedColorRectangle.Opacity \u003d 0;"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void ColorMainColorRect(Color color)"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            eyeDropperPreviewRectangle.Fill \u003d "
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                new SolidColorBrush(System.Windows.Media.Color.FromArgb(color.A, color.R, color.G, color.B));"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Favourite Colors"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Load default panel from default file, or clear the panel if unsuccessful."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void LoadDefaultFavoritePanel()"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            bool isSuccessful \u003d dataSource.LoadFavoriteColorsFromFile(_defaultFavoriteColorDirectory);"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (!isSuccessful)"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                EmptyFavoritePanel();"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// Reset panel to the last loaded favorite panel."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void ResetFavoritePanel()"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            try"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                LoadDefaultFavoritePanel();"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ErrorDialogBox.ShowDialog(\"Favorite Panel Reset Failed\", e.Message, e);"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Clear the panel to all white color."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void EmptyFavoritePanel()"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            try"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                if (this.GetCurrentSlide() !\u003d null)"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    dataSource.ClearFavoriteColors();"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ErrorDialogBox.ShowDialog(\"Favorite Panel Reset Failed\", e.Message, e);"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Set the color rect given the name of the rect, and the color to set."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"name\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003cparam name\u003d\"color\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void SetFavoriteColorRectangle(int column, Color color)"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            dataSource.SetFavoriteColor(column, color);"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// Save current panel as default favorite color."
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void SaveDefaultColorPaneFavoriteColors()"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            dataSource.SaveFavoriteColorsInFile(_defaultFavoriteColorDirectory);"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Recent Colors"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        "
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Save current recent colors panel to file."
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void SaveColorPaneRecentColors()"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            dataSource.SaveRecentColorsInFile(_defaultRecentColorDirectory);"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// Load recent panel from file, or clear the panel if unsuccessful."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void LoadRecentColorsPanel()"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            bool isSuccessful \u003d dataSource.LoadRecentColorsFromFile(_defaultRecentColorDirectory);"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (!isSuccessful)"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                EmptyRecentColorsPanel();"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "blewjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 1162,
      "YuPeiHenry": 58,
      "-": 25
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ColorsLab/HSLColor.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace PowerPointLabs.ColorsLab"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    /// taken from: http://richnewman.wordpress.com/about/code-listings-and-diagrams/hslcolor-class/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    [Serializable]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public class HSLColor"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        // Private data members below are on scale 0-1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // They are scaled for use externally based on scale"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        private double hue \u003d 1.0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        private double saturation \u003d 1.0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        private double luminosity \u003d 1.0;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        private const double scale \u003d 240.0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        public double Hue"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            get { return hue * scale; }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            set { hue \u003d CheckRange(value / scale); }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public double Saturation"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            get { return saturation * scale; }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            set { saturation \u003d CheckRange(value / scale); }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public double Luminosity"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            get { return luminosity * scale; }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            set { luminosity \u003d CheckRange(value / scale); }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        public override string ToString()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return String.Format(\"H: {0:#0.##} S: {1:#0.##} L: {2:#0.##}\", Hue, Saturation, Luminosity);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public override bool Equals(object obj)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            HSLColor color \u003d obj as HSLColor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (color \u003d\u003d null)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return this.Hue \u003d\u003d color.Hue \u0026\u0026 this.Saturation \u003d\u003d color.Saturation \u0026\u0026 this.Luminosity \u003d\u003d color.Luminosity;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public override int GetHashCode()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return this.GetHashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        public string ToRGBString()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Color color \u003d (Color)this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return String.Format(\"R: {0:#0.##} G: {1:#0.##} B: {2:#0.##}\", color.R, color.G, color.B);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public string ToHexString()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color color \u003d (Color)this;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return ColorHelper.ColorToHexString(color);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        public void SetRGB(int red, int green, int blue)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            HSLColor hslColor \u003d (HSLColor)Color.FromArgb(red, green, blue);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            this.hue \u003d hslColor.hue;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            this.saturation \u003d hslColor.saturation;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            this.luminosity \u003d hslColor.luminosity;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        public HSLColor() { }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        public HSLColor(Color color)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            SetRGB(color.R, color.G, color.B);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public HSLColor(int red, int green, int blue)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            SetRGB(red, green, blue);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public HSLColor(double hue, double saturation, double luminosity)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            this.Hue \u003d hue;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            this.Saturation \u003d saturation;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            this.Luminosity \u003d luminosity;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Casts to/from System.Drawing.Color"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        public static implicit operator Color(HSLColor hslColor)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            double r \u003d 0, g \u003d 0, b \u003d 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            if (hslColor !\u003d null \u0026\u0026 hslColor.luminosity !\u003d 0)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                if (hslColor.saturation \u003d\u003d 0)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    r \u003d g \u003d b \u003d hslColor.luminosity;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                    double temp2 \u003d GetTemp2(hslColor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                    double temp1 \u003d 2.0 * hslColor.luminosity - temp2;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    r \u003d GetColorComponent(temp1, temp2, hslColor.hue + 1.0 / 3.0);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                    g \u003d GetColorComponent(temp1, temp2, hslColor.hue);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                    b \u003d GetColorComponent(temp1, temp2, hslColor.hue - 1.0 / 3.0);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return Color.FromArgb((int)Math.Round(255 * r), (int)Math.Round(255 * g), (int)Math.Round(255 * b));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        private static double GetColorComponent(double temp1, double temp2, double temp3)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            temp3 \u003d MoveIntoRange(temp3);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            if (temp3 \u003c 1.0 / 6.0)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                return temp1 + (temp2 - temp1) * 6.0 * temp3;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            else if (temp3 \u003c 0.5)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                return temp2;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            else if (temp3 \u003c 2.0 / 3.0)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                return temp1 + ((temp2 - temp1) * ((2.0 / 3.0) - temp3) * 6.0);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                return temp1;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private static double MoveIntoRange(double temp3)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            if (temp3 \u003c 0.0)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                temp3 +\u003d 1.0;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            else if (temp3 \u003e 1.0)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                temp3 -\u003d 1.0;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return temp3;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        private static double GetTemp2(HSLColor hslColor)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            double temp2;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            if (hslColor.luminosity \u003c 0.5)  //\u003c\u003d??"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                temp2 \u003d hslColor.luminosity * (1.0 + hslColor.saturation);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                temp2 \u003d hslColor.luminosity + hslColor.saturation - (hslColor.luminosity * hslColor.saturation);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            return temp2;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        public static implicit operator HSLColor(Color color)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            HSLColor hslColor \u003d new HSLColor();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            hslColor.hue \u003d color.GetHue() / 360.0; // we store hue as 0-1 as opposed to 0-360 "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            hslColor.luminosity \u003d color.GetBrightness();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            hslColor.saturation \u003d color.GetSaturation();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            return hslColor;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        private double CheckRange(double value)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            if (value \u003c 0.0)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                value \u003d 0.0;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            else if (value \u003e 1.0)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                value \u003d 1.0;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return value;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 23,
      "-": 165
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ColorsLab/Magnifier.xaml.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Runtime.InteropServices;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Interop;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using PPExtraEventHelper;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace PowerPointLabs.ColorsLab"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /// Interaction logic for Magnifier.xaml"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public partial class Magnifier : Window"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        private MagnifierOverlay magnifierOverlay;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        private MagnificationControlHost magnificationControl;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        private System.Windows.Threading.DispatcherTimer timer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        private IntPtr hwndMag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool isMagInitialized;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        private List\u003cIntPtr\u003e magFilteredWindows;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        private float magnificationFactor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        private Size actualHalfSize;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        private Size sourceRectSize;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        private Size sourceRectHalfSize;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        public Magnifier(float magnificationFactor)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            InitializeComponent();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            timer \u003d new System.Windows.Threading.DispatcherTimer();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            timer.Interval \u003d new TimeSpan(0, 0, 0, 0, 100);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            timer.Tick +\u003d new EventHandler(Timer_Tick);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            magnifierOverlay \u003d new MagnifierOverlay();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            magnifierOverlay.Visibility \u003d Visibility.Collapsed;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            magnifierOverlay.Loaded +\u003d MagnifierOverlay_Loaded;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            isMagInitialized \u003d false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            this.magnificationFactor \u003d magnificationFactor;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Visibility \u003d Visibility.Visible;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Magnification HwndHost Win32 Interop"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        private class MagnificationControlHost : HwndHost"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            internal const string WC_MAGNIFIER \u003d \"Magnifier\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            private IntPtr hwndHost;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            private int hostWidth, hostHeight;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            public MagnificationControlHost(double width, double height)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                hostWidth \u003d (int)(width * Utils.GraphicsUtil.GetDpiScale());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                hostHeight \u003d (int)(height * Utils.GraphicsUtil.GetDpiScale());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            protected override HandleRef BuildWindowCore(HandleRef hwndParent)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                hwndHost \u003d IntPtr.Zero;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                // Make window click-through"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                int extendedStyle \u003d Native.GetWindowLong(hwndParent.Handle, (int)Native.WindowLong.GWL_EXSTYLE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                Native.SetWindowLong(hwndParent.Handle, (int)Native.WindowLong.GWL_EXSTYLE,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                                    extendedStyle |"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                                    (int)Native.ExtendedWindowStyles.WS_EX_TRANSPARENT |"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                                    (int)Native.ExtendedWindowStyles.WS_EX_LAYERED |"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                                    (int)Native.ExtendedWindowStyles.WS_EX_TOOLWINDOW);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                Native.SetWindowLong(hwndParent.Handle, (int)Native.WindowLong.GWL_STYLE, (int)Native.WindowStyles.WS_POPUP);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                // Must be transparent for Magnification to work"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                Native.SetLayeredWindowAttributes(hwndParent.Handle, 0, 255, Native.LayeredWindowAttributeFlags.LWA_ALPHA);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                // Create Magnification control host"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                hwndHost \u003d Native.CreateWindowEx(0, WC_MAGNIFIER, \"MagnificationControl\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                                                (int)Native.WindowStyles.WS_CHILD |"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                                                (int)Native.WindowStyles.WS_VISIBLE |"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                                                (int)Native.MagnifierStyle.MS_CLIPAROUNDCURSOR,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                                                0, 0,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                                                hostWidth, hostHeight,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                                                hwndParent.Handle,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                                                IntPtr.Zero, "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                                                IntPtr.Zero, "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                                                0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                // Clip window into ellipse"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                IntPtr ellipseRegion \u003d Native.CreateRoundRectRgn(0, 0,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                                                hostWidth, hostHeight,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                                                hostWidth, hostHeight);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                Native.SetWindowRgn(hwndHost, ellipseRegion, true);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HandleRef(this, hwndHost);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            protected override IntPtr WndProc(IntPtr hwnd, int msg, IntPtr wParam, IntPtr lParam, ref bool handled)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                handled \u003d false;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                return IntPtr.Zero;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            protected override void DestroyWindowCore(HandleRef hwnd)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                Native.DestroyWindow(hwnd.Handle);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            public IntPtr HwndControl"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                get { return hwndHost; }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            public int HostWidth"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                get { return hostWidth; }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            public int HostHeight"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                get { return hostHeight; }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Public API"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        public new void Show()"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isMagInitialized)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateMagnifier();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                timer.Start();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Visibility \u003d Visibility.Visible;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                magnifierOverlay.Visibility \u003d Visibility;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        public new void Hide()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            timer.Stop();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            Visibility \u003d Visibility.Collapsed;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            magnifierOverlay.Visibility \u003d Visibility;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Handled events"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        private void Window_Loaded(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                // Magnification is disabled on some environments"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                if (IsMagnificationApiAvailable())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                    isMagInitialized \u003d Native.MagInitialize();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isMagInitialized)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                    SetupMagnifier();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception exception)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                // Windows XP does not support Magnifier"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(exception, \"Magnifier_Window_Loaded\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                TeardownMagnifier();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                isMagInitialized \u003d false;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            finally"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                // Hide after initializing UI"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                Hide();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        private void MagnifierOverlay_Loaded(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            IntPtr overlayHwnd \u003d new WindowInteropHelper(magnifierOverlay).Handle;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            AddMagnifierFilteredWindow(overlayHwnd);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        private void Window_Unloaded(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            TeardownMagnifier();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        private void Timer_Tick(object sender, EventArgs e)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            UpdateMagnifier();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Magnifier methods"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SetupMagnifier()"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            magFilteredWindows \u003d new List\u003cIntPtr\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            magnificationControl \u003d new MagnificationControlHost(Width, Height);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            MagnificationHostElement.Child \u003d magnificationControl;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            hwndMag \u003d magnificationControl.HwndControl;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            if (hwndMag \u003d\u003d IntPtr.Zero)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                string errorMsg \u003d \"Create MagnifierWindow failed. Insufficient heap or handle table entries.\";"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new OutOfMemoryException(errorMsg);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            // Calculate dimensions once"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            actualHalfSize.Width \u003d ActualWidth / 2;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            actualHalfSize.Height \u003d ActualHeight / 2;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            sourceRectSize.Width \u003d magnificationControl.HostWidth / magnificationFactor;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            sourceRectSize.Height \u003d magnificationControl.HostHeight / magnificationFactor;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            sourceRectHalfSize.Width \u003d sourceRectSize.Width / 2;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            sourceRectHalfSize.Height \u003d sourceRectSize.Height / 2;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            // Set the magnification factor"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            Native.MAGTRANSFORM magTransformMatrix \u003d new Native.MAGTRANSFORM();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            magTransformMatrix.m00 \u003d magnificationFactor;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            magTransformMatrix.m11 \u003d magnificationFactor;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            magTransformMatrix.m22 \u003d 1.0f;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            Native.MagSetWindowTransform(hwndMag, ref magTransformMatrix);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AddMagnifierFilteredWindow(IntPtr handle)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            magFilteredWindows.Add(handle);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            Native.MagSetWindowFilterList(hwndMag, (int)Native.MagnifierFilterMode.MW_FILTERMODE_EXCLUDE,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                                          magFilteredWindows.Count, magFilteredWindows.ToArray());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TeardownMagnifier()"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isMagInitialized)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                Native.MagUninitialize();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdateMagnifier()"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            System.Drawing.Point mousePosition \u003d System.Windows.Forms.Control.MousePosition;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            // Set the source rectangle for the magnification"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            Native.RECT sourceRect \u003d new Native.RECT();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            sourceRect.Left \u003d mousePosition.X - (int)sourceRectHalfSize.Width;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            sourceRect.Top \u003d mousePosition.Y - (int)sourceRectHalfSize.Height;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            sourceRect.Right \u003d sourceRect.Left + (int)sourceRectSize.Width;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            sourceRect.Bottom \u003d sourceRect.Top + (int)sourceRectSize.Height;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            Native.MagSetWindowSource(hwndMag, sourceRect);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            // Force magnification redraw"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            Native.InvalidateRect(hwndMag, IntPtr.Zero, true);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            // Update position, WPF units are affected by monitor\u0027s DPI"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            Left \u003d (mousePosition.X / Utils.GraphicsUtil.GetDpiScale()) - actualHalfSize.Width;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            Top \u003d (mousePosition.Y / Utils.GraphicsUtil.GetDpiScale()) - actualHalfSize.Height;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            magnifierOverlay.Left \u003d Left;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            magnifierOverlay.Top \u003d Top;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Helper methods"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool IsMagnificationApiAvailable()"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            // Magnification API has a bug with window handle sign-extension"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            // on Windows 7 64-bit with 32-bit applications (i.e. Win7 WoW64)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            if (IsOSWindows7() \u0026\u0026"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                Environment.Is64BitOperatingSystem \u0026\u0026"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                !Environment.Is64BitProcess)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool IsOSWindows7()"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            // Major and minor version"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            return Environment.OSVersion.Platform \u003d\u003d PlatformID.Win32NT \u0026\u0026"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                    Environment.OSVersion.Version.Major \u003d\u003d 6 \u0026\u0026"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "                    Environment.OSVersion.Version.Minor \u003d\u003d 1;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 1,
      "-": 295
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ColorsLab/MagnifierOverlay.xaml.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System.Windows;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Interop;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using PPExtraEventHelper;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace PowerPointLabs.ColorsLab"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /// Interaction logic for MagnifierOverlay.xaml"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public partial class MagnifierOverlay : Window"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        public MagnifierOverlay()"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            InitializeComponent();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        private void MagnifierOverlay_Loaded(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            WindowInteropHelper wndHelper \u003d new WindowInteropHelper(this);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            int extendedStyle \u003d Native.GetWindowLong(wndHelper.Handle, (int)Native.WindowLong.GWL_EXSTYLE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            Native.SetWindowLong(wndHelper.Handle, (int)Native.WindowLong.GWL_EXSTYLE,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                                extendedStyle | (int)Native.ExtendedWindowStyles.WS_EX_TOOLWINDOW);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        private void MagnifierOverlay_Deactivated(object sender, System.EventArgs e)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            PPMouse.StopAllActions();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 1,
      "-": 33
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/Converters/ColorPane/HSLColorToHex.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Data;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ColorsLab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.Converters.ColorPane"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    [ValueConversion(typeof(HSLColor), typeof(string))]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    class HSLColorToHex : IValueConverter"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public static HSLColorToHex Instance \u003d new HSLColorToHex();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color color \u003d (HSLColor)value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return ColorHelper.ColorToHexString(color);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NotImplementedException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 8,
      "-": 17
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/Converters/ColorPane/HSLColorToRGBColor.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Data;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ColorsLab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.Converters.ColorPane"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    class HSLColorToRGBColor : IValueConverter"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            Color selectedColor \u003d (HSLColor)value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            return Color.FromArgb(255,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "                    selectedColor.R,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                    selectedColor.G,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                    selectedColor.B);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NotImplementedException();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 2,
      "-": 23
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/Converters/ColorPane/SelectedColorShiftByAngle.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blewjy"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Windows.Data;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ColorsLab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace PowerPointLabs.Converters.ColorPane"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blewjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    [ValueConversion(typeof(HSLColor), typeof(string))]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    class SelectedColorShiftByAngle : IValueConverter"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public static SelectedColorShiftByAngle Instance \u003d new SelectedColorShiftByAngle();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (value \u003d\u003d null)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                Color color \u003d (HSLColor)value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return ColorHelper.ColorToHexString(color);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            HSLColor selectedColor \u003d (HSLColor)value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color convertedColor \u003d ColorHelper.GetColorShiftedByAngle(selectedColor, float.Parse((string)parameter));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return ColorHelper.ColorToHexString(convertedColor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            throw new NotImplementedException();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blewjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 31
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/Converters/ColorPane/SelectedColorShiftLuminosityByFactor.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blewjy"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Windows.Data;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ColorsLab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace PowerPointLabs.Converters.ColorPane"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blewjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    [ValueConversion(typeof(HSLColor), typeof(string))]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    class SelectedColorShiftLuminosityByFactor : IValueConverter"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public static SelectedColorShiftLuminosityByFactor Instance \u003d new SelectedColorShiftLuminosityByFactor();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (value \u003d\u003d null)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                Color color \u003d (HSLColor)value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return ColorHelper.ColorToHexString(color);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            HSLColor selectedColor \u003d (HSLColor)value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            float shiftFactor \u003d float.Parse((string)parameter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color convertedColor \u003d new HSLColor(selectedColor.Hue, selectedColor.Saturation, shiftFactor * 240);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return ColorHelper.ColorToHexString(convertedColor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            throw new NotImplementedException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blewjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 32
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/Converters/ColorPane/SelectedColorShiftSaturationByFactor.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blewjy"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Windows.Data;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ColorsLab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace PowerPointLabs.Converters.ColorPane"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blewjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    [ValueConversion(typeof(HSLColor), typeof(string))]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    class SelectedColorShiftSaturationByFactor : IValueConverter"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public static SelectedColorShiftSaturationByFactor Instance \u003d new SelectedColorShiftSaturationByFactor();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (value \u003d\u003d null)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                Color color \u003d (HSLColor)value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return ColorHelper.ColorToHexString(color);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            HSLColor selectedColor \u003d (HSLColor)value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            float shiftFactor \u003d float.Parse((string)parameter);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color convertedColor \u003d new HSLColor(selectedColor.Hue, shiftFactor * 240, selectedColor.Luminosity);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return ColorHelper.ColorToHexString(convertedColor);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            throw new NotImplementedException();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blewjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 32
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/Converters/ColorPane/SelectedColorToBrightnessValue.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Data;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ColorsLab;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.Converters.ColorPane"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    [ValueConversion(typeof(HSLColor), typeof(int))]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    class SelectedColorToBrightnessValue : IValueConverter"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public static SelectedColorToBrightnessValue Instance \u003d new SelectedColorToBrightnessValue();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (value \u003d\u003d null)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            HSLColor selectedColor \u003d (HSLColor)value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return (int)(selectedColor.Luminosity);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NotImplementedException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 11,
      "-": 19
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/Converters/ColorPane/SelectedColorToSaturationValue.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Data;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ColorsLab;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.Converters.ColorPane"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    [ValueConversion(typeof(HSLColor), typeof(int))]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    class SelectedColorToSaturationValue : IValueConverter"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public static SelectedColorToSaturationValue Instance \u003d new SelectedColorToSaturationValue();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        public object Convert(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (value \u003d\u003d null)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            HSLColor selectedColor \u003d (HSLColor)value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return (int)(selectedColor.Saturation);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public object ConvertBack(object value, Type targetType, object parameter, System.Globalization.CultureInfo culture)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NotImplementedException();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 11,
      "-": 19
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/CropLab/CropToShape.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing.Imaging;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using System.IO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.EffectsLab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using Office \u003d Microsoft.Office.Core;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "using Selection \u003d Microsoft.Office.Interop.PowerPoint.Selection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "using ShapeRange \u003d Microsoft.Office.Interop.PowerPoint.ShapeRange;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.CropLab"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public class CropToShape"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string MessageBoxTitle \u003d \"Unable to crop\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        private static readonly string SlidePicture \u003d Path.GetTempPath() + @\"\\slide.png\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        private static readonly string FillInBackgroundPicture \u003d Path.GetTempPath() + @\"\\currentFillInBg.png\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Shape Crop(PowerPointSlide currentSlide, Selection selection,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                                double magnifyRatio \u003d 1.0, bool isInPlace \u003d false, bool handleError \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange shapeRange \u003d selection.ShapeRange;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selection.HasChildShapeRange)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                shapeRange \u003d selection.ChildShapeRange;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape croppedShape \u003d Crop(currentSlide, shapeRange, isInPlace: isInPlace, handleError: handleError);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            if (croppedShape !\u003d null)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                croppedShape.Select();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return croppedShape;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Shape Crop(PowerPointSlide currentSlide, ShapeRange shapeRange, "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                                double magnifyRatio \u003d 1.0, bool isInPlace \u003d false, bool handleError \u003d true)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                bool hasManyShapes \u003d shapeRange.Count \u003e 1;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape shape \u003d hasManyShapes ? shapeRange.Group() : shapeRange[1];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                float left \u003d shape.Left;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                float top \u003d shape.Top;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                shapeRange \u003d shape.Duplicate();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                shape.Delete();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                shapeRange.Left \u003d left;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                shapeRange.Top \u003d top;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                if (hasManyShapes)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapeRange \u003d shapeRange.Ungroup();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                TakeScreenshotProxy(currentSlide, shapeRange);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapeRange ungroupedRange \u003d EffectsLabUtil.UngroupAllShapeRange(currentSlide, shapeRange);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cShape\u003e shapeList \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d ungroupedRange.Count; i++)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    Shape filledShape \u003d FillInShapeWithImage(currentSlide, SlidePicture, ungroupedRange[i], magnifyRatio, isInPlace);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapeList.Add(filledShape);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapeRange croppedRange \u003d currentSlide.ToShapeRange(shapeList);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape croppedShape \u003d (croppedRange.Count \u003d\u003d 1) ? croppedRange[1] : croppedRange.Group();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                return croppedShape;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CropLabException(e.Message);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Shape FillInShapeWithImage(PowerPointSlide currentSlide, string imageFile, Shape shape, "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                                                double magnifyRatio \u003d 1.0, bool isInPlace \u003d false)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            CreateFillInBackgroundForShape(imageFile, shape, magnifyRatio);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Fill.UserPicture(FillInBackgroundPicture);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Line.Visible \u003d Office.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isInPlace)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                return shape;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Shape shapeToReturn \u003d shape.Duplicate()[1];"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Delete();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return shapeToReturn;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Bitmap KiCut(Bitmap original, float startX, float startY, float width, float height,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                                    double magnifyRatio \u003d 1.0)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            if (original \u003d\u003d null) { return null; }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                Bitmap outputImage \u003d new Bitmap((int)width, (int)height, PixelFormat.Format32bppArgb);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                double inverseRatio \u003d 1 / magnifyRatio;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                double newWidth \u003d width * inverseRatio;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                double newHeight \u003d height * inverseRatio;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                double newY \u003d startY + (1 - inverseRatio) / 2 * width;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                double newX \u003d startX + (1 - inverseRatio) / 2 * width;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                Graphics inputGraphics \u003d Graphics.FromImage(outputImage);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                inputGraphics.DrawImage(original,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Rectangle(0, 0, (int)width, (int)height),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                    new Rectangle((int)newX, (int)newY, (int)newWidth, (int)newHeight),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                    GraphicsUnit.Pixel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                inputGraphics.Dispose();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                return outputImage;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            catch"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void CreateFillInBackgroundForShape(string imageFile, Shape shape, double magnifyRatio \u003d 1.0)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            using (Bitmap slideImage \u003d (Bitmap)Image.FromFile(imageFile))"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shape.Rotation \u003d\u003d 0)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                    CreateFillInBackground(shape, slideImage, magnifyRatio);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                    CreateRotatedFillInBackground(shape, slideImage, magnifyRatio);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void CreateFillInBackground(Shape shape, Bitmap slideImage, double magnifyRatio \u003d 1.0)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap croppedImage \u003d KiCut(slideImage,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.Left * GraphicsUtil.PictureExportingRatio,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.Top * GraphicsUtil.PictureExportingRatio,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.Width * GraphicsUtil.PictureExportingRatio,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.Height * GraphicsUtil.PictureExportingRatio,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                magnifyRatio);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            croppedImage.Save(FillInBackgroundPicture, ImageFormat.Png);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void CreateRotatedFillInBackground(Shape shape, Bitmap slideImage, double magnifyRatio \u003d 1.0)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            PPShape rotatedShape \u003d new PPShape(shape, false);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            PointF topLeftPoint \u003d new PointF(rotatedShape.ActualTopLeft.X * GraphicsUtil.PictureExportingRatio,"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                rotatedShape.ActualTopLeft.Y * GraphicsUtil.PictureExportingRatio);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap rotatedImage \u003d new Bitmap(slideImage.Width, slideImage.Height);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            using (Graphics g \u003d Graphics.FromImage(rotatedImage))"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                g.InterpolationMode \u003d System.Drawing.Drawing2D.InterpolationMode.HighQualityBicubic;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                using (System.Drawing.Drawing2D.Matrix mat \u003d new System.Drawing.Drawing2D.Matrix())"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                    mat.Translate(-topLeftPoint.X, -topLeftPoint.Y);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                    mat.RotateAt(-shape.Rotation, topLeftPoint);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                    g.Transform \u003d mat;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                    g.DrawImage(slideImage, new Rectangle(0, 0, slideImage.Width, slideImage.Height));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap magnifiedImage \u003d KiCut(rotatedImage, 0, 0, shape.Width * GraphicsUtil.PictureExportingRatio,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.Height * GraphicsUtil.PictureExportingRatio, magnifyRatio);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            magnifiedImage.Save(FillInBackgroundPicture, ImageFormat.Png);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void TakeScreenshotProxy(PowerPointSlide currentSlide, ShapeRange shapeRange)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeRange.Visible \u003d Office.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            GraphicsUtil.ExportSlide(currentSlide, SlidePicture);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeRange.Visible \u003d Office.MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 3,
      "-": 188
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/DataSources/ColorDataSource.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Collections.ObjectModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using System.ComponentModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using System.IO;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Runtime.Serialization.Formatters.Binary;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ColorsLab;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.DataSources"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    class ColorDataSource : INotifyPropertyChanged"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public IList\u003cHSLColor\u003e RecentColors"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return recentColors;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public IList\u003cHSLColor\u003e FavoriteColors"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return favoriteColors;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private readonly string[] recentColorFieldNames \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"RecentColorOne\","
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"RecentColorTwo\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"RecentColorThree\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"RecentColorFour\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"RecentColorFive\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"RecentColorSix\","
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"RecentColorSeven\","
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"RecentColorEight\","
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"RecentColorNine\","
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"RecentColorTen\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"RecentColorEleven\","
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"RecentColorTwelve\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        };"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private readonly string[] favoriteColorFieldNames \u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"favoriteColorOne\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"favoriteColorTwo\","
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"favoriteColorThree\","
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"favoriteColorFour\","
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"favoriteColorFive\","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"favoriteColorSix\","
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"favoriteColorSeven\","
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"favoriteColorEight\","
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"favoriteColorNine\","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"favoriteColorTen\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"favoriteColorEleven\","
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"favoriteColorTwelve\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private ObservableCollection\u003cHSLColor\u003e recentColors;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private ObservableCollection\u003cHSLColor\u003e favoriteColors;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Properties"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        private HSLColor selectedColorValue;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        public HSLColor SelectedColor"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        {       "
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                return selectedColorValue;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            set"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (value !\u003d selectedColorValue)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    selectedColorValue \u003d value;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(\"selectedColor\"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Constructors"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public ColorDataSource()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            recentColors \u003d new ObservableCollection\u003cHSLColor\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            favoriteColors \u003d new ObservableCollection\u003cHSLColor\u003e();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            recentColors.CollectionChanged +\u003d RecentColors_CollectionChanged;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            favoriteColors.CollectionChanged +\u003d FavoriteColors_CollectionChanged;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ClearRecentColors();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ClearFavoriteColors();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region API"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void AddColorToRecentColors(HSLColor color)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            int index \u003d recentColors.IndexOf(color);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (index \u003d\u003d -1)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                index \u003d recentColors.Count - 1;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            for (int i \u003d index; i \u003e 0; i--)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                recentColors[i] \u003d recentColors[i - 1];"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            recentColors[0] \u003d color;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void AddColorToFavorites(HSLColor color)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            for (int i \u003d favoriteColors.Count - 1; i \u003e 0; i--)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                favoriteColors[i] \u003d favoriteColors[i - 1];"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            favoriteColors[0] \u003d color;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void ClearRecentColors()"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            recentColors.Clear();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            for (int i \u003d 0; i \u003c recentColorFieldNames.Length; i++)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                recentColors.Add(Color.White);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void ClearFavoriteColors()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            favoriteColors.Clear();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            for (int i \u003d 0; i \u003c favoriteColorFieldNames.Length; i++)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                favoriteColors.Add(Color.White);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public ObservableCollection\u003cHSLColor\u003e GetListOfRecentColors()"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return recentColors;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public ObservableCollection\u003cHSLColor\u003e GetListOfFavoriteColors()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return favoriteColors;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void SetRecentColor(int index, HSLColor color)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (index \u003e\u003d recentColors.Count)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            recentColors[index] \u003d color;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void SetFavoriteColor(int index, HSLColor color)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (index \u003e\u003d favoriteColors.Count)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            favoriteColors[index] \u003d color;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Save/Load Colors"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public bool SaveRecentColorsInFile(string filePath)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            try"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                Stream fileStream \u003d File.Create(filePath);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                BinaryFormatter serializer \u003d new BinaryFormatter();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                HSLColor[] colors \u003d new HSLColor[recentColors.Count];"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                recentColors.CopyTo(colors, 0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                List\u003cHSLColor\u003e colorList \u003d new List\u003cHSLColor\u003e(colors);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                serializer.Serialize(fileStream, colorList);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                fileStream.Close();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            catch (Exception)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public bool LoadRecentColorsFromFile(string filePath)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            try"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                Stream openFileStream \u003d File.OpenRead(filePath);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                BinaryFormatter deserializer \u003d new BinaryFormatter();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                List\u003cHSLColor\u003e newRecentColors \u003d (List\u003cHSLColor\u003e)deserializer.Deserialize(openFileStream);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                openFileStream.Close();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                recentColors.Clear();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                foreach (HSLColor recentColor in newRecentColors)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    recentColors.Add(recentColor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            catch (Exception)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public bool SaveFavoriteColorsInFile(String filePath)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                Stream fileStream \u003d File.Create(filePath);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                BinaryFormatter serializer \u003d new BinaryFormatter();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                HSLColor[] colors \u003d new HSLColor[favoriteColors.Count];"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                favoriteColors.CopyTo(colors, 0);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                List\u003cHSLColor\u003e colorList \u003d new List\u003cHSLColor\u003e(colors);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                serializer.Serialize(fileStream, colorList);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                fileStream.Close();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public bool LoadFavoriteColorsFromFile(string filePath)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                Stream openFileStream \u003d File.OpenRead(filePath);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                BinaryFormatter deserializer \u003d new BinaryFormatter();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                List\u003cHSLColor\u003e newFavoriteColors \u003d (List\u003cHSLColor\u003e)deserializer.Deserialize(openFileStream);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                openFileStream.Close();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                favoriteColors.Clear();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                foreach (HSLColor favoriteColor in newFavoriteColors)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    favoriteColors.Add(favoriteColor);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region EventHandlers"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        public event PropertyChangedEventHandler PropertyChanged;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        // This method is called by the Set accessor of each property. "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // The CallerMemberName attribute that is applied to the optional propertyName "
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        // parameter causes the property name of the caller to be substituted as an argument. "
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create the OnPropertyChanged method to raise the event"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        protected void RecentColors_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            System.Collections.IList newValues \u003d e.NewItems;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            switch (newValues?.Count ?? 0)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                case 0:"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    string name \u003d recentColorFieldNames[e.NewStartingIndex];"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    foreach (string fieldName in recentColorFieldNames)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(fieldName));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        protected void FavoriteColors_CollectionChanged(object sender, System.Collections.Specialized.NotifyCollectionChangedEventArgs e)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            System.Collections.IList newValues \u003d e.NewItems;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            switch (newValues?.Count ?? 0)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                case 0:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    string name \u003d favoriteColorFieldNames[e.NewStartingIndex];"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(name));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    foreach (string fieldName in favoriteColorFieldNames)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(fieldName));"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 32,
      "YuPeiHenry": 142,
      "-": 139
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ELearningLab/ELearningWorkspace/Model/ClickItem/ExplanationItem.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ELearningLab.Service;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.ELearningLab.ELearningWorkspace.Model"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public class ExplanationItem : ClickItem, IEquatable\u003cExplanationItem\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        #region public properties"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool IsCallout"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                return isCallout;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            set"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "                isCallout \u003d (bool)value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                NotifyPropertyChanged(ELearningLabText.ExplanationItem_IsCallout);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                NotifyPropertyChanged(ELearningLabText.ExplanationItem_IsDummyItem);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool IsCaption"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                return isCaption;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            set"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                isCaption \u003d (bool)value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                NotifyPropertyChanged(ELearningLabText.ExplanationItem_IsCaption);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                NotifyPropertyChanged(ELearningLabText.ExplanationItem_IsDummyItem);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool IsVoice"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                return isVoice;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            set"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                isVoice \u003d (bool)value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                NotifyPropertyChanged(ELearningLabText.ExplanationItem_IsVoice);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                NotifyPropertyChanged(ELearningLabText.ExplanationItem_IsDummyItem);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool HasShortVersion"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                return hasShortVersion;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            set"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                hasShortVersion \u003d (bool)value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!hasShortVersion)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                if (string.IsNullOrEmpty(calloutText.Trim()))"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                    calloutText \u003d captionText;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    NotifyPropertyChanged(ELearningLabText.ExplanationItem_CalloutText);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        public string CalloutText"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                return calloutText;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            set"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                calloutText \u003d value;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                NotifyPropertyChanged(ELearningLabText.ExplanationItem_CalloutText);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public string CaptionText"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                return captionText;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            set"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                captionText \u003d value;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!hasShortVersion)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    CalloutText \u003d value;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                NotifyPropertyChanged(ELearningLabText.ExplanationItem_CaptionText);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public string VoiceLabel"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                return voiceLabel;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            set"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                voiceLabel \u003d value;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                NotifyPropertyChanged(ELearningLabText.ExplanationItem_VoiceLabel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                NotifyPropertyChanged(ELearningLabText.ExplanationItem_IsTriggerTypeComboBoxEnabled);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                NotifyPropertyChanged(ELearningLabText.ExplanationItem_IsVoiceLabelInvalid);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public int TriggerIndex"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                return (int)trigger;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            set"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                trigger \u003d (TriggerType)value;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                NotifyPropertyChanged(ELearningLabText.ExplanationItem_TriggerIndex);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool IsDummyItem"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                return !IsCallout \u0026\u0026 !IsVoice \u0026\u0026 !IsCaption;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool IsTriggerTypeComboBoxEnabled"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                return isTriggerTypeComboBoxEnabled;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            set"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                isTriggerTypeComboBoxEnabled \u003d (bool)value;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                NotifyPropertyChanged(ELearningLabText.ExplanationItem_IsVoiceLabelInvalid);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                NotifyPropertyChanged(ELearningLabText.ExplanationItem_IsTriggerTypeComboBoxEnabled);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool IsEmpty"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                return string.IsNullOrEmpty(CaptionText.Trim())"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 string.IsNullOrEmpty(CalloutText.Trim());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public int TagNo"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                return tagNo;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool IsVoiceLabelInvalid"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                bool result \u003d !AudioService.CheckIfVoiceExists(voiceLabel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Attributes"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public int tagNo;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool isCallout;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool isCaption;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool isVoice;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool hasShortVersion;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool isTriggerTypeComboBoxEnabled;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public string calloutText;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        public string captionText;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        private string voiceLabel;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        private TriggerType trigger;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public ExplanationItem(string captionText, string calloutText \u003d \"\", string voiceLabel \u003d \"\", bool isCallout \u003d false,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            bool isCaption \u003d false, bool isVoice \u003d false, TriggerType trigger \u003d TriggerType.WithPrevious,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            bool isTriggerTypeComboBoxEnabled \u003d true, int tagNo \u003d -1)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            this.isCallout \u003d isCallout;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            this.isCaption \u003d isCaption;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            this.isVoice \u003d isVoice;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            // we initailize callout text to be the same as caption text"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            this.calloutText \u003d string.IsNullOrEmpty(calloutText.Trim()) ? captionText : calloutText;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            this.captionText \u003d captionText;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            this.voiceLabel \u003d voiceLabel;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            this.trigger \u003d trigger; // default to with previous"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            this.isTriggerTypeComboBoxEnabled \u003d isTriggerTypeComboBoxEnabled;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagNo \u003d tagNo;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            hasShortVersion \u003d !this.calloutText.Equals(this.captionText);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool Equals(object other)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d null || other.GetType() !\u003d GetType())"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ReferenceEquals(other, this))"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return Equals(other as ExplanationItem);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool Equals(ExplanationItem other)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            return isCallout \u003d\u003d other.isCallout"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isCaption \u003d\u003d other.isCaption"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 isVoice \u003d\u003d other.isVoice"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 CalloutText.Equals(other.CalloutText)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 CaptionText.Equals(other.CaptionText)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 VoiceLabel.Equals(other.VoiceLabel)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ClickNo \u003d\u003d other.ClickNo;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        public override int GetHashCode()"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            var hashCode \u003d -1571720738;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            hashCode \u003d hashCode * -1521134295 + TriggerIndex.GetHashCode();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            hashCode \u003d hashCode * -1521134295 + tagNo.GetHashCode();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            hashCode \u003d hashCode * -1521134295 + isCallout.GetHashCode();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            hashCode \u003d hashCode * -1521134295 + isCaption.GetHashCode();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            hashCode \u003d hashCode * -1521134295 + isVoice.GetHashCode();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            hashCode \u003d hashCode * -1521134295 + EqualityComparer\u003cstring\u003e.Default.GetHashCode(calloutText);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            hashCode \u003d hashCode * -1521134295 + EqualityComparer\u003cstring\u003e.Default.GetHashCode(captionText);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            hashCode \u003d hashCode * -1521134295 + EqualityComparer\u003cstring\u003e.Default.GetHashCode(voiceLabel);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            hashCode \u003d hashCode * -1521134295 + ClickNo.GetHashCode();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            return hashCode;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 1,
      "-": 253
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ELearningLab/Utility/ShapeUtility.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.ELearningLab.Utility"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public class ShapeUtility"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "#pragma warning disable 0618"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Insert default callout box shape to slide. "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Precondition: shape with shapeName must not exist in slide before applying the method"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"slide\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"shapeName\"\u003eshapeName is a string with format \"PPTL_{tagNo}_Callout\" to be associated "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /// with generated callout shape.\u003c/param\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"calloutText\"\u003eContent in Callout Shape\u003c/param\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003creturns\u003egenerated callout shape\u003c/returns\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Shape InsertDefaultCalloutBoxToSlide(PowerPointSlide slide, string shapeName, string calloutText)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideWidth \u003d PowerPointPresentation.Current.SlideWidth;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideHeight \u003d PowerPointPresentation.Current.SlideHeight;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape calloutBox \u003d slide.Shapes.AddShape(MsoAutoShapeType.msoShapeRoundedRectangularCallout, 10, 10, 100, 10);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            calloutBox.Name \u003d shapeName;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            calloutBox.TextFrame.TextRange.Text \u003d calloutText;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            calloutBox.Left \u003d 10;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            calloutBox.Top \u003d 10;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            calloutBox.TextFrame.AutoSize \u003d PpAutoSize.ppAutoSizeShapeToFitText;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            calloutBox.TextEffect.Alignment \u003d MsoTextEffectAlignment.msoTextEffectAlignmentLeft;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ShapeUtil.FormatCalloutToDefaultStyle(calloutBox);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return calloutBox;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Insert default caption box to slide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Precondition: shape with shapeName must not exist in slide before applying the method"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"slide\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"shapeName\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"captionText\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003creturns\u003ethe generated default caption box\u003c/returns\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Shape InsertDefaultCaptionBoxToSlide(PowerPointSlide slide, string shapeName, string captionText)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideWidth \u003d PowerPointPresentation.Current.SlideWidth;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideHeight \u003d PowerPointPresentation.Current.SlideHeight;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape captionBox \u003d slide.Shapes.AddTextbox(MsoTextOrientation.msoTextOrientationHorizontal, 0, slideHeight - 100,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                slideWidth, 100);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.Name \u003d shapeName;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.TextFrame.AutoSize \u003d PpAutoSize.ppAutoSizeShapeToFitText;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.TextFrame.TextRange.Text \u003d captionText;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.TextFrame.WordWrap \u003d MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.TextEffect.Alignment \u003d MsoTextEffectAlignment.msoTextEffectAlignmentCentered;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.TextFrame.TextRange.Font.Size \u003d 12;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.Fill.BackColor.RGB \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.Fill.Transparency \u003d 0.2f;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.TextFrame.TextRange.Font.Color.RGB \u003d 0xffffff;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.Top \u003d slideHeight - captionBox.Height;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return captionBox;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Insert shape which is copied from `templatedShape` to slide"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Precondition: shapeName must not exist in slide before applying the method"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"slide\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"templatedShape\"\u003eShape whose format is to be copied over\u003c/param\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"shapeName\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"text\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003creturns\u003ethe copied shape\u003c/returns\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Shape InsertTemplatedShapeToSlide(PowerPointSlide slide, Shape templatedShape, string shapeName, string text)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideWidth \u003d PowerPointPresentation.Current.SlideWidth;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideHeight \u003d PowerPointPresentation.Current.SlideHeight;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointPresentation pres \u003d ActionFrameworkExtensions.GetCurrentPresentation();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape copiedShape;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            // templatedShape and its associated animations are duplicated"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            if (templatedShape \u003d\u003d null)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Exception(\"Templated shape is null\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            {               "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                copiedShape \u003d ClipboardUtil.RestoreClipboardAfterAction(() \u003d\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    templatedShape.Copy();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                    return slide.Shapes.Paste()[1];"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                }, pres, slide);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            catch"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Exception(\"Error copy and paste shape.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            if (copiedShape \u003d\u003d null)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new Exception(\"Copied shape is null\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            copiedShape.Name \u003d shapeName;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            // copy shape to the default callout / caption position"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            if (StringUtility.ExtractFunctionFromString(copiedShape.Name) \u003d\u003d ELearningLabText.CalloutIdentifier)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                copiedShape.Left \u003d 10;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                copiedShape.Top \u003d 10;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                copiedShape.TextEffect.Alignment \u003d MsoTextEffectAlignment.msoTextEffectAlignmentLeft;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            else if (StringUtility.ExtractFunctionFromString(copiedShape.Name) \u003d\u003d ELearningLabText.CaptionIdentifier)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                copiedShape.Left \u003d 0;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                copiedShape.Top \u003d slideHeight - 100;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                copiedShape.Width \u003d slideWidth;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                copiedShape.Height \u003d 100;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                copiedShape.Top \u003d slideHeight - copiedShape.Height;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                copiedShape.TextEffect.Alignment \u003d MsoTextEffectAlignment.msoTextEffectAlignmentCentered;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            copiedShape.TextFrame.AutoSize \u003d PpAutoSize.ppAutoSizeShapeToFitText;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            copiedShape.TextFrame.TextRange.Text \u003d text;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            copiedShape.TextFrame.WordWrap \u003d MsoTriState.msoTrue;         "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            // remove associated animation with copiedShape because we only want the shape to be copied."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            slide.RemoveAnimationsForShape(copiedShape);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            if (StringUtility.ExtractFunctionFromString(copiedShape.Name) \u003d\u003d ELearningLabText.CaptionIdentifier)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                copiedShape.Top \u003d slideHeight - copiedShape.Height;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return copiedShape;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Replace original text in `shape` with `text`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"shape\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"text\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003creturns\u003e\u003c/returns\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Shape ReplaceTextForShape(Shape shape, string text)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.TextFrame.TextRange.Text \u003d text;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            return shape;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Shape InsertSelfExplanationTextBoxToSlide(PowerPointSlide slide, string shapeName, string text)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideWidth \u003d PowerPointPresentation.Current.SlideWidth;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideHeight \u003d PowerPointPresentation.Current.SlideHeight;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape captionBox \u003d slide.Shapes.AddTextbox(MsoTextOrientation.msoTextOrientationHorizontal, 0, 0,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                slideWidth, 100);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.Name \u003d shapeName;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.TextFrame.AutoSize \u003d PpAutoSize.ppAutoSizeShapeToFitText;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.TextFrame.TextRange.Text \u003d text;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.TextFrame.WordWrap \u003d MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.TextEffect.Alignment \u003d MsoTextEffectAlignment.msoTextEffectAlignmentCentered;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.TextFrame.TextRange.Font.Size \u003d 12;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.Fill.BackColor.RGB \u003d 0xffffff;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.Fill.Transparency \u003d 0.2f;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.TextFrame.TextRange.Font.Color.RGB \u003d 0;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            captionBox.Visible \u003d MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            return captionBox;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 4,
      "-": 168
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/FunctionalTestInterface.Impl/Controller/ColorsLabController.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Windows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Windows.Controls.Primitives;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Windows.Input;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.ColorsLab;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "using TestInterface;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using Point \u003d System.Windows.Point;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using Rectangle \u003d System.Windows.Shapes.Rectangle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.FunctionalTestInterface.Impl.Controller"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    [Serializable]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    class ColorsLabController : MarshalByRefObject, IColorsLabController"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        private static IColorsLabController _instance \u003d new ColorsLabController();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        public static IColorsLabController Instance { get { return _instance; } }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private ColorsLabPane _pane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        private ColorsLabController() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public void OpenPane()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                FunctionalTestExtensions.GetRibbonUi().OnAction("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    new RibbonControl(ColorsLabText.PaneTag));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                _pane \u003d FunctionalTestExtensions.GetTaskPane("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    typeof(ColorsLabPane)).Control as ColorsLabPane;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            }));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public Point GetApplyTextButtonLocation()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point point \u003d new Point(0, 0);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    point \u003d _pane.ColorsLabPaneWPF1.GetApplyTextButtonLocationAsPoint();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return point;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public Point GetApplyLineButtonLocation()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point point \u003d new Point(0, 0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    point \u003d _pane.ColorsLabPaneWPF1.GetApplyLineButtonLocationAsPoint();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return point;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public Point GetApplyFillButtonLocation()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point point \u003d new Point(0, 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    point \u003d _pane.ColorsLabPaneWPF1.GetApplyFillButtonLocationAsPoint();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return point;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public Point GetMainColorRectangleLocation()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point point \u003d new Point(0, 0);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    point \u003d _pane.ColorsLabPaneWPF1.GetMainColorRectangleLocationAsPoint();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return point;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public Point GetEyeDropperButtonLocation()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point point \u003d new Point(0, 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    point \u003d _pane.ColorsLabPaneWPF1.GetEyeDropperButtonLocationAsPoint();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return point;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void SlideBrightnessSlider(int value)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _pane.ColorsLabPaneWPF1.brightnessSlider.Value \u003d value;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void SlideSaturationSlider(int value)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _pane.ColorsLabPaneWPF1.saturationSlider.Value \u003d value;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void ClickMonochromeRect(int index)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Shapes.Rectangle rect;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            switch (index)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    rect \u003d _pane.ColorsLabPaneWPF1.monochromaticRectangleOne;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    rect \u003d _pane.ColorsLabPaneWPF1.monochromaticRectangleTwo;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 3:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    rect \u003d _pane.ColorsLabPaneWPF1.monochromaticRectangleThree;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 4:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    rect \u003d _pane.ColorsLabPaneWPF1.monochromaticRectangleFour;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 5:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    rect \u003d _pane.ColorsLabPaneWPF1.monochromaticRectangleFive;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 6:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    rect \u003d _pane.ColorsLabPaneWPF1.monochromaticRectangleSix;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 7:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    rect \u003d _pane.ColorsLabPaneWPF1.monochromaticRectangleSeven;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    rect \u003d null;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_pane !\u003d null \u0026\u0026 rect !\u003d null)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    LeftClickOnRectangle(rect);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    "
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void ClickAnalogousRect(int index)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Shapes.Rectangle rect;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            switch (index)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect \u003d _pane.ColorsLabPaneWPF1.analogousLowerRectangle;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect \u003d _pane.ColorsLabPaneWPF1.analogousMiddleRectangle;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 3:"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect \u003d _pane.ColorsLabPaneWPF1.analogousHigherRectangle;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect \u003d null;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_pane !\u003d null \u0026\u0026 rect !\u003d null)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    LeftClickOnRectangle(rect);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void ClickComplementaryRect(int index)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Shapes.Rectangle rect;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            switch (index)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect \u003d _pane.ColorsLabPaneWPF1.complementaryLowerRectangle;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect \u003d _pane.ColorsLabPaneWPF1.complementaryMiddleRectangle;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 3:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect \u003d _pane.ColorsLabPaneWPF1.complementaryHigherRectangle;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect \u003d null;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_pane !\u003d null \u0026\u0026 rect !\u003d null)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    LeftClickOnRectangle(rect);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void ClickTriadicRect(int index)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Shapes.Rectangle rect;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            switch (index)"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect \u003d _pane.ColorsLabPaneWPF1.triadicLowerRectangle;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect \u003d _pane.ColorsLabPaneWPF1.triadicMiddleRectangle;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 3:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect \u003d _pane.ColorsLabPaneWPF1.triadicHigherRectangle;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect \u003d null;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_pane !\u003d null \u0026\u0026 rect !\u003d null)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    LeftClickOnRectangle(rect);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void ClickTetradicRect(int index)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            System.Windows.Shapes.Rectangle rect;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            switch (index)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 1:"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect \u003d _pane.ColorsLabPaneWPF1.tetradicOneRectangle;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 2:"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect \u003d _pane.ColorsLabPaneWPF1.tetradicTwoRectangle;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 3:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect \u003d _pane.ColorsLabPaneWPF1.tetradicThreeRectangle;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                case 4:"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect \u003d _pane.ColorsLabPaneWPF1.tetradicFourRectangle;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                rect \u003d null;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_pane !\u003d null \u0026\u0026 rect !\u003d null)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    LeftClickOnRectangle(rect);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void LoadFavoriteColors(string filePath)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _pane.ColorsLabPaneWPF1.LoadFavoriteColorsFromPath(filePath);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void ResetFavoriteColors()"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _pane.ColorsLabPaneWPF1.reloadColorButton.RaiseEvent(new RoutedEventArgs(ButtonBase.ClickEvent));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void ClearFavoriteColors()"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _pane.ColorsLabPaneWPF1.clearColorButton.RaiseEvent(new RoutedEventArgs(ButtonBase.ClickEvent));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void ClearRecentColors()"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _pane.ColorsLabPaneWPF1.EmptyRecentColorsPanel();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public IList\u003cColor\u003e GetCurrentFavoritePanel()"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            IList\u003cColor\u003e list \u003d null;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    list \u003d _pane.ColorsLabPaneWPF1.GetFavoriteColorsPanelAsList();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public IList\u003cColor\u003e GetCurrentRecentPanel()"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            IList\u003cColor\u003e list \u003d null;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    list \u003d _pane.ColorsLabPaneWPF1.GetRecentColorsPanelAsList();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return list;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void LeftClickOnRectangle(Rectangle rect)"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            rect.RaiseEvent("
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                new MouseButtonEventArgs(Mouse.PrimaryDevice, Environment.TickCount, MouseButton.Left)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    RoutedEvent \u003d UIElement.MouseDownEvent"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                });"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            rect.RaiseEvent("
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                new MouseButtonEventArgs(Mouse.PrimaryDevice, Environment.TickCount, MouseButton.Left)"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    RoutedEvent \u003d UIElement.MouseUpEvent"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                });"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 257,
      "YuPeiHenry": 4,
      "-": 114
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/FunctionalTestInterface.Impl/Controller/ShapesLabController.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Linq;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Threading.Tasks;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows.Controls.Primitives;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ShapesLab;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "using TestInterface;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.FunctionalTestInterface.Impl.Controller"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    [Serializable]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    class ShapesLabController : MarshalByRefObject, IShapesLabController"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        private static IShapesLabController _instance \u003d new ShapesLabController();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        public static IShapesLabController Instance { get { return _instance; } }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        private CustomShapePane _pane;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        private ShapesLabController() {}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public void OpenPane()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            UIThreadExecutor.Execute(() \u003d\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                FunctionalTestExtensions.GetRibbonUi().OnAction("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    new RibbonControl(ShapesLabText.PaneTag));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                _pane \u003d FunctionalTestExtensions.GetTaskPane("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                    typeof(CustomShapePane)).Control as CustomShapePane;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            _pane?.InitCustomShapePaneStorage();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        public void SaveSelectedShapes()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            UIThreadExecutor.Execute(() \u003d\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                _pane?.SaveSelectedShapes();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public System.Windows.Point GetShapeForClicking(string shapeName)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            System.Windows.Point point \u003d new System.Windows.Point(0, 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (_pane \u003d\u003d null)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return point;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Task task \u003d Task.Factory.StartNew(() \u003d\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                _pane.CustomShapePaneWPF1.Dispatcher.Invoke(() \u003d\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    point \u003d _pane.GetShapeForClicking(shapeName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            task.Wait();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return point;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        public void ImportLibrary(string pathToLibrary)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (_pane \u003d\u003d null)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Task task \u003d Task.Factory.StartNew(() \u003d\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                _pane.CustomShapePaneWPF1.Dispatcher.Invoke(() \u003d\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    _pane.ImportLibrary(pathToLibrary);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            });"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            task.Wait();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public void ImportShape(string pathToShape)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                _pane.ImportShape(pathToShape);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cISlideData\u003e FetchShapeGalleryPresentationData()"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (_pane \u003d\u003d null)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cISlideData\u003e slideData \u003d _pane.GetShapeGallery()"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                .Slides.Cast\u003cSlide\u003e().Select(SlideData.FromSlide).ToList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return slideData;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void ClickAddShapeButton()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (_pane \u003d\u003d null || _pane.GetAddShapeButton() \u003d\u003d null)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            // Perform clicking of button on its own UI thread"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            UIThreadExecutor.Execute(() \u003d\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                _pane.GetAddShapeButton().RaiseEvent(new RoutedEventArgs(ButtonBase.ClickEvent));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public bool GetAddShapeButtonStatus()"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            bool addShapeButtonStatus \u003d false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Task task \u003d Task.Factory.StartNew(() \u003d\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                _pane.GetAddShapeButton().Dispatcher.Invoke(() \u003d\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    addShapeButtonStatus \u003d _pane.GetAddShapeButton().IsEnabled;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                });"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            task.Wait();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return addShapeButtonStatus;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 4,
      "YuPeiHenry": 45,
      "-": 82
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/FunctionalTestInterface.Impl/Controller/SyncLabController.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Controls;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Controls.Primitives;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.SyncLab.Views;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using TestInterface;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.FunctionalTestInterface.Impl.Controller"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    [Serializable]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    class SyncLabController : MarshalByRefObject, ISyncLabController"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        private static ISyncLabController _instance \u003d new SyncLabController();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        public static ISyncLabController Instance { get { return _instance; } }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        private SyncPane _pane;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        private SyncLabController() { }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public void OpenPane()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                FunctionalTestExtensions.GetRibbonUi().OnAction("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    new RibbonControl(SyncLabText.PaneTag));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                _pane \u003d FunctionalTestExtensions.GetTaskPane("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    typeof(SyncPane)).Control as SyncPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        public void Copy()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                UIThreadExecutor.Execute(() \u003d\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    _pane.SyncPaneWPF1.copyButton.RaiseEvent(new RoutedEventArgs(ButtonBase.ClickEvent));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        public void Sync(int index)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                UIThreadExecutor.Execute(() \u003d\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    ((SyncFormatPaneItem)_pane.SyncPaneWPF1.formatListBox.Items[index])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                            .pasteButton.RaiseEvent(new RoutedEventArgs(ButtonBase.ClickEvent));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        public void DialogSelectItem(int categoryIndex, int itemIndex)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null \u0026\u0026 _pane.SyncPaneWPF1.Dialog !\u003d null)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                UIThreadExecutor.Execute(() \u003d\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    ((_pane.SyncPaneWPF1.Dialog.treeView.Items[categoryIndex] as TreeViewItem)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                        .Items[itemIndex] as SyncFormatDialogItem).IsChecked \u003d true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        public void DialogClickOk()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null \u0026\u0026 _pane.SyncPaneWPF1.Dialog !\u003d null)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                UIThreadExecutor.Execute(() \u003d\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                    _pane.SyncPaneWPF1.Dialog.okButton.RaiseEvent(new RoutedEventArgs(ButtonBase.ClickEvent));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public bool GetCopyButtonEnabledStatus()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            bool result \u003d false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            UIThreadExecutor.Execute(() \u003d\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                result \u003d _pane.SyncPaneWPF1.GetCopyButtonEnabledStatus();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 9,
      "-": 84
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/FunctionalTestInterface.Impl/Controller/TimerLabController.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Controls.Primitives;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TimerLab;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using TestInterface;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.FunctionalTestInterface.Impl.Controller"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    [Serializable]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    class TimerLabController : MarshalByRefObject, ITimerLabController"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        private static ITimerLabController _instance \u003d new TimerLabController();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public static ITimerLabController Instance { get { return _instance; } }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        private TimerPane _pane;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        private TimerLabController() {}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        public void OpenPane()"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            UIThreadExecutor.Execute((Action)(() \u003d\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                FunctionalTestExtensions.GetRibbonUi().OnAction("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    new RibbonControl(TimerLabText.PaneTag));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                _pane \u003d FunctionalTestExtensions.GetTaskPane("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    typeof(TimerPane)).Control as TimerPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            }));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        public void ClickCreateButton()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                UIThreadExecutor.Execute(() \u003d\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    _pane.TimerPaneWPF.createButton.RaiseEvent(new RoutedEventArgs(ButtonBase.ClickEvent));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        public void SetDurationTextBoxValue(double value)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                UIThreadExecutor.Execute(() \u003d\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    _pane.TimerPaneWPF.DurationTextBox.Value \u003d value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    _pane.TimerPaneWPF.DurationTextBox.Focusable \u003d true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    _pane.TimerPaneWPF.DurationTextBox.Focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void SetCountdownCheckBoxState(bool isChecked)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                UIThreadExecutor.Execute(() \u003d\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _pane.TimerPaneWPF.CountdownCheckBox.IsChecked \u003d isChecked;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    _pane.TimerPaneWPF.CountdownCheckBox.Focus();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public void SetProgressBarCheckBoxState(bool isChecked)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                UIThreadExecutor.Execute(() \u003d\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    _pane.TimerPaneWPF.ProgressBarCheckBox.IsChecked \u003d isChecked;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    _pane.TimerPaneWPF.ProgressBarCheckBox.Focus();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public void SetHeightTextBoxValue(int value)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                UIThreadExecutor.Execute(() \u003d\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                    _pane.TimerPaneWPF.HeightTextBox.Focus();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                    _pane.TimerPaneWPF.HeightTextBox.Text \u003d \"\" + value;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                    // set focus to the other text box to trigger the change"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                    _pane.TimerPaneWPF.WidthTextBox.Focus();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        public void SetWidthTextBoxValue(int value)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                UIThreadExecutor.Execute(() \u003d\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                    _pane.TimerPaneWPF.WidthTextBox.Focus();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                    _pane.TimerPaneWPF.WidthTextBox.Text \u003d \"\" + value;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                    // set focus to the other text box to trigger the change"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                    _pane.TimerPaneWPF.HeightTextBox.Focus();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public void SetHeightSliderValue(int value)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                UIThreadExecutor.Execute(() \u003d\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                    _pane.TimerPaneWPF.HeightSlider.Value \u003d value;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void SetWidthSliderValue(int value)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_pane !\u003d null)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                UIThreadExecutor.Execute(() \u003d\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    _pane.TimerPaneWPF.WidthSlider.Value \u003d value;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 12,
      "blewjy": 12,
      "-": 109
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/Models/PowerPointDeMagnifyingSlide.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Linq;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.AnimationLab;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ZoomLab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using Office \u003d Microsoft.Office.Core;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPoint \u003d Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.Models"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    class PowerPointDeMagnifyingSlide : PowerPointSlide"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "#pragma warning disable 0618"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        private PowerPoint.Shape indicatorShape \u003d null;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        private PowerPoint.Shape zoomSlideCroppedShapes \u003d null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        private PowerPointDeMagnifyingSlide(PowerPoint.Slide slide) : base(slide)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            _slide.Name \u003d \"PPTLabsDeMagnifyingSlide\" + DateTime.Now.ToString(\"yyyyMMddHHmmssffff\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        public static PowerPointSlide FromSlideFactory(PowerPoint.Slide slide)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            if (slide \u003d\u003d null)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return new PowerPointDeMagnifyingSlide(slide);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        public void AddZoomToAreaAnimation(PowerPoint.Shape zoomShape)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            PrepareForZoomToArea(zoomShape);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!ZoomLabSettings.BackgroundZoomChecked)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                //Zoom stored shape to fit slide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomSlideCroppedShapes.LockAspectRatio \u003d Office.MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                if (zoomSlideCroppedShapes.Width \u003e zoomSlideCroppedShapes.Height)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    zoomSlideCroppedShapes.Width \u003d PowerPointPresentation.Current.SlideWidth;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    zoomSlideCroppedShapes.Height \u003d PowerPointPresentation.Current.SlideHeight;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomSlideCroppedShapes.Left \u003d (PowerPointPresentation.Current.SlideWidth / 2) - (zoomSlideCroppedShapes.Width / 2);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomSlideCroppedShapes.Top \u003d (PowerPointPresentation.Current.SlideHeight / 2) - (zoomSlideCroppedShapes.Height / 2);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                DefaultMotionAnimation.AddDefaultMotionAnimation(this, zoomSlideCroppedShapes, zoomShape, 0.5f, PowerPoint.MsoAnimTriggerType.msoAnimTriggerWithPrevious);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                //Add appear animations to existing shapes"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                bool isFirst \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.Effect effectFade \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                foreach (PowerPoint.Shape tmp in _slide.Shapes)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!(tmp.Equals(zoomSlideCroppedShapes) || tmp.Equals(indicatorShape)))"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (isFirst)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                            effectFade \u003d _slide.TimeLine.MainSequence.AddEffect(tmp, PowerPoint.MsoAnimEffect.msoAnimEffectFade, PowerPoint.MsoAnimateByLevel.msoAnimateLevelNone, PowerPoint.MsoAnimTriggerType.msoAnimTriggerAfterPrevious);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                        else"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                            effectFade \u003d _slide.TimeLine.MainSequence.AddEffect(tmp, PowerPoint.MsoAnimEffect.msoAnimEffectFade, PowerPoint.MsoAnimateByLevel.msoAnimateLevelNone, PowerPoint.MsoAnimTriggerType.msoAnimTriggerWithPrevious);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                        effectFade.Timing.Duration \u003d 0.25f;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                        isFirst \u003d false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                //Add fade out anmation to shape added by PPTLabs"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                effectFade \u003d _slide.TimeLine.MainSequence.AddEffect(zoomSlideCroppedShapes, PowerPoint.MsoAnimEffect.msoAnimEffectFade, PowerPoint.MsoAnimateByLevel.msoAnimateLevelNone, PowerPoint.MsoAnimTriggerType.msoAnimTriggerWithPrevious);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                effectFade.Exit \u003d Office.MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                effectFade.Timing.Duration \u003d 0.25f;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                GetShapeToZoomWithBackground(zoomShape);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.Effect lastDisappearEffect \u003d DefaultMotionAnimation.AddZoomOutMotionAnimation(this,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                    zoomSlideCroppedShapes, PowerPoint.MsoAnimTriggerType.msoAnimTriggerWithPrevious);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                DefaultMotionAnimation.PreloadShape(this, zoomSlideCroppedShapes);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                //Add appear animations to existing shapes"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                bool isFirst \u003d true;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.Effect effectFade \u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                foreach (PowerPoint.Shape tmp in _slide.Shapes)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!(tmp.Equals(zoomSlideCroppedShapes) || tmp.Equals(indicatorShape)) \u0026\u0026 !(tmp.Name.Contains(\"PPTLabsMagnifyShape\")) \u0026\u0026 !(tmp.Name.Contains(\"PPTLabsMagnifyArea\")))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                        tmp.Visible \u003d Office.MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (isFirst)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                            effectFade \u003d _slide.TimeLine.MainSequence.AddEffect(tmp, PowerPoint.MsoAnimEffect.msoAnimEffectAppear, PowerPoint.MsoAnimateByLevel.msoAnimateLevelNone, PowerPoint.MsoAnimTriggerType.msoAnimTriggerAfterPrevious);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                        else"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                            effectFade \u003d _slide.TimeLine.MainSequence.AddEffect(tmp, PowerPoint.MsoAnimEffect.msoAnimEffectAppear, PowerPoint.MsoAnimateByLevel.msoAnimateLevelNone, PowerPoint.MsoAnimTriggerType.msoAnimTriggerWithPrevious);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                        effectFade.Timing.Duration \u003d 0.01f;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                        isFirst \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                //Move last frame disappear animation to end "
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                lastDisappearEffect.MoveTo(_slide.TimeLine.MainSequence.Count);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                lastDisappearEffect.Timing.TriggerType \u003d PowerPoint.MsoAnimTriggerType.msoAnimTriggerWithPrevious;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                lastDisappearEffect.Timing.TriggerDelayTime \u003d 0.01f;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            indicatorShape.ZOrder(Office.MsoZOrderCmd.msoBringToFront);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        private void PrepareForZoomToArea(PowerPoint.Shape zoomShape)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            RemoveAnimationsForShapes(_slide.Shapes.Cast\u003cPowerPoint.Shape\u003e().ToList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteIndicator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteShapesWithPrefix(\"PPTLabsMagnifyAreaSlide\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            AddZoomSlideCroppedPicture(zoomShape);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteSlideNotes();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteSlideMedia();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            ManageSlideTransitions();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            indicatorShape \u003d AddPowerPointLabsIndicator();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        //Return zoomed version of cropped slide picture to be used for zoom out animation"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        private void GetShapeToZoomWithBackground(PowerPoint.Shape zoomShape)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Shape referenceShape \u003d GetReferenceShape(zoomShape);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            float finalWidthMagnify \u003d referenceShape.Width;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            float initialWidthMagnify \u003d zoomShape.Width;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            float finalHeightMagnify \u003d referenceShape.Height;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            float initialHeightMagnify \u003d zoomShape.Height;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            zoomShape.Copy();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Shape zoomShapeCopy \u003d _slide.Shapes.Paste()[1];"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            LegacyShapeUtil.CopyShapeAttributes(zoomShape, ref zoomShapeCopy);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            Globals.ThisAddIn.Application.ActiveWindow.View.GotoSlide(_slide.SlideIndex);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            zoomSlideCroppedShapes.Select();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            zoomShapeCopy.Visible \u003d Office.MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            zoomShapeCopy.Select(Office.MsoTriState.msoFalse);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.ShapeRange selection \u003d Globals.ThisAddIn.Application.ActiveWindow.Selection.ShapeRange;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Shape groupShape \u003d selection.Group();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            groupShape.Width *\u003d (finalWidthMagnify / initialWidthMagnify);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            groupShape.Height *\u003d (finalHeightMagnify / initialHeightMagnify);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            groupShape.Ungroup();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            zoomSlideCroppedShapes.Left +\u003d (referenceShape.Left - zoomShapeCopy.Left);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            zoomSlideCroppedShapes.Top +\u003d (referenceShape.Top - zoomShapeCopy.Top);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            zoomShapeCopy.Delete();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            referenceShape.Delete();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        private PowerPoint.Shape GetReferenceShape(PowerPoint.Shape shapeToZoom)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PowerPoint.Shape referenceShape \u003d shapeToZoom.Duplicate()[1];"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            referenceShape.LockAspectRatio \u003d Office.MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            if (referenceShape.Width \u003e referenceShape.Height)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                referenceShape.Width \u003d PowerPointPresentation.Current.SlideWidth;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                referenceShape.Height \u003d PowerPointPresentation.Current.SlideHeight;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            referenceShape.Left \u003d (PowerPointPresentation.Current.SlideWidth / 2) - (referenceShape.Width / 2);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            referenceShape.Top \u003d (PowerPointPresentation.Current.SlideHeight / 2) - (referenceShape.Height / 2);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return referenceShape;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        //Store cropped version of slide picture as global variable"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AddZoomSlideCroppedPicture(PowerPoint.Shape zoomShape)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            zoomSlideCroppedShapes \u003d GetShapesWithPrefix(\"PPTLabsMagnifyAreaGroup\")[0];"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            zoomSlideCroppedShapes.Visible \u003d Office.MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteShapeAnimations(zoomSlideCroppedShapes);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!ZoomLabSettings.BackgroundZoomChecked)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomSlideCroppedShapes.PictureFormat.CropLeft +\u003d zoomShape.Left;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomSlideCroppedShapes.PictureFormat.CropTop +\u003d zoomShape.Top;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomSlideCroppedShapes.PictureFormat.CropRight +\u003d (PowerPointPresentation.Current.SlideWidth - (zoomShape.Left + zoomShape.Width));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomSlideCroppedShapes.PictureFormat.CropBottom +\u003d (PowerPointPresentation.Current.SlideHeight - (zoomShape.Top + zoomShape.Height));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                LegacyShapeUtil.CopyShapePosition(zoomShape, ref zoomSlideCroppedShapes);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ManageSlideTransitions()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            RemoveSlideTransitions();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            _slide.SlideShowTransition.AdvanceOnTime \u003d Office.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            _slide.SlideShowTransition.AdvanceOnClick \u003d Office.MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 1,
      "-": 205
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/Models/PowerPointMagnifyingSlide.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Linq;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.AnimationLab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.CropLab;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ZoomLab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using Office \u003d Microsoft.Office.Core;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPoint \u003d Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.Models"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    class PowerPointMagnifyingSlide : PowerPointSlide"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "#pragma warning disable 0618"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        private PowerPoint.Shape indicatorShape \u003d null;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        private PowerPoint.Shape zoomSlideCroppedShapes \u003d null;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        private PowerPointMagnifyingSlide(PowerPoint.Slide slide) : base(slide)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            _slide.Name \u003d \"PPTLabsMagnifyingSlide\" + DateTime.Now.ToString(\"yyyyMMddHHmmssffff\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteHiddenShapes();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        public static PowerPointSlide FromSlideFactory(PowerPoint.Slide slide)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            if (slide \u003d\u003d null)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            return new PowerPointMagnifyingSlide(slide);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        public void AddZoomToAreaAnimation(PowerPoint.Shape zoomShape)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            PrepareForZoomToArea(zoomShape);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Shape shapeToZoom \u003d null, referenceShape \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!ZoomLabSettings.BackgroundZoomChecked)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                shapeToZoom \u003d GetShapeToZoom(zoomShape);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                referenceShape \u003d GetReferenceShape(shapeToZoom);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                DefaultMotionAnimation.AddDefaultMotionAnimation(this, shapeToZoom, referenceShape, 0.5f, PowerPoint.MsoAnimTriggerType.msoAnimTriggerAfterPrevious);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                shapeToZoom \u003d zoomSlideCroppedShapes.Duplicate()[1];"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteShapeAnimations(shapeToZoom);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                LegacyShapeUtil.CopyShapePosition(zoomSlideCroppedShapes, ref shapeToZoom);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                referenceShape \u003d GetReferenceShape(zoomShape);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                DefaultMotionAnimation.AddZoomToAreaMotionAnimation(this, shapeToZoom, zoomShape, referenceShape, 0.5f, PowerPoint.MsoAnimTriggerType.msoAnimTriggerAfterPrevious);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeToZoom.Name \u003d \"PPTLabsMagnifyAreaSlide\" + DateTime.Now.ToString(\"yyyyMMddHHmmssffff\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            referenceShape.Delete();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            zoomSlideCroppedShapes.Visible \u003d Office.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            indicatorShape.ZOrder(Office.MsoZOrderCmd.msoBringToFront);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        private void PrepareForZoomToArea(PowerPoint.Shape zoomShape)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            MoveMotionAnimation();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            //Delete zoom shapes and shapes with exit animations"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPowerPoint.Shape\u003e shapes \u003d _slide.Shapes.Cast\u003cPowerPoint.Shape\u003e().ToList();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            IEnumerable\u003cPowerPoint.Shape\u003e matchingShapes \u003d shapes.Where(current \u003d\u003e (HasExitAnimation(current) || current.Equals(zoomShape)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.Shape s in matchingShapes)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                s.Delete();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            float magnifyRatio \u003d PowerPointPresentation.Current.SlideWidth / zoomShape.Width;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            AddZoomSlideCroppedPicture(magnifyRatio);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteSlideNotes();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteSlideMedia();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            ManageSlideTransitions();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            indicatorShape \u003d AddPowerPointLabsIndicator();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            //Add fade out effect for non-zoom shapes"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            shapes \u003d _slide.Shapes.Cast\u003cPowerPoint.Shape\u003e().ToList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            matchingShapes \u003d shapes.Where(current \u003d\u003e (!(current.Equals(indicatorShape) || current.Equals(zoomSlideCroppedShapes))));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.Shape s in matchingShapes)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteShapeAnimations(s);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!ZoomLabSettings.BackgroundZoomChecked)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                    PowerPoint.Effect effectFade \u003d _slide.TimeLine.MainSequence.AddEffect(s, PowerPoint.MsoAnimEffect.msoAnimEffectFade, PowerPoint.MsoAnimateByLevel.msoAnimateLevelNone, PowerPoint.MsoAnimTriggerType.msoAnimTriggerWithPrevious);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                    effectFade.Exit \u003d Office.MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                    effectFade.Timing.Duration \u003d 0.25f;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    s.Visible \u003d Office.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        //Return shape which helps to calculate the amount of zoom-in animation"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        private PowerPoint.Shape GetReferenceShape(PowerPoint.Shape shapeToZoom)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PowerPoint.Shape referenceShape \u003d shapeToZoom.Duplicate()[1];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            referenceShape.LockAspectRatio \u003d Office.MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            if (referenceShape.Width \u003e referenceShape.Height)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                referenceShape.Width \u003d PowerPointPresentation.Current.SlideWidth;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                referenceShape.Height \u003d PowerPointPresentation.Current.SlideHeight;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            referenceShape.Left \u003d (PowerPointPresentation.Current.SlideWidth / 2) - (referenceShape.Width / 2);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            referenceShape.Top \u003d (PowerPointPresentation.Current.SlideHeight / 2) - (referenceShape.Height / 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return referenceShape;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Return cropped version of slide picture"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        private PowerPoint.Shape GetShapeToZoom(PowerPoint.Shape zoomShape)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Shape shapeToZoom \u003d zoomSlideCroppedShapes.Duplicate()[1];"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteShapeAnimations(shapeToZoom);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            LegacyShapeUtil.CopyShapePosition(zoomSlideCroppedShapes, ref shapeToZoom);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeToZoom.PictureFormat.CropLeft +\u003d zoomShape.Left;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeToZoom.PictureFormat.CropTop +\u003d zoomShape.Top;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeToZoom.PictureFormat.CropRight +\u003d (PowerPointPresentation.Current.SlideWidth - (zoomShape.Left + zoomShape.Width));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeToZoom.PictureFormat.CropBottom +\u003d (PowerPointPresentation.Current.SlideHeight - (zoomShape.Top + zoomShape.Height));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            LegacyShapeUtil.CopyShapePosition(zoomShape, ref shapeToZoom);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return shapeToZoom;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        //Stores slide-size crop of the current slide as a global variable"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AddZoomSlideCroppedPicture(float magnifyRatio \u003d 1.0f)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointSlide zoomSlideCopy \u003d this.Duplicate();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            Globals.ThisAddIn.Application.ActiveWindow.View.GotoSlide(zoomSlideCopy.Index);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Shape cropShape \u003d zoomSlideCopy.Shapes.AddShape(Office.MsoAutoShapeType.msoShapeRectangle, 0, 0, PowerPointPresentation.Current.SlideWidth - 0.01f, PowerPointPresentation.Current.SlideHeight - 0.01f);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            cropShape.Select();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Selection sel \u003d Globals.ThisAddIn.Application.ActiveWindow.Selection;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Shape croppedShape \u003d CropToShape.Crop(zoomSlideCopy, sel, magnifyRatio: magnifyRatio);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            try"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                string tempFilePath \u003d FileDir.GetTemporaryPngFilePath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                Utils.GraphicsUtil.ExportShape(croppedShape, tempFilePath);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                zoomSlideCroppedShapes \u003d _slide.Shapes.AddPicture2(tempFilePath,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    Office.MsoTriState.msoFalse,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    Office.MsoTriState.msoTrue,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    0,"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                croppedShape.Delete();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                try"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    FileDir.DeleteFile(tempFilePath);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                catch (Exception)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    // If the file cannot be deleted, we continue without deletion."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            catch (Exception)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                // Revert to normal copy and pasting if unable to create file."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                croppedShape.Cut();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomSlideCroppedShapes \u003d _slide.Shapes.PasteSpecial(PowerPoint.PpPasteDataType.ppPastePNG)[1];"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            zoomSlideCroppedShapes.Name \u003d \"PPTLabsMagnifyAreaGroup\" + DateTime.Now.ToString(\"yyyyMMddHHmmssffff\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            Utils.ShapeUtil.FitShapeToSlide(ref zoomSlideCroppedShapes);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            zoomSlideCopy.Delete();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ManageSlideTransitions()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            RemoveSlideTransitions();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            _slide.SlideShowTransition.AdvanceOnTime \u003d Office.MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            _slide.SlideShowTransition.AdvanceOnClick \u003d Office.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            _slide.SlideShowTransition.AdvanceTime \u003d 0;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 26,
      "-": 162
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/Models/PowerPointShapeGalleryPresentation.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Diagnostics;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using System.IO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Linq;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Text.RegularExpressions;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Forms;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "using Office \u003d Microsoft.Office.Core;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.Models"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    class PowerPointShapeGalleryPresentation : PowerPointPresentation"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        /************************************************************************"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "         * Some General Concerns"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         * 1. Be careful when using PowerPointPresentation.Slides property. The"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "         * implementation requires O(n) time to access an item, instead of O(1)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "         * Therefore, when features in PowerPointSlide is not required, access"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "         * slides via PowerPointPresentation.Presentation.Slides;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         ************************************************************************/"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string CategoryNameBoxSearchPattern \u003d \"[Cc]ategory: *([^\u003c\u003e:\\\"/\\\\\\\\|?*]+)\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string CategoryNameFormat \u003d \"Category: {0}\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string DefaultSlideNameSearchPattern \u003d @\"[Ss]lide ?\\d+\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string DuplicateShapeSuffixFormat \u003d \"(duplicate shape {0})\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string GroupSelectionNameFormat \u003d \"Group {0} Seq_{1}\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string GroupSelectionNamePattern \u003d @\"^Group ([\\w\\s]+) Seq_(\\d+)$\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string NameSearchPattern \u003d @\"^Group {0} Seq_(\\d+)$|^{1}$\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string NameExtractionPatternFormat \u003d @\"^Group ({0}(?: \\d+)*) Seq_\\d+$|^({1}(?: \\d+)*)$\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string ShapeGalleryFileExtension \u003d \".pptlabsshapes\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string UntitledCategoryNameFormat \u003d \"Untitled Category {0}\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int MaxUndoAmount \u003d 20;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private PowerPointSlide _defaultCategory;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        private readonly List\u003cShape\u003e _categoryNameBoxCollection \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        # region Properties"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public List\u003cstring\u003e Categories { get; private set; }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        public string DefaultCategory"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                if (_defaultCategory \u003d\u003d null)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                return _defaultCategory.Name;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            set"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCategoryIndex(value, true);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        public string ImportToCategory { get; set; }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool IsImportedFile { get; set; }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        # endregion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        # region Constructor"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        public PowerPointShapeGalleryPresentation(string path, string name) : base(path, name)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Categories \u003d new List\u003cstring\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        public PowerPointShapeGalleryPresentation(Presentation presentation) : base(presentation)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            Categories \u003d new List\u003cstring\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        # endregion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        # region API"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        public void AddCategory(string name, bool setAsDefault \u003d true, bool fromClipBoard \u003d false)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            int index \u003d FindCategoryIndex(name, setAsDefault);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            // the category already exists"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            if (index !\u003d -1)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            // ppLayoutBlank causes an error, so we use ppLayoutText instead and manually remove the"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            // place holders"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointSlide newSlide \u003d AddSlide(name: name);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            newSlide.DeleteAllShapes();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape categoryNameBox;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fromClipBoard)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                newSlide.Shapes.Paste();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                categoryNameBox \u003d RetrieveCategoryNameBox(newSlide);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                categoryNameBox \u003d newSlide.Shapes.AddTextbox(Office.MsoTextOrientation.msoTextOrientationHorizontal, 0, 0,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                                                             SlideWidth, 0);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                categoryNameBox.TextFrame.TextRange.Text \u003d string.Format(CategoryNameFormat, name);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            Categories.Add(name);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            _categoryNameBoxCollection.Add(categoryNameBox);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            if (setAsDefault)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                _defaultCategory \u003d newSlide;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            Save();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            ActionProtection();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public string AddShape(PowerPointPresentation pres, PowerPointSlide origSlide, ShapeRange shapeRange, string name, string category \u003d \"\", bool fromClipBoard \u003d false)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!fromClipBoard)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                return ClipboardUtil.RestoreClipboardAfterAction(() \u003d\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapeRange.Copy();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                    return AddShape(name, category);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                }, pres, origSlide);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                return AddShape(name, category);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void Close()"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            base.Close();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            RetrieveShapeGalleryFile();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public void CopyCategory(string name)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            int index \u003d FindCategoryIndex(name);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Presentation.Slides[index].Shapes.Range().Copy();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void CopyShape()"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            _defaultCategory.Shapes.Range().Copy();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public void CopyShape(string name)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cShape\u003e shapes \u003d _defaultCategory.GetShapesWithRule(GenerateNameSearchPattern(name));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            _defaultCategory.Shapes.Range(shapes.Select(item \u003d\u003e item.Name).ToArray()).Copy();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void CopyShape(IEnumerable\u003cstring\u003e nameList)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cstring\u003e fullList \u003d new List\u003cstring\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (string name in nameList)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                fullList.AddRange(_defaultCategory.GetShapesWithRule(GenerateNameSearchPattern(name))"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                                                  .Select(item \u003d\u003e item.Name));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            _defaultCategory.Shapes.Range(fullList.ToArray()).Copy();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        public void CopyShapeToCategory(PowerPointPresentation pres, PowerPointSlide origSlide, string name, string categoryName)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            int index \u003d FindCategoryIndex(categoryName);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            if (index \u003d\u003d -1)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            // copy a shape with name from default category to another category"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cShape\u003e shapes \u003d _defaultCategory.GetShapesWithRule(GenerateNameSearchPattern(name));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointSlide destCategory \u003d Slides[index - 1];"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            ClipboardUtil.RestoreClipboardAfterAction(() \u003d\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                _defaultCategory.Shapes.Range(shapes.Select(item \u003d\u003e item.Name).ToArray()).Copy();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                return destCategory.Shapes.Paste();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            }, pres, origSlide);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            Save();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            ActionProtection();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool HasCategory(string name)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            return Slides.Any(category \u003d\u003e category.Name \u003d\u003d name);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public void MoveShapeToCategory(PowerPointPresentation pres, PowerPointSlide origSlide, string name, string categoryName)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            int index \u003d FindCategoryIndex(categoryName);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (index \u003d\u003d -1)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // move a shape with name from default category to another category"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cShape\u003e shapes \u003d _defaultCategory.GetShapesWithRule(GenerateNameSearchPattern(name));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointSlide destCategory \u003d Slides[index - 1];"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            ClipboardUtil.RestoreClipboardAfterAction(() \u003d\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                _defaultCategory.Shapes.Range(shapes.Select(item \u003d\u003e item.Name).ToArray()).Cut();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                return destCategory.Shapes.Paste();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            }, pres, origSlide);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            Save();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            ActionProtection();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool Open(bool readOnly \u003d false, bool untitled \u003d false,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                                  bool withWindow \u003d true, bool focus \u003d true)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            RetrievePptxFile();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            // if we can\u0027t even open the file, return false"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!base.Open(readOnly, untitled, withWindow, focus))"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!ConsistencyCheck())"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            // set default category to be the first slide, but do nothing if the presentation"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            // has no slide, i.e. it\u0027s a newly created presentation"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Presentation.Slides.Count \u003e 0)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                _defaultCategory \u003d PowerPointSlide.FromSlideFactory(Presentation.Slides[1]);  "
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        public void RemoveCategory()"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            // we need to change the index to 0-based in order to remove from Categories"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            int index \u003d FindCategoryIndex(_defaultCategory.Name) - 1;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            _defaultCategory \u003d null;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            Categories.RemoveAt(index);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            _categoryNameBoxCollection.RemoveAt(index);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            RemoveSlide(index);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            Save();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            ActionProtection();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        public void RemoveShape(string name)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            _defaultCategory.DeleteShapeWithRule(GenerateNameSearchPattern(name));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            Save();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            ActionProtection();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        public void RenameShape(string oldName, string newName)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            Regex nameRegex \u003d GenerateNameSearchPattern(oldName);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            Regex replaceRegex \u003d new Regex(oldName);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cShape\u003e shapes \u003d _defaultCategory.GetShapesWithRule(nameRegex);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape shape in shapes)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.Name \u003d replaceRegex.Replace(shape.Name, newName);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            Save();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            ActionProtection();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        public void RenameCategory(string newName)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            Categories[_defaultCategory.Index - 1] \u003d newName;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            _defaultCategory.Name \u003d newName;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape categoryNameBox \u003d _categoryNameBoxCollection[_defaultCategory.Index - 1];"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            categoryNameBox.TextFrame.TextRange.Text \u003d string.Format(CategoryNameFormat, newName);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            Save();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            ActionProtection();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        # endregion"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        # region Helper Function"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ActionProtection()"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c MaxUndoAmount; i++)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                Presentation.Slides[1].Background.Fill.BackColor \u003d Presentation.Slides[1].Background.Fill.BackColor;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool ConsistencyCheck()"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            // if the opening ShapeGallery is a single shape file, or if there\u0027s no slide,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            // the file is always valid"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            return (IsImportedFile \u0026\u0026 !string.IsNullOrEmpty(ImportToCategory)) ||"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "                   SlideCount \u003c 1 ||"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "                   InitCategories();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        private Shape ConsistencyCheckCategoryNameBox(PowerPointSlide category, ref int untitledCategoryCnt)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape categoryNameBox \u003d RetrieveCategoryNameBox(category);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            if (categoryNameBox !\u003d null)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "                category.Name \u003d RetrieveCategoryName(categoryNameBox);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "                // if we do not have a name box inside, we have 3 cases:"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "                // 1. slide.Name has been configured (old ShapeGallery file);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "                // 2. slide.Name is default (user didn\u0027t specify a name)."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "                // for case 1 \u0026 2, we need to add a new text box into the slie."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "                // For case 1, the text of category box should be slide.Name;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "                // For case 2, the text of category box should be next untitled name;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "                categoryNameBox \u003d category.Shapes.AddTextbox(Office.MsoTextOrientation.msoTextOrientationHorizontal, 0, 0,"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                                                             SlideWidth, 0);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "                Regex defaultSlideNameRegex \u003d new Regex(DefaultSlideNameSearchPattern);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                if (defaultSlideNameRegex.IsMatch(category.Name))"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "                    untitledCategoryCnt++;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "                    "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "                    string untitledName \u003d string.Format(UntitledCategoryNameFormat, untitledCategoryCnt);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "                    category.Name \u003d untitledName;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "                categoryNameBox.TextFrame.TextRange.Text \u003d string.Format(CategoryNameFormat, category.Name);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            _categoryNameBoxCollection.Add(categoryNameBox);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "            return categoryNameBox;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool ConsistencyCheckCategoryLocalToSlide()"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cstring\u003e categoriesOnDisk \u003d Directory.EnumerateDirectories(Path).ToList();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            bool categoryLost \u003d false;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (string categoryPath in categoriesOnDisk)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "                string categoryName \u003d new DirectoryInfo(categoryPath).Name;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "                if (Slides.All(category \u003d\u003e category.Name.ToLower() !\u003d categoryName.ToLower()))"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "                    categoryLost \u003d true;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    AddCategory(categoryName, false, true);"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            return categoryLost;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        private string ConsistencyCheckCategorySlideToLocal(PowerPointSlide category)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "            string categoryFolderPath \u003d System.IO.Path.Combine(Path, category.Name);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "            string newCategoryPath \u003d categoryFolderPath;"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "            // the category is some how lost on the disk, regenerate the category"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Directory.Exists(categoryFolderPath))"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "                // create the directory, since shape reconstruction will be taken care"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "                // of during ConsistencyCheckShapeToPng(), we do not need to generate"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "                // the shapes here"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "                Directory.CreateDirectory(categoryFolderPath);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "                // in case some of categories to be imported have the same name as those"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "                // already exist categories"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "                if (IsImportedFile)"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "                    int duplicateCnt \u003d 1;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "                    string oriCategoryName \u003d newCategoryPath;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "                    while (Directory.Exists(newCategoryPath))"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "                        newCategoryPath \u003d oriCategoryName + \" \" + duplicateCnt;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "                        duplicateCnt++;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "                    Directory.CreateDirectory(newCategoryPath);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "            return newCategoryPath;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool ConsistencyCheckPngToShape(IEnumerable\u003cstring\u003e pngShapes, PowerPointSlide category)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "            // if some png could not be found in shape gallery, we will delete it"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "            // to save space"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "            bool shapeLost \u003d false;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (string pngShape in pngShapes)"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "                string shapeName \u003d System.IO.Path.GetFileNameWithoutExtension(pngShape);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "                Regex searchPattern \u003d GenerateNameSearchPattern(shapeName);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "                bool found \u003d category.HasShapeWithRule(searchPattern);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!found)"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapeLost \u003d true;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "                    File.Delete(pngShape);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "            return shapeLost;"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool ConsistencyCheckSelf()"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "            bool shapeDuplicate \u003d false;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "            // we have 3 cases here:"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "            // 1. Open ShapeGallery;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "            // 2. Open a ShapeGallery via ImportCategory;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "            // For both cases, if inconsistency is found, we keep all the shapes but"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "            // append \"(recovered shape X)\" to the shape name, X is the relative index"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "            // Note: point 2 is not needed, becuase all no-png shapes will be exported"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "            // during ConsistencyCheckShapeToPng, and pngs without a corresponding shape"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "            // will be deleted during ConsistencyCheckPngToShape."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPointSlide category in Slides)"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "                Dictionary\u003cstring, int\u003e shapeHash \u003d new Dictionary\u003cstring, int\u003e();"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cShape\u003e shapes \u003d category.Shapes.Cast\u003cShape\u003e().ToList();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cstring\u003e duplicateShapeNames \u003d new List\u003cstring\u003e();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "                foreach (Shape shape in shapes)"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (shapeHash.Count \u003d\u003d 0 ||"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "                        !shapeHash.ContainsKey(shape.Name))"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "                        shapeHash[shape.Name] \u003d 1;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "                    else"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "                        int index \u003d (shapeHash[shape.Name] +\u003d 1);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "                        // add to collection only if this shape is the first duplicate shape"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (index \u003d\u003d 2)"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "                            duplicateShapeNames.Add(shape.Name);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "                        shape.Name +\u003d string.Format(DuplicateShapeSuffixFormat, index);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "                shapeDuplicate \u003d duplicateShapeNames.Count \u003e 0;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "                foreach (string lastShapeName in duplicateShapeNames)"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "                    Shape lastShape \u003d category.GetShapeWithName(lastShapeName)[0];"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "                    lastShape.Name +\u003d string.Format(DuplicateShapeSuffixFormat, 1);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "            return shapeDuplicate;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool ConsistencyCheckShapeToPng(List\u003cstring\u003e pngShapes, PowerPointSlide category, string shapeFolderPath)"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "            // if inconsistency is found, we export the extra shape to .png"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "            bool shapeLost \u003d false;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "            Regex groupSelectNamePattern \u003d new Regex(GroupSelectionNamePattern);"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "            // this is to handle 2 cases:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "            // 1. user deleted the .png shape accidentally;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "            // 2. the file is imported"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape shape in category.Shapes)"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "                // skip category name box"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shape.Type \u003d\u003d Office.MsoShapeType.msoTextBox \u0026\u0026"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "                    _categoryNameBoxCollection.Contains(shape))"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "                string name \u003d shape.Name;"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "                //check for sequence grouped shape"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "                if (groupSelectNamePattern.IsMatch(name))"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "                    name \u003d groupSelectNamePattern.Match(name).Groups[1].Value;"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "                string shapePath \u003d shapeFolderPath + @\"\\\" + name + \".png\";"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!pngShapes.Contains(shapePath))"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "                    GraphicsUtil.ExportShape(shape, shapePath);"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapeLost \u003d true;"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "            return shapeLost;"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "        private int FindCategoryIndex(string categoryName, bool setAsDefault \u003d false)"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "            int index \u003d -1;"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPointSlide category in Slides)"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "                if (category.Name \u003d\u003d categoryName)"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "                    index \u003d category.Index;"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (setAsDefault)"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "                        _defaultCategory \u003d category;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "        private Regex GenerateNameSearchPattern(string name)"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "            string skippedName \u003d CommonUtil.SkipRegexCharacter(name);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "            string searchPattern \u003d string.Format(NameSearchPattern, skippedName, skippedName);"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Regex(searchPattern);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool InitCategories()"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "            // here we need to check 3 cases:"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "            // 1. self consistency check (if there are any duplicate names);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "            // 2. more png than shapes inside pptx (shapes for short);"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "            // 3. more shapes than png."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "            bool shapeDuplicate \u003d ConsistencyCheckSelf();"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "            bool shapeLost \u003d false;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "            bool pngLost \u003d false;"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "            int untitledCategoryCnt \u003d 0;"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            List\u003cPowerPointSlide\u003e slides \u003d Slides;"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            for (int i \u003d Slides.Count - 1; i \u003e\u003d 0; i--)"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                PowerPointSlide category \u003d Slides[i];"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape categoryNameBox \u003d ConsistencyCheckCategoryNameBox(category, ref untitledCategoryCnt);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "                // check if we have a corresponding category directory in the Path"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                string shapeFolderPath;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                try"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    shapeFolderPath \u003d ConsistencyCheckCategorySlideToLocal(category);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                catch (Exception)"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    // Unable to get shape folder path. Store the problematic category and continue"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    // Actual slide index starts from 1, but is accounted for in PowerPointPresentation.removeSlide(int)."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    RemoveSlide(i);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "                string finalCategoryName \u003d new DirectoryInfo(shapeFolderPath).Name;"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cstring\u003e pngShapes \u003d Directory.EnumerateFiles(shapeFolderPath, \"*.png\").ToList();"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "                // critical: OR with itself at the end to avoid early termination"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "                shapeLost \u003d ConsistencyCheckShapeToPng(pngShapes, category, shapeFolderPath) || shapeLost;"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "                pngLost \u003d ConsistencyCheckPngToShape(pngShapes, category) || pngLost;"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "                // update names only when the name gets changed"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "                if (category.Name !\u003d finalCategoryName)"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "                    category.Name \u003d finalCategoryName;"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "                    categoryNameBox.TextFrame.TextRange.Text \u003d string.Format(CategoryNameFormat, finalCategoryName);"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "                Categories.Add(finalCategoryName);"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "            bool categoryInShapeGalleryLost \u003d ConsistencyCheckCategoryLocalToSlide();"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "            Save();"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "            if ((shapeDuplicate || shapeLost || categoryInShapeGalleryLost || pngLost) \u0026\u0026"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "                !IsImportedFile)"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(ShapesLabText.ErrorShapeCorrupted);"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "        private string RetrieveCategoryName(Shape categoryNameBox)"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "            Regex categoryNamePattern \u003d new Regex(CategoryNameBoxSearchPattern);"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "            Match namePatternMatch \u003d categoryNamePattern.Match(categoryNameBox.TextFrame.TextRange.Text);"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "            string categoryName \u003d namePatternMatch.Groups[1].Value;"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "            return categoryName;"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "        private Shape RetrieveCategoryNameBox(PowerPointSlide slide)"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cShape\u003e nameBoxCandidate \u003d slide.GetShapesWithTypeAndRule(Office.MsoShapeType.msoTextBox, new Regex(\".+\"));"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "            if (nameBoxCandidate.Count \u003d\u003d 0)"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "            Regex categoryNamePattern \u003d new Regex(CategoryNameBoxSearchPattern);"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "            // return the first match name box"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "            return nameBoxCandidate.FirstOrDefault(x \u003d\u003e categoryNamePattern.IsMatch(x.TextFrame.TextRange.Text));"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "        private void RetrievePptxFile()"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "            string shapeGalleryFileName \u003d FullName.Replace(\".pptx\", ShapeGalleryFileExtension);"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "            if (File.Exists(shapeGalleryFileName))"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "                File.SetAttributes(shapeGalleryFileName, FileAttributes.Normal);"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "                File.Move(shapeGalleryFileName, FullName);"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "            if (File.Exists(FullName))"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "                // to reduce the chance that user opens the shape gallery file, we make the pptx file hidden"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "                File.SetAttributes(FullName, FileAttributes.Normal);"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "                File.SetAttributes(FullName, FileAttributes.Hidden);"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "        private void RetrieveShapeGalleryFile()"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "            // set the file as a visible readonly .pptlabsshapes file."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "            string shapeGalleryFileName \u003d FullName.Replace(\".pptx\", ShapeGalleryFileExtension);"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "            Trace.TraceInformation(\"FullName \u003d \" + FullName + \", Name \u003d \" + shapeGalleryFileName);"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "            File.Move(FullName, shapeGalleryFileName);"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "            File.SetAttributes(shapeGalleryFileName, FileAttributes.Normal);"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "            File.SetAttributes(shapeGalleryFileName, FileAttributes.ReadOnly);"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "        private string AddShape(string name, string category) "
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointSlide categorySlide \u003d _defaultCategory;"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!string.IsNullOrEmpty(category))"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "                int categoryIndex \u003d FindCategoryIndex(category);"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "                if (categoryIndex \u003d\u003d -1)"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "                    return string.Empty;"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "                categorySlide \u003d Slides[categoryIndex - 1];"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "            // check if the name has been used, if used, name it to the next available name"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "            if (categorySlide.HasShapeWithRule(GenerateNameSearchPattern(name)))"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "                Regex nameExtractionRegex \u003d new Regex(string.Format(NameExtractionPatternFormat, name, name));"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cstring\u003e nameList \u003d categorySlide.GetShapesWithRule(nameExtractionRegex)"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "                                            .Select(item \u003d\u003e nameExtractionRegex.Match(item.Name))"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "                                            .Select(match \u003d\u003e !string.IsNullOrEmpty(match.Groups[1].Value)"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "                                                             ? match.Groups[1].Value"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "                                                             : match.Groups[2].Value)"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "                                            .Distinct()"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "                                            .ToList();"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "                name \u003d CommonUtil.NextAvailableName(nameList, name);"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange pastedShapeRange \u003d categorySlide.Shapes.Paste();"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "            if (pastedShapeRange.Count \u003e 1)"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int nameCount \u003d 1; nameCount \u003c\u003d pastedShapeRange.Count; nameCount++)"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "                    Shape shape \u003d pastedShapeRange[nameCount];"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "                    shape.Name \u003d string.Format(GroupSelectionNameFormat, name, nameCount);"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "                pastedShapeRange[1].Name \u003d name;"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "            Save();"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "            ActionProtection();"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "            return name;"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "        # endregion"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 18,
      "-": 710
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/PictureSlidesLab/PictureSlidesLab.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿namespace PowerPointLabs.PictureSlidesLab"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    internal static class PictureSlidesLab"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public static bool IsPictureSlidesEnabled { get; set; } \u003d false;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 7
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/PictureSlidesLab/Views/PictureSlidesLabWindow.xaml.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.ObjectModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Specialized;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using System.ComponentModel;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Linq;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Controls;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Controls.Primitives;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Forms;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Input;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Media;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Media.Animation;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Threading;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "using MahApps.Metro.Controls.Dialogs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.PictureSlidesLab.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.PictureSlidesLab.Service;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.PictureSlidesLab.Util;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.PictureSlidesLab.ViewModel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.PictureSlidesLab.Views.Interface;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.WPF.Observable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "using ButtonBase \u003d System.Windows.Controls.Primitives.ButtonBase;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "using Clipboard \u003d System.Windows.Forms.Clipboard;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "using DragEventArgs \u003d System.Windows.DragEventArgs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "using Forms \u003d System.Windows.Forms;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "using KeyEventArgs \u003d System.Windows.Input.KeyEventArgs;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "using ListBox \u003d System.Windows.Controls.ListBox;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "using MessageBox \u003d System.Windows.MessageBox;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "using Point \u003d System.Windows.Point;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.PictureSlidesLab.Views"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /// Interaction logic for Picture Slides Lab"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public partial class PictureSlidesLabWindow : IPictureSlidesLabWindowView"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        # region Props \u0026 States"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // UI model used to adjust image offset"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public AdjustImageWindow CropWindow { get; set; }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // UI model for drag and drop"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableString DragAndDropInstructionText { get; set; }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        public QuickDropDialog QuickDropDialog { get; set; }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // indicate to add-in that whether the window is open"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool IsOpen { get; set; }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool IsVariationsFlyoutOpen { get; private set; }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // indicate that whether the window is closing"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool IsClosing { get; set; }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // View model that contains the presenting logic"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        private PictureSlidesLabWindowViewModel ViewModel { set; get; }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // used to indicate right-click item"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        private int _clickedImageSelectionItemIndex \u003d -1;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // other UI control flags"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool _isAbleLoadingOnWindowActivate \u003d true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool _isStylePreviewRegionInit;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        private int _lastSelectedSlideIndex \u003d -1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool _isDisplayDefaultPicture;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool _isEnableUpdatePreview \u003d true;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        //Window size control constant"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        private const double StandardSystemWidth \u003d 1280.0;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        private const double StandardSystemHeight \u003d 800.0;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private const double StandardWindowWidth \u003d 1200.0;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        private const double StandardWindowHeight \u003d 700.0;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        private const double StandardPrewienGridWidth \u003d 560.0;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private const float StandardDpi \u003d 96f;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        # endregion"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Lifecycle"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public PictureSlidesLabWindow()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            InitializeComponent();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            // start loading process"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            EveryDayPhrase.Text \u003d new EveryDayPhraseService().GetEveryDayPhrase();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            PictureSlidesLabGridLoadingOverlay.Visibility \u003d Visibility.Visible;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            IsOpen \u003d true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            SettingsButtonIcon.Source \u003d ImageUtil.BitmapToImageSource(Properties.Resources.PslSettings);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            PictureAspectRefreshButtonIcon.Source \u003d ImageUtil.BitmapToImageSource(Properties.Resources.PslRefresh);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            InitSizePosition();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            Logger.Log(\"PSL begins\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            SetTimeout(Init, 800);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        private void Init()"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                InitUiExceptionHandling();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                InitViewModel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                InitGotoSlideDialog();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                InitLoadStylesDialog();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                InitErrorTextDialog();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                InitDragAndDrop();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                // leave some time for data binding to finish"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                SetTimeout(InitStyleing, 50);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(\"PSL init done\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                ShowErrorMessageBox(PictureSlidesLabText.ErrorWhenInitialize, e);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(e, \"Init\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        private void InitSizePosition()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            System.Drawing.Size mSize \u003d SystemInformation.WorkingArea.Size;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            //Devices might have scale factors \u003e 100%"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            float scaleFactor \u003d GetScalingFactor();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            double systemHeight \u003d mSize.Height / scaleFactor;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            double systemWidth \u003d mSize.Width / scaleFactor;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            double windowWidth \u003d systemWidth / StandardSystemWidth;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            double windowHeight \u003d systemHeight / StandardSystemHeight;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            this.Window.Width \u003d StandardWindowWidth * windowWidth;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            this.Window.Height \u003d StandardWindowHeight * windowHeight;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            this.Window.StylesPreviewGrid.Width \u003d StandardPrewienGridWidth * windowWidth;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            this.Window.Left \u003d (systemWidth - this.Window.Width) / 2;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            this.Window.Top \u003d (systemHeight - this.Window.Height) / 2;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            this.Window.WindowStartupLocation \u003d WindowStartupLocation.Manual;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private float GetScalingFactor()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Graphics graphics \u003d Graphics.FromHwnd(IntPtr.Zero);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return graphics.DpiX / StandardDpi;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        private void InitUiExceptionHandling()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            AppDomain.CurrentDomain.UnhandledException +\u003d HandleUnhandledException;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            Dispatcher.UnhandledException +\u003d HandleUnhandledException;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Logger.Log(\"PSL init UI exception handling done\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private void InitStyleing()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(\"PSL init styling begins\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                // load back the style from the current slide, or"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                // select the first picture to preview styles"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                bool isSuccessfullyLoaded \u003d LoadStyleAndImage(this.GetCurrentSlide(),"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                    isLoadingWithDefaultPicture: false);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                if (ViewModel.ImageSelectionList.Count \u003e\u003d 2 \u0026\u0026 !isSuccessfullyLoaded)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                    Logger.Log(\"Not loaded back style and picture, going to select a picture.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                    // index-0 is choosePicture placeholder"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewModel.ImageSelectionListSelectedId.Number \u003d 1;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(\"PSL init styling done\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                ShowErrorMessageBox(PictureSlidesLabText.ErrorWhenInitialize, e);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(e, \"InitStyleing\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            finally"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                // remove loading overlay"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                PictureSlidesLabGridLoadingOverlay.Visibility \u003d Visibility.Collapsed;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(\"PSL init loading screen collapsed\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        private void InitViewModel()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            ViewModel \u003d new PictureSlidesLabWindowViewModel(this);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            ViewModel.StylesVariationList.CollectionChanged +\u003d StylesVariationList_OnCollectionChanged;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            ViewModel.StylesPreviewList.CollectionChanged +\u003d StylesPreviewList_OnCollectionChanged;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            ViewModel.ImageSelectionList.CollectionChanged +\u003d ImageSelectionList_OnCollectionChanged;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            DataContext \u003d ViewModel;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            SettingsPane.DataContext \u003d ViewModel.Settings;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            SettingsPane.UpdateInsertCitationControlsVisibility();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            UpdatePreviewInterfaceWhenImageListChange(ViewModel.ImageSelectionList);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            Logger.Log(\"PSL init ViewModel done\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        private void InitDragAndDrop()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            DragAndDropInstructionText \u003d new ObservableString { Text \u003d PictureSlidesLabText.DragAndDropInstruction };"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            DragAndDropInstructions.DataContext \u003d DragAndDropInstructionText;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            Logger.Log(\"PSL init drag and drop done\");"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        private void PictureSlidesLabWindow_OnClosing(object sender, CancelEventArgs e)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                IsOpen \u003d false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                IsClosing \u003d true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                if (QuickDropDialog !\u003d null)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                    QuickDropDialog.Close();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                    QuickDropDialog \u003d null;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                ViewModel.CleanUp();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(\"PSL closed\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception expt)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(expt, \"PictureSlidesLabWindow_OnClosing\");"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        # endregion"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        # region Common UI Events \u0026 Interactions"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ImageSelectionList_OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            UpdatePreviewInterfaceWhenImageListChange(sender as Collection\u003cImageItem\u003e);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        private void StylesVariationList_OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            UpdateVariationInterface(sender as Collection\u003cImageItem\u003e);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        private void StylesPreviewList_OnCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            UpdatePreviewInterfaceWhenPreviewListChange(sender as Collection\u003cImageItem\u003e);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Drag and Drop"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        private void PictureSlidesLabWindow_OnDragLeave(object sender, DragEventArgs args)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            PictureSlidesLabGridOverlay.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        private void PictureSlidesLabWindow_OnDragEnter(object sender, DragEventArgs args)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            if (args.Data.GetDataPresent(\"FileDrop\")"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                || args.Data.GetDataPresent(\"Text\"))"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(\"Drag enter\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                PictureSlidesLabGridOverlay.Visibility \u003d Visibility.Visible;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                DisableLoadingStyleOnWindowActivate();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                Activate();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                EnableLoadingStyleOnWindowActivate();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        private void PictureSlidesLabWindow_OnDrop(object sender, DragEventArgs args)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                if (args \u003d\u003d null)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(\"Drop enter\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                if (args.Data.GetDataPresent(\"FileDrop\"))"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                    string[] filenames \u003d (args.Data.GetData(\"FileDrop\") as string[]);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (filenames \u003d\u003d null || filenames.Length \u003d\u003d 0)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                        return;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewModel.AddImageSelectionListItem(filenames,"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentSlide().GetNativeSlide(),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentPresentation().SlideWidth,"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentPresentation().SlideHeight);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                else if (args.Data.GetDataPresent(\"Text\"))"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                    string imageUrl \u003d args.Data.GetData(\"Text\") as string;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewModel.AddImageSelectionListItem(imageUrl,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentSlide().GetNativeSlide(),"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentPresentation().SlideWidth,"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentPresentation().SlideHeight);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(e, \"PictureSlidesLabWindow_OnDrop\");"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            finally"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "                PictureSlidesLabGridOverlay.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Copy and Paste Picture"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        private void MenuItemPastePictureHere_OnClick(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            HandlePastedPicture();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        private void PictureSlidesLabWindow_OnKeyDown(object sender, KeyEventArgs e)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            if (e.Key \u003d\u003d Key.V"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Keyboard.Modifiers \u003d\u003d ModifierKeys.Control)"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "                HandlePastedPicture();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        /// set isUsingWinformMsgBox to true when it requires a msgbox out of"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        /// the main window of PSL"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"isUsingWinformMsgBox\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        private void HandlePastedPicture(bool isUsingWinformMsgBox \u003d false)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "                System.Drawing.Image pastedPicture \u003d Clipboard.GetImage();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "                StringCollection pastedFiles \u003d Clipboard.GetFileDropList();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "                if (pastedPicture \u003d\u003d null \u0026\u0026"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "                    (pastedFiles \u003d\u003d null || pastedFiles.Count \u003d\u003d 0))"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (isUsingWinformMsgBox)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "                        MessageBox.Show(PictureSlidesLabText.InfoPasteNothing, \"PowerPointLabs\");"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "                    else"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "                        ShowInfoMessageBox(PictureSlidesLabText.InfoPasteNothing);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "                    Logger.Log(\"Nothing to paste\");"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "                if (pastedPicture !\u003d null)"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "                    Logger.Log(\"Pasted enter\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "                    string pastedPictureFile \u003d StoragePath.GetPath(\"pastedImg-\""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                + DateTime.Now.GetHashCode() + \"-\""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                + Guid.NewGuid().ToString().Substring(0, 7));"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "                    pastedPicture.Save(pastedPictureFile);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewModel.AddImageSelectionListItem(new[] {pastedPictureFile},"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentSlide().GetNativeSlide(),"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentPresentation().SlideWidth,"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentPresentation().SlideHeight);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "                    // examine whether it\u0027s thumbnail picture"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (pastedPicture.Width \u003c\u003d 400"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 pastedPicture.Height \u003c\u003d 400)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (isUsingWinformMsgBox)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "                            MessageBox.Show(PictureSlidesLabText.InfoPasteThumbnail, \"PowerPointLabs\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "                        else"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "                            ShowInfoMessageBox(PictureSlidesLabText.InfoPasteThumbnail);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "                else if (pastedFiles !\u003d null \u0026\u0026 pastedFiles.Count \u003e 0)"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewModel.AddImageSelectionListItem(pastedFiles.Cast\u003cstring\u003e().ToArray(),"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentSlide().GetNativeSlide(),"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentPresentation().SlideWidth,"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentPresentation().SlideHeight);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(e, \"HandlePastedPicture\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        private void PictureSlidesLabGridLoadingOverlay_OnPreviewMouseLeftButtonUp(object sender, MouseButtonEventArgs e)"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "            PictureSlidesLabGridLoadingOverlay.Visibility \u003d Visibility.Collapsed;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Show QuickDrop dialog when PictureSlidesLab window is deactivated"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        private void PictureSlidesLabWindow_OnDeactivated(object sender, EventArgs e)"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "                if (IsDisposed)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "                _lastSelectedSlideIndex \u003d this.GetCurrentSlide().Index;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!IsDisposed"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 (CropWindow \u003d\u003d null || !CropWindow.IsOpen))"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (QuickDropDialog \u003d\u003d null)"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "                        QuickDropDialog \u003d new QuickDropDialog(this);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "                        QuickDropDialog.DropHandler +\u003d PictureSlidesLabWindow_OnDrop;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "                        QuickDropDialog.PasteHandler +\u003d () \u003d\u003e { HandlePastedPicture(isUsingWinformMsgBox: true); };"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "                        QuickDropDialog.ShowQuickDropDialog();"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "                        Logger.Log(\"PSL Quick Drop Dialog begins\");"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "                    else if (!QuickDropDialog.IsOpen \u0026\u0026 !QuickDropDialog.IsDisposed)"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "                        QuickDropDialog.ShowQuickDropDialog();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception expt)"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(expt, \"PictureSlidesLabWindow_OnDeactivated\");"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Show preview images when an image is selected in the ImageSelectionList"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ImageSelectionListBox_OnSelectionChanged(object sender, SelectionChangedEventArgs e)"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ImageSelectionListBox.SelectedValue !\u003d null)"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "                LeaveDefaultPictureMode();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ImageSelectionListBox.SelectedIndex \u003d\u003d 0)"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "                // 0 is for Choose Pictures placeholder,"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "                // de-select it"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "                ImageSelectionListBox.SelectedIndex \u003d -1;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "            ViewModel.UpdateSelectedPictureInPictureVariation();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "            UpdatePreviewImages();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "        private void StylesCustomizeButton_OnClick(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "            CustomizeStyle("
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "                (ImageItem) ImageSelectionListBox.SelectedValue ?? CreateDefaultPictureItem());"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        private void StylesPreviewApplyButton_OnClick(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "            this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "            ViewModel.ApplyStyleInPreviewStage("
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "                this.GetCurrentSlide().GetNativeSlide(),"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "                this.GetCurrentPresentation().SlideWidth,"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "                this.GetCurrentPresentation().SlideHeight);"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "            GC.Collect();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Allow arrow keys to navigate the listbox items"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ListBox_OnKeyDown(object sender, KeyEventArgs e)"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "            ListBox listbox \u003d sender as ListBox;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "            if (listbox \u003d\u003d null || listbox.Items.Count \u003c\u003d 0)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (e.Key)"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "                case Key.Right:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "                case Key.Down:"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!listbox.Items.MoveCurrentToNext())"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "                        listbox.Items.MoveCurrentToLast();"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "                case Key.Left:"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "                case Key.Up:"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!listbox.Items.MoveCurrentToPrevious())"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "                        listbox.Items.MoveCurrentToFirst();"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "            e.Handled \u003d true;"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Delete image by backspace/delete key"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ImageSelectionListBox_OnKeyDown(object sender, KeyEventArgs e)"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (e.Key)"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "                case Key.Delete:"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "                case Key.Back:"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "                    DeleteSelectedImage();"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "            ListBox_OnKeyDown(sender, e);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Drag splitter to change grid width"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "        private void Splitter_OnDragDelta(object sender, DragDeltaEventArgs e)"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            double newWidth \u003d StylesPreviewGrid.ActualWidth + e.HorizontalChange;"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // Prevent StylesPreviewGrid from becoming too small"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (newWidth \u003c StylesPreviewGrid.MinWidth)"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                StylesPreviewGrid.Width \u003d StylesPreviewGrid.MinWidth;"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // Prevent StylesPreviewGrid from overflowing grid column 0"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            else if (newWidth \u003e Column0.Width.Value)"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                StylesPreviewGrid.Width \u003d Column0.Width.Value;"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            else"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                StylesPreviewGrid.Width \u003d newWidth;"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Enable \u0026 disable Apply button for preview interface"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "        private void StylesPreivewListBox_OnSelectionChanged(object sender, SelectionChangedEventArgs e)"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "            UpdatePreviewStageControls();"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdatePreviewStageControls()"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "            if (StylesPreviewListBox.SelectedValue !\u003d null"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 IsDisplayDefaultPicture())"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "                StylesCustomizeButton.IsEnabled \u003d true;"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "                StylesApplyButton.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "            else if (StylesPreviewListBox.SelectedValue !\u003d null"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u0026\u0026 ImageSelectionListBox.SelectedValue !\u003d null)"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "                StylesCustomizeButton.IsEnabled \u003d true;"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "                StylesApplyButton.IsEnabled \u003d true;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "                StylesCustomizeButton.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "                StylesApplyButton.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Press ENTER button to apply"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "        private void StylesPreviewListBox_OnKeyUp(object sender, KeyEventArgs e)"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "            ListBox listbox \u003d sender as ListBox;"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "            if (listbox \u003d\u003d null || listbox.Items.Count \u003c\u003d 0)"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (e.Key)"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "                case Key.Enter:"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (StylesApplyButton.IsEnabled)"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "                        StylesApplyButton.RaiseEvent(new RoutedEventArgs(ButtonBase.ClickEvent));"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "        /// When window is re-activated, refresh the preview images and hide QuickDrop dialog"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "        private void PictureSlidesLabWindow_OnActivated(object sender, EventArgs e)"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "                // init last selected slide index"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "                if (_lastSelectedSlideIndex \u003d\u003d -1)"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "                    _lastSelectedSlideIndex \u003d this.GetCurrentSlide().Index;"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "                // hide quick drop dialog when main window activated"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "                if (QuickDropDialog !\u003d null \u0026\u0026 QuickDropDialog.IsOpen)"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "                    QuickDropDialog.HideQuickDropDialog();"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "                // when no current slide"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "                if (this.GetCurrentSlide() \u003d\u003d null)"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "                    Logger.Log(\"Current slide is null\");"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "                    GotoSlideButton.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "                    LoadStylesButton.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewModel.StylesPreviewList.Clear();"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewModel.StylesVariationList.Clear();"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "                // when allowed to do loading"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "                else if (_isStylePreviewRegionInit \u0026\u0026 _isAbleLoadingOnWindowActivate)"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "                    GotoSlideButton.IsEnabled \u003d true;"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "                    LoadStylesButton.IsEnabled \u003d true;"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "                    SetTimeout(() \u003d\u003e"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "                        // update preview images when slide no change"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (_lastSelectedSlideIndex \u003d\u003d this.GetCurrentSlide().Index)"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "                            UpdatePreviewImages();"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "                        // or load style and image if slide has been changed"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "                        else"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "                            LoadStyleAndImage(this.GetCurrentSlide());"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "                    }, 250);"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception expt)"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(expt, \"PictureSlidesLabWindow_OnActivated\");"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Obtain right-clicked listbox item and don\u0027t select any image"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ImageSelectionListBox_OnPreviewMouseDown(object sender, MouseButtonEventArgs e)"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "            ListBoxItem item \u003d ItemsControl.ContainerFromElement((ItemsControl) sender, (DependencyObject) e.OriginalSource) "
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "                as ListBoxItem;"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "            if (item \u003d\u003d null || item.Content \u003d\u003d null)"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "            if (e.RightButton \u003d\u003d MouseButtonState.Pressed)"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "                _clickedImageSelectionItemIndex \u003d -1;"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c ImageSelectionListBox.Items.Count; i++)"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "                    ListBoxItem listBoxItem \u003d ImageSelectionListBox.ItemContainerGenerator.ContainerFromIndex(i) "
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "                        as ListBoxItem;"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (listBoxItem \u003d\u003d null)"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (IsMouseOverTarget(listBoxItem, e.GetPosition(listBoxItem)))"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "                        _clickedImageSelectionItemIndex \u003d i;"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "                e.Handled \u003d true;"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "            else if (e.LeftButton \u003d\u003d MouseButtonState.Pressed)"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(\"begin import pictures\");"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "                ImageItem imageItem \u003d item.Content as ImageItem;"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "                if (imageItem !\u003d null"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 imageItem.ImageFile \u003d\u003d StoragePath.ChoosePicturesImgPath)"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "                    OpenFileDialog openFileDialog \u003d new OpenFileDialog"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "                        Multiselect \u003d true,"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "                        Filter \u003d @\"Image File|*.png;*.jpg;*.jpeg;*.bmp;*.gif;\""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "                    };"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "                    DisableLoadingStyleOnWindowActivate();"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (openFileDialog.ShowDialog() \u003d\u003d Forms.DialogResult.OK)"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "                        ViewModel.AddImageSelectionListItem(openFileDialog.FileNames,"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "                            this.GetCurrentSlide().GetNativeSlide(),"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "                            this.GetCurrentPresentation().SlideWidth,"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "                            this.GetCurrentPresentation().SlideHeight);"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "                    EnableLoadingStyleOnWindowActivate();"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "                    e.Handled \u003d true;"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "        private void MenuItemDeleteThisImage_OnClick(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteImage();"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "        private void MenuItemDeleteAllImages_OnClick(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "            ShowInfoMessageBox(PictureSlidesLabText.InfoDeleteAllImage, "
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageDialogStyle.AffirmativeAndNegative)"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "                .ContinueWith(task \u003d\u003e"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (task.Result \u003d\u003d MessageDialogResult.Affirmative)"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "                        Dispatcher.BeginInvoke(new Action(DeleteAllImage));"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "        private void MenuItemAdjustImage_OnClick(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_clickedImageSelectionItemIndex \u003c 0"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "                || _clickedImageSelectionItemIndex \u003e ImageSelectionListBox.Items.Count)"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "            ImageItem selectedImage \u003d (ImageItem)ImageSelectionListBox.Items.GetItemAt(_clickedImageSelectionItemIndex);"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedImage \u003d\u003d null || selectedImage.ImageFile \u003d\u003d StoragePath.LoadingImgPath)"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "            AdjustImageDimensions(selectedImage);"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "        private void MenuItemAdjustImage_OnClickFromPreviewListBox(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ViewModel.IsInPictureVariation())"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "                ImageItem imageItem \u003d ViewModel.GetSelectedPictureInPictureVariation("
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "                    StylesVariationListBox.SelectedIndex);"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "                if (imageItem.ImageFile \u003d\u003d StoragePath.NoPicturePlaceholderImgPath"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "                    || imageItem.ImageFile \u003d\u003d StoragePath.LoadingImgPath)"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "                AdjustImageDimensions(imageItem);"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "                ImageItem selectedImage \u003d (ImageItem)ImageSelectionListBox.SelectedItem;"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "                if (selectedImage \u003d\u003d null || selectedImage.ImageFile \u003d\u003d StoragePath.LoadingImgPath)"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "                AdjustImageDimensions(selectedImage);"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "        private void MenuItemEditSource_OnClick(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_clickedImageSelectionItemIndex \u003c 0"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "                || _clickedImageSelectionItemIndex \u003e ImageSelectionListBox.Items.Count)"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "            ImageItem selectedImage \u003d (ImageItem)ImageSelectionListBox.Items.GetItemAt(_clickedImageSelectionItemIndex);"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedImage \u003d\u003d null || selectedImage.ImageFile \u003d\u003d StoragePath.LoadingImgPath)"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPictureSource(selectedImage);"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "        private void MenuItemEditSource_OnClickFromPreviewListBox(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ViewModel.IsInPictureVariation())"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "                ImageItem imageItem \u003d ViewModel.GetSelectedPictureInPictureVariation("
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "                    StylesVariationListBox.SelectedIndex);"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "                if (imageItem.ImageFile \u003d\u003d StoragePath.NoPicturePlaceholderImgPath"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "                    || imageItem.ImageFile \u003d\u003d StoragePath.LoadingImgPath)"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "                EditPictureSource(imageItem);"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "                ImageItem selectedImage \u003d (ImageItem)ImageSelectionListBox.SelectedItem;"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "                if (selectedImage \u003d\u003d null || selectedImage.ImageFile \u003d\u003d StoragePath.LoadingImgPath)"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "                EditPictureSource(selectedImage);"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Update controls states when selection changed in the variation stage"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "        private void VariationListBox_OnSelectionChanged(object sender, SelectionChangedEventArgs e)"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ViewModel.IsInPictureVariation()"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u0026\u0026 StylesVariationListBox.SelectedIndex \u003e\u003d 0)"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "                ImageItem selectedImageItem \u003d"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewModel"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "                    .GetSelectedPictureInPictureVariation(StylesVariationListBox.SelectedIndex);"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "                if (selectedImageItem.ImageFile \u003d\u003d StoragePath.NoPicturePlaceholderImgPath"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "                    || selectedImageItem.ImageFile \u003d\u003d StoragePath.LoadingImgPath)"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "                    StyleVariationApplyButton.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "                    StyleVariationApplyButton.IsEnabled \u003d true;"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "                ViewModel.UpdateStyleVariationStyleOptionsWhenSelectedItemChange();"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateVariationStageControls();"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "            else if (ImageSelectionListBox.SelectedValue !\u003d null"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 StylesVariationListBox.SelectedValue !\u003d null"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 StylesPreviewListBox.SelectedValue !\u003d null)"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "                StyleVariationApplyButton.IsEnabled \u003d true;"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "                ViewModel.UpdateStyleVariationStyleOptionsWhenSelectedItemChange();"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateVariationStageControls();"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "            else if (IsDisplayDefaultPicture()"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u0026\u0026 StylesVariationListBox.SelectedValue !\u003d null"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u0026\u0026 StylesPreviewListBox.SelectedValue !\u003d null)"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "                StyleVariationApplyButton.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "                ViewModel.UpdateStyleVariationStyleOptionsWhenSelectedItemChange();"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateVariationStageControls();"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "                StyleVariationApplyButton.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "        /// step-by-step customization when user changes variant category"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"sender\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"e\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "        private void VariantsComboBox_OnSelectionChanged(object sender, SelectionChangedEventArgs e)"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(\"Change aspect to \" + ViewModel.CurrentVariantCategory.Text);"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "                ViewModel.UpdateStepByStepStylesVariationImages("
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "                    (ImageItem) ImageSelectionListBox.SelectedValue ?? CreateDefaultPictureItem(),"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.GetCurrentSlide().GetNativeSlide(),"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.GetCurrentPresentation().SlideWidth,"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.GetCurrentPresentation().SlideHeight);"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception expt)"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "                ShowErrorMessageBox(TextCollection.PictureSlidesLabText.ErrorFailedToLoadPreviewImages, expt);"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(expt, \"VariantsComboBox_OnSelectionChanged\");"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "        private void StylesVariationApplyButton_OnClick(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "            this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "            ViewModel.ApplyStyleInVariationStage("
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "                this.GetCurrentSlide().GetNativeSlide(),"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "                this.GetCurrentPresentation().SlideWidth,"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "                this.GetCurrentPresentation().SlideHeight);"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "            GC.Collect();"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "        private void VariationFlyoutBackButton_OnClick(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "            CloseVariationsFlyout();"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AddCitationSlideButton_OnClick(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "            Models.PowerPointPresentation presentation \u003d this.GetCurrentPresentation();"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "            if (presentation.Slides.Any(PictureCitationSlide.IsCitationSlide))"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "                Models.PowerPointSlide citationSlide \u003d presentation.Slides.Where(PictureCitationSlide.IsCitationSlide).First();"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "                ViewModel.AddPictureCitationSlide(citationSlide.GetNativeSlide(), presentation.Slides);"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "            else // no citation slide yet, so create one"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "                Slide slide \u003d presentation.Presentation.Slides.Add(presentation.SlideCount + 1, PpSlideLayout.ppLayoutText);"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "                ViewModel.AddPictureCitationSlide(slide, presentation.Slides);"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "            presentation.AddAckSlide();"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "            ShowInfoMessageBox(PictureSlidesLabText.InfoAddPictureCitationSlide);"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "        private void OpenSettingsButton_OnClick(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "            SettingsFlyoutControl.IsOpen \u003d true;"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SettingsFlyoutControl_OnIsOpenChanged(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!SettingsFlyoutControl.IsOpen)"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(\"Setting flyout is closed\");"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "                SetTimeout(() \u003d\u003e { UpdatePreviewImages(); }, 500);"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "        private void PictureAspectRefreshButton_OnClick(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "            ViewModel.RefreshLast8Pictures();"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "            UpdatePreviewImages();"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Helper funcs"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DeleteAllImage()"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "            ViewModel.RemoveAllImageSelectionListItems();"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "            HandleDeletePictureInPictureVariation();"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "        private void HandleDeletePictureInPictureVariation()"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "            ViewModel.UpdatePictureInPictureVariationWhenDeleteSome();"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ViewModel.IsInPictureVariation())"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdatePreviewImages();"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DeleteImage()"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_clickedImageSelectionItemIndex \u003c 1 "
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "                || _clickedImageSelectionItemIndex \u003e\u003d ImageSelectionListBox.Items.Count)"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "            ImageItem selectedImage \u003d (ImageItem) ImageSelectionListBox.Items.GetItemAt(_clickedImageSelectionItemIndex);"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedImage \u003d\u003d null)"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "            ViewModel.ImageSelectionList.RemoveAt(_clickedImageSelectionItemIndex);"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "            HandleDeletePictureInPictureVariation();"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DeleteSelectedImage()"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "            ImageItem selectedImage \u003d (ImageItem)ImageSelectionListBox.SelectedItem;"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedImage \u003d\u003d null"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "                || ImageSelectionListBox.SelectedIndex \u003d\u003d 0)"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "            ViewModel.ImageSelectionList.RemoveAt(ImageSelectionListBox.SelectedIndex);"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "            HandleDeletePictureInPictureVariation();"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "        private void EditPictureSource(ImageItem source)"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "            MetroDialogSettings metroDialogSettings \u003d new MetroDialogSettings"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "                DefaultText \u003d source.Source"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "            this.ShowInputAsync(\"Edit Picture Source\", \"Picture taken from\", metroDialogSettings)"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "                .ContinueWith(task \u003d\u003e"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!string.IsNullOrEmpty(task.Result))"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "                        source.Source \u003d task.Result;"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AdjustImageDimensions(ImageItem source)"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "            CropWindow \u003d new AdjustImageWindow();"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "            CropWindow.SetThumbnailImage(source.ImageFile);"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "            CropWindow.SetFullsizeImage(source.FullSizeImageFile);"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "            if (source.Rect.Width \u003e 1)"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "                CropWindow.SetCropRect(source.Rect.X, source.Rect.Y, source.Rect.Width, source.Rect.Height);"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "            DisableLoadingStyleOnWindowActivate();"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "            CropWindow.ShowAdjustPictureDimensionsDialog();"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "            EnableLoadingStyleOnWindowActivate();"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "            if (CropWindow.IsCropped)"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "                if (CropWindow.IsRotated)"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "                    source.Source \u003d CropWindow.RotateResult;"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "                    source.ImageFile \u003d ImageUtil.GetThumbnailFromFullSizeImg(CropWindow.RotateResult);"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "                    source.FullSizeImageFile \u003d CropWindow.RotateResult;"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "                    source.ContextLink \u003d CropWindow.RotateResult;"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "                source.UpdateImageAdjustmentOffset(CropWindow.CropResult, CropWindow.CropResultThumbnail, CropWindow.Rect);        "
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdatePreviewImages();"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "        /// decide visibility for instructions and stylesPreviewGrid"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdatePreviewInterfaceWhenImageListChange(Collection\u003cImageItem\u003e list)"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "            // there is only `Choose Picture` placeholder image"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "            ImageSelectionInstructions.Visibility \u003d list.Count \u003c\u003d 1"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "                ? Visibility.Visible"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "                : Visibility.Hidden;"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ImageSelectionInstructions.Visibility \u003d\u003d Visibility.Visible)"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "                PreviewInstructions.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "                PreviewInstructionsWhenNoSelectedSlide.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "                VariationInstructions.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "                VariationInstructionsWhenNoSelectedSlide.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "            else if (ImageSelectionListBox.SelectedValue \u003d\u003d null"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u0026\u0026 StylesPreviewListBox.Items.Count \u003d\u003d 0"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "                     \u0026\u0026 StylesVariationListBox.Items.Count \u003d\u003d 0)"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "                PreviewInstructions.Visibility \u003d Visibility.Visible;"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "                PreviewInstructionsWhenNoSelectedSlide.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "                VariationInstructions.Visibility \u003d Visibility.Visible;"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "                VariationInstructionsWhenNoSelectedSlide.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "            // there are `Choose Picture` placeholder image +"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "            // 2 sample pictures + maybe 1 image chosen by user"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "            if (StoragePath.IsFirstTimeUsage() \u0026\u0026 list.Count \u003c\u003d 4"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImageSelectionInstructions.Visibility \u003d\u003d Visibility.Hidden)"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "                PreviewInstructions.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "                ImageSelectionInstructionsForFirstTime.Visibility \u003d Visibility.Visible;"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "                ImageSelectionInstructionsForFirstTime.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "            // show StylesPreviewRegion aft there\u0027r some images in the SearchList region"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "            if (list.Count \u003e 1 \u0026\u0026 !_isStylePreviewRegionInit)"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "                // only one time entry"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "                _isStylePreviewRegionInit \u003d true;"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "                StylesPreviewGrid.Visibility \u003d Visibility.Visible;"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "                GotoSlideButton.IsEnabled \u003d true;"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "                LoadStylesButton.IsEnabled \u003d true;"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "        /// decide visibility and enability of variation stage\u0027s "
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdateVariationInterface(Collection\u003cImageItem\u003e list)"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "            if (list.Count !\u003d 0)"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "                VariationInstructions.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "                VariationInstructionsWhenNoSelectedSlide.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "                VariantsComboBox.IsEnabled \u003d true;"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "                VariantsColorPanel.IsEnabled \u003d true;"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "                VariantsSlider.IsEnabled \u003d true;"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "            else if (this.GetCurrentSlide() \u003d\u003d null)"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "                VariationInstructions.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "                VariationInstructionsWhenNoSelectedSlide.Visibility \u003d Visibility.Visible;"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "                VariantsComboBox.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "                VariantsColorPanel.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "                VariantsSlider.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "            else // select \u0027loading\u0027 image"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "                VariationInstructions.Visibility \u003d Visibility.Visible;"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "                VariationInstructionsWhenNoSelectedSlide.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "                VariantsComboBox.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "                VariantsColorPanel.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "                VariantsSlider.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "        /// decide visibility for instructions"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdatePreviewInterfaceWhenPreviewListChange(Collection\u003cImageItem\u003e list)"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "            if (list.Count !\u003d 0 || ImageSelectionInstructions.Visibility \u003d\u003d Visibility.Visible)"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "                PreviewInstructions.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "                PreviewInstructionsWhenNoSelectedSlide.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "            else if (this.GetCurrentSlide() \u003d\u003d null)"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "                PreviewInstructionsWhenNoSelectedSlide.Visibility \u003d Visibility.Visible;"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "                PreviewInstructions.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "                PreviewInstructions.Visibility \u003d Visibility.Visible;"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "                PreviewInstructionsWhenNoSelectedSlide.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool IsMouseOverTarget(Visual target, Point point)"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "            Rect bounds \u003d VisualTreeHelper.GetDescendantBounds(target);"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "            return bounds.Contains(point);"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "        private void OpenVariationsFlyout()"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "            Dispatcher.BeginInvoke(new Action(() \u003d\u003e"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "                if (IsVariationsFlyoutOpen)"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "                TranslateTransform left2RightToShowTranslate \u003d new TranslateTransform { X \u003d -StylesPreviewGrid.ActualWidth };"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "                StyleVariationsFlyout.RenderTransform \u003d left2RightToShowTranslate;"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "                StyleVariationsFlyout.Visibility \u003d Visibility.Visible;"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "                DoubleAnimation left2RightToShowAnimation \u003d new DoubleAnimation(-StylesPreviewGrid.ActualWidth, 0,"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "                    TimeSpan.FromMilliseconds(350))"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "                    EasingFunction \u003d new SineEase { EasingMode \u003d EasingMode.EaseInOut },"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "                    AccelerationRatio \u003d 0.5"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "                };"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "                left2RightToShowTranslate.BeginAnimation(TranslateTransform.XProperty, left2RightToShowAnimation);"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "                IsVariationsFlyoutOpen \u003d true;"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "            }));"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "        private void CloseVariationsFlyout()"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!IsVariationsFlyoutOpen)"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "            TranslateTransform right2LeftToHideTranslate \u003d new TranslateTransform();"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "            StyleVariationsFlyout.RenderTransform \u003d right2LeftToHideTranslate;"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "            DoubleAnimation right2LeftToHideAnimation \u003d new DoubleAnimation(0, -StyleVariationsFlyout.ActualWidth,"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "                TimeSpan.FromMilliseconds(350))"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "                EasingFunction \u003d new SineEase { EasingMode \u003d EasingMode.EaseInOut },"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "                AccelerationRatio \u003d 0.5"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "            right2LeftToHideAnimation.Completed +\u003d (sender, args) \u003d\u003e"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "                Dispatcher.BeginInvoke(new Action(() \u003d\u003e"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "                    StyleVariationsFlyout.Visibility \u003d Visibility.Collapsed;"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!IsDisplayDefaultPicture())"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "                        UpdatePreviewImages();"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "                    else"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "                        UpdatePreviewImages(CreateDefaultPictureItem());"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "                        UpdatePreviewStageControls();"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "                }));"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "            right2LeftToHideTranslate.BeginAnimation(TranslateTransform.XProperty, right2LeftToHideAnimation);"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "            IsVariationsFlyoutOpen \u003d false;"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "            ViewModel.CurrentVariantCategory.Text \u003d \"\";"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "            Logger.Log(\"Variation is closed\");"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdatePreviewImages(ImageItem source \u003d null, bool isEnteringPictureVariation \u003d false)"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!_isEnableUpdatePreview)"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "                if (IsVariationsFlyoutOpen \u0026\u0026 isEnteringPictureVariation)"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "                    Logger.Log(\"Entering pic aspect\");"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "                    // when it\u0027s to load the design for a default picture,"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "                    // and it\u0027s at the variation stage,"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "                    // directly jump to picture variation to select picture"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "                    int picVariationIndex \u003d ViewModel.VariantsCategory.IndexOf("
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "                        PictureSlidesLabText.VariantCategoryPicture);"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (VariantsComboBox.SelectedIndex !\u003d picVariationIndex)"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "                        VariantsComboBox.SelectedIndex \u003d picVariationIndex;"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "                    else"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "                        ViewModel.UpdatePreviewImages("
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "                        source ?? (ImageItem)ImageSelectionListBox.SelectedValue ?? CreateDefaultPictureItem(),"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentSlide().GetNativeSlide(),"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentPresentation().SlideWidth,"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentPresentation().SlideHeight);"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "                else if (IsDisplayDefaultPicture())"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "                    Logger.Log(\"In default pic mode\");"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "                    // if it\u0027s in Default Picture mode, allow"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "                    // updating preview images"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewModel.UpdatePreviewImages("
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "                        source ?? CreateDefaultPictureItem(),"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentSlide().GetNativeSlide(),"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentPresentation().SlideWidth,"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentPresentation().SlideHeight);"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "                    // else, try to update preview images using"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "                    // source or current selected picture."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "                    ViewModel.UpdatePreviewImages("
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "                        source ?? (ImageItem) ImageSelectionListBox.SelectedValue,"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentSlide().GetNativeSlide(),"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentPresentation().SlideWidth,"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.GetCurrentPresentation().SlideHeight);"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(e, \"UpdatePreviewImages\");"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "        private void CustomizeStyle(ImageItem source, List\u003cStyleOption\u003e givenStyles \u003d null,"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "            Dictionary\u003cstring, List\u003cStyleVariant\u003e\u003e givenVariants \u003d null)"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "                ViewModel.UpdateStyleVariationImagesWhenOpenFlyout("
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "                    source ?? (ImageItem) ImageSelectionListBox.SelectedValue,"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.GetCurrentSlide().GetNativeSlide(),"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.GetCurrentPresentation().SlideWidth,"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.GetCurrentPresentation().SlideHeight,"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "                    givenStyles, givenVariants);"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "                OpenVariationsFlyout();"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(e, \"CustomizeStyle\");"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "        private void LeaveDefaultPictureMode()"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "            _isDisplayDefaultPicture \u003d false;"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "        private void EnableLoadingStyleOnWindowActivate()"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "            _isAbleLoadingOnWindowActivate \u003d true;"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DisableLoadingStyleOnWindowActivate()"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "            _isAbleLoadingOnWindowActivate \u003d false;"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Execute action after time (in ms)"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"action\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"time\"\u003etime in ms\u003c/param\u003e"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SetTimeout(Action action, int time)"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "            DispatcherTimer timer \u003d new DispatcherTimer(DispatcherPriority.Render)"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "                Interval \u003d new TimeSpan(0, 0, 0, 0, time) // in ms"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "            timer.Tick +\u003d (o, args) \u003d\u003e"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "                timer.Stop();"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "                action();"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "            timer.Start();"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "        private void HandleUnhandledException(object sender, DispatcherUnhandledExceptionEventArgs e)"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "            Logger.LogException(e.Exception, sender.GetType() + \" \" + sender);"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "            ShowErrorMessageBox(\"Unexpected errors happened!\", e.Exception);"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "        private void HandleUnhandledException(object sender, UnhandledExceptionEventArgs e)"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "            Logger.LogException(e.ExceptionObject as Exception, sender.GetType() + \" \" + sender);"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "            ShowErrorMessageBox(\"Unexpected errors happened!\", e.ExceptionObject as Exception);"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "        // check PSL window is really closing or not"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool IsDisposed"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "                if (IsClosing)"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "                System.Reflection.PropertyInfo propertyInfo \u003d typeof(Window).GetProperty(\"IsDisposed\", "
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "                return (bool) propertyInfo.GetValue(this, null);"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 26,
      "-": 1327
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/PositionsLab/PositionsPaneWPF.xaml.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Diagnostics.CodeAnalysis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Controls.Primitives;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Input;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.PositionsLab.Views;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Views;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "using PPExtraEventHelper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "using Office \u003d Microsoft.Office.Core;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.PositionsLab"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    [SuppressMessage(\"Microsoft.StyleCop.CSharp.OrderingRules\", \"SA1202:ElementsMustBeOrderedByAccess\", Justification \u003d \"To refactor to partials\")]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /// Interaction logic for PositionsPaneWPF.xaml"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public partial class PositionsPaneWpf"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        private PositionsDistributeGridDialog _positionsDistributeGridDialog;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        #pragma warning disable 0618"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        private static LMouseUpListener _leftMouseUpListener;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        private static LMouseDownListener _leftMouseDownListener;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        private static System.Windows.Threading.DispatcherTimer _dispatcherTimer \u003d new System.Windows.Threading.DispatcherTimer();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //Variable for preview"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool _previewIsExecuted \u003d false;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        private delegate void PreviewCallBack();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        private PreviewCallBack _previewCallBack;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private static Dictionary\u003cint, PositionShapeProperties\u003e allShapePos \u003d new Dictionary\u003cint, PositionShapeProperties\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        //Variables for lock axis"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int Left \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int Top \u003d 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        private static List\u003cShape\u003e _shapesToBeMoved;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        private static System.Drawing.Point _initialMousePos;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        private float[,] _initialPos;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //Variables for rotation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        private const float RefpointRadius \u003d 10;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        private static Shape _refPoint;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        private static List\u003cShape\u003e _shapesToBeRotated \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        private static List\u003cShape\u003e _allShapesInSlide \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        private static System.Drawing.Point _prevMousePos;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        private static ShapeRange _selectedRange;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        //Variables for key binding"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int CtrlProportion \u003d 5;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        public PositionsPaneWpf()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabMain.InitPositionsLab();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            InitializeComponent();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            InitializeHotKeys();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            _dispatcherTimer.Interval \u003d TimeSpan.FromMilliseconds(10);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            Focusable \u003d true;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        private void InitializeHotKeys()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            Dictionary\u003cToggleButton, Action\u003cbool, bool\u003e\u003e buttonActionMapping \u003d new Dictionary\u003cToggleButton, Action\u003cbool, bool\u003e\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            buttonActionMapping.Add(rotationButton, RotateSlightly);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            buttonActionMapping.Add(duplicateRotationButton, RotateSlightly);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cNative.VirtualKey, bool\u003e bindHotKeys \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                (key, direction) \u003d\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                    PPKeyboard.AddKeydownAction(key, RunOnlyWhenActivated(buttonActionMapping, direction, true));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    PPKeyboard.AddKeydownAction(key, RunOnlyWhenActivated(buttonActionMapping, direction, false), ctrl: true);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                };"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            bindHotKeys(Native.VirtualKey.VK_LEFT, false);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            bindHotKeys(Native.VirtualKey.VK_UP, false);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            bindHotKeys(Native.VirtualKey.VK_RIGHT, true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            bindHotKeys(Native.VirtualKey.VK_DOWN, true);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private Func\u003cbool\u003e RunOnlyWhenActivated(Dictionary\u003cToggleButton, Action\u003cbool, bool\u003e\u003e buttonActionMapping, bool direction, bool isLarge)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return () \u003d\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                Microsoft.Office.Tools.CustomTaskPane positionsPane \u003d this.GetTaskPane(typeof(PositionsPane));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                if (positionsPane \u003d\u003d null || !positionsPane.Visible)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                foreach (KeyValuePair\u003cToggleButton, Action\u003cbool, bool\u003e\u003e mapping in buttonActionMapping)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    ToggleButton button \u003d mapping.Key;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                    Action\u003cbool, bool\u003e action \u003d mapping.Value;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                    if ((bool)button.IsChecked)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                        action(direction, isLarge);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                        return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        private void RotateSlightly(bool isClockwise, bool isLarge)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            System.Drawing.PointF origin \u003d ShapeUtil.GetCenterPoint(_refPoint);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            float angle \u003d (isClockwise) ? 1f : -1f;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isLarge)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                angle *\u003d CtrlProportion;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape currentShape in _shapesToBeRotated)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                PositionsLabMain.Rotate(currentShape, origin, angle, PositionsLabSettings.ReorientShapeOrientation);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Click Behaviour"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Align"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AlignLeftButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange\u003e positionsAction \u003d shapes \u003d\u003e PositionsLabMain.AlignLeft(shapes);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, false, true);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AlignRightButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideWidth \u003d this.GetCurrentPresentation().SlideWidth;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange, float\u003e positionsAction \u003d (shapes, width) \u003d\u003e PositionsLabMain.AlignRight(shapes, width);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, slideWidth, false);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AlignTopButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange\u003e positionsAction \u003d shapes \u003d\u003e PositionsLabMain.AlignTop(shapes);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, false, true);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AlignBottomButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideHeight \u003d this.GetCurrentPresentation().SlideHeight;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange, float\u003e positionsAction \u003d (shapes, height) \u003d\u003e PositionsLabMain.AlignBottom(shapes, height);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, slideHeight, false);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AlignHorizontalCenterButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideHeight \u003d this.GetCurrentPresentation().SlideHeight;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange, float\u003e positionsAction \u003d (shapes, height) \u003d\u003e PositionsLabMain.AlignHorizontalCenter(shapes, height);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, slideHeight, false);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AlignVerticalCenterButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideWidth \u003d this.GetCurrentPresentation().SlideWidth;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange, float\u003e positionsAction \u003d (shapes, width) \u003d\u003e PositionsLabMain.AlignVerticalCenter(shapes, width);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, slideWidth, false);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AlignCenterButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideHeight \u003d this.GetCurrentPresentation().SlideHeight;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideWidth \u003d this.GetCurrentPresentation().SlideWidth;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange, float, float\u003e positionsAction \u003d (shapes, height, width) \u003d\u003e PositionsLabMain.AlignCenter(shapes, height, width);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, slideHeight, slideWidth, false);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AlignRadialButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.AlignRadial(shapes);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, false, isConvertPPShape: false);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Adjoin"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AdjoinHorizontalButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabMain.AdjoinWithoutAligning();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cPPShape\u003e\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.AdjoinHorizontal(shapes);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, false);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AdjoinHorizontalWithAlignButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabMain.AdjoinWithAligning();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cPPShape\u003e\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.AdjoinHorizontal(shapes);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, false);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AdjoinVerticalButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabMain.AdjoinWithoutAligning();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cPPShape\u003e\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.AdjoinVertical(shapes);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, false);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AdjoinVerticalWithAlignButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabMain.AdjoinWithAligning();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cPPShape\u003e\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.AdjoinVertical(shapes);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, false);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Distribute"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DistributeHorizontalButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideWidth \u003d this.GetCurrentPresentation().SlideWidth;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cPPShape\u003e, float\u003e positionsAction \u003d (shapes, width) \u003d\u003e PositionsLabMain.DistributeHorizontal(shapes, width);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, slideWidth, false);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DistributeVerticalButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideHeight \u003d this.GetCurrentPresentation().SlideHeight;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cPPShape\u003e, float\u003e positionsAction \u003d (shapes, height) \u003d\u003e PositionsLabMain.DistributeVertical(shapes, height);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, slideHeight, false);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DistributeCenterButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideWidth \u003d this.GetCurrentPresentation().SlideWidth;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideHeight \u003d this.GetCurrentPresentation().SlideHeight;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cPPShape\u003e, float, float\u003e positionsAction \u003d (shapes, width, height) \u003d\u003e PositionsLabMain.DistributeCenter(shapes, width, height);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, slideWidth, slideHeight, false);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DistributeGridButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            if (this.GetCurrentSelection().Type !\u003d PpSelectionType.ppSelectionShapes)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                ShowErrorMessageBox(PositionsLabText.ErrorNoSelection);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapeRange selectedShapes \u003d this.GetCurrentSelection().ShapeRange;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                int numShapesSelected \u003d selectedShapes.Count;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                int colLength \u003d (int)Math.Ceiling(Math.Sqrt(numShapesSelected));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "                int rowLength \u003d (int)Math.Ceiling((double)numShapesSelected / colLength);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                _positionsDistributeGridDialog \u003d new PositionsDistributeGridDialog(numShapesSelected, rowLength, colLength,"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                    PositionsLabSettings.DistributeGridAlignment,"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                    PositionsLabSettings.GridMarginTop,"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                    PositionsLabSettings.GridMarginBottom,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                    PositionsLabSettings.GridMarginLeft,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                    PositionsLabSettings.GridMarginRight);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                _positionsDistributeGridDialog.DialogConfirmedHandler +\u003d OnDistributeGridDialogConfirmed;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                _positionsDistributeGridDialog.ShowDialog();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception ex)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                ShowErrorMessageBox(ex.Message, ex);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            }  "
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        private void OnDistributeGridDialogConfirmed(int rowLength, int colLength,"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PositionsLabSettings.GridAlignment gridAlignment,"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                                        float gridMarginTop, float gridMarginBottom,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "                                        float gridMarginLeft, float gridMarginRight)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabSettings.DistributeGridAlignment \u003d gridAlignment;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabSettings.GridMarginTop \u003d gridMarginTop;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabSettings.GridMarginBottom \u003d gridMarginBottom;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabSettings.GridMarginLeft \u003d gridMarginLeft;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabSettings.GridMarginRight \u003d gridMarginRight;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecuteDistributeGrid(rowLength, colLength);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DistributeRadialButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.DistributeRadial(shapes);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, false, isConvertPPShape: false);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Reorder"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SwapPositionsButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cPPShape\u003e, bool\u003e positionsAction \u003d (shapes, isPreview) \u003d\u003e PositionsLabMain.Swap(shapes, isPreview);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, false, false);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Adjustment"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        private void RotationButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            bool noShapesSelected \u003d this.GetCurrentSelection().Type !\u003d PpSelectionType.ppSelectionShapes;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "            ToggleButton button \u003d (ToggleButton)sender;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            if (noShapesSelected)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                button.IsChecked \u003d false;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                ShowErrorMessageBox(PositionsLabText.ErrorFewerThanTwoSelection);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange selectedShapes \u003d this.GetCurrentSelection().ShapeRange;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedShapes.Count \u003c\u003d 1)"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "                button.IsChecked \u003d false;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "                ShowErrorMessageBox(PositionsLabText.ErrorFewerThanTwoSelection);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            ClearAllEventHandlers();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            Models.PowerPointSlide currentSlide \u003d this.GetCurrentSlide();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            _refPoint \u003d selectedShapes[1];"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            _shapesToBeRotated \u003d ConvertShapeRangeToShapeList(selectedShapes, 2);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            _allShapesInSlide \u003d ConvertShapesToShapeList(currentSlide.Shapes);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "            _selectedRange \u003d selectedShapes;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            StartRotationMode();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            // for key binding to work when select shapes first, then open panel and click button"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            PPKeyboard.SetSlideViewWindowFocused();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        private void RotationHandler(object sender, EventArgs e)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            //Remove dragging control of user"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            this.GetCurrentSelection().Unselect();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "            System.Drawing.Point p \u003d System.Windows.Forms.Control.MousePosition;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            float prevAngle \u003d (float)PositionsLabMain.AngleBetweenTwoPoints(ConvertSlidePointToScreenPoint(ShapeUtil.GetCenterPoint(_refPoint)), _prevMousePos);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "            float angle \u003d (float)PositionsLabMain.AngleBetweenTwoPoints(ConvertSlidePointToScreenPoint(ShapeUtil.GetCenterPoint(_refPoint)), p) - prevAngle;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "            System.Drawing.PointF origin \u003d ShapeUtil.GetCenterPoint(_refPoint);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape currentShape in _shapesToBeRotated)"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "                PositionsLabMain.Rotate(currentShape, origin, angle, PositionsLabSettings.ReorientShapeOrientation);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            _prevMousePos \u003d p;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        void _leftMouseUpListener_Rotation(object sender, SysMouseEventInfo e)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "                _dispatcherTimer.Stop();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "                _selectedRange.Select();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception ex)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "                rotationButton.IsChecked \u003d false;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "                duplicateRotationButton.IsChecked \u003d false;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(ex, \"Rotation\");"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        void _leftMouseDownListener_Rotation(object sender, SysMouseEventInfo e)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "            ToggleButton button \u003d ((bool)rotationButton.IsChecked) ? rotationButton :"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "                             ((bool)duplicateRotationButton.IsChecked) ? duplicateRotationButton"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                       : null;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            try"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                if (button \u003d\u003d null || button.IsMouseOver)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "                    DisableRotationMode();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "                System.Drawing.Point p \u003d System.Windows.Forms.Control.MousePosition;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape selectedShape \u003d GetShapeDirectlyBelowMousePos(_allShapesInSlide, p);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "                if (selectedShape \u003d\u003d null)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "                    DisableRotationMode();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "                    button.IsChecked \u003d false;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "                bool isShapeToBeRotated \u003d _shapesToBeRotated.Contains(selectedShape);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "                bool isRefPoint \u003d _refPoint.Id \u003d\u003d selectedShape.Id;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!isShapeToBeRotated \u0026\u0026 !isRefPoint)"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "                    DisableRotationMode();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "                    button.IsChecked \u003d false;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "                this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isRefPoint)"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.GetCurrentSelection().Unselect();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "                if (button \u003d\u003d duplicateRotationButton)"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "                    foreach (Shape currentShape in _shapesToBeRotated)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "                        Shape duplicatedShape \u003d currentShape.Duplicate()[1];"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "                        duplicatedShape.Left -\u003d 12;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "                        duplicatedShape.Top -\u003d 12;"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "                        ShapeUtil.MoveZToJustBehind(duplicatedShape, currentShape);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "                _prevMousePos \u003d p;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "                _dispatcherTimer.Start();"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception ex)"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(ex, \"Rotation\");"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                DisableRotationMode();"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                button.IsChecked \u003d false;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        private void LockAxisButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "            bool noShapesSelected \u003d this.GetCurrentSelection().Type !\u003d PpSelectionType.ppSelectionShapes;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "            if (noShapesSelected)"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "                lockAxisButton.IsChecked \u003d false;"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "                ShowErrorMessageBox(PositionsLabText.ErrorNoSelection);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange selectedShapes \u003d this.GetCurrentSelection().ShapeRange;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "            ClearAllEventHandlers();"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "            Models.PowerPointSlide currentSlide \u003d this.GetCurrentSlide();"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "            _shapesToBeMoved \u003d ConvertShapeRangeToShapeList(selectedShapes, 1);"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "            _allShapesInSlide \u003d ConvertShapesToShapeList(currentSlide.Shapes);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "            _selectedRange \u003d selectedShapes;"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "            StartLockAxisMode();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "        private void LockAxisHandler(object sender, EventArgs e)"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "            //Remove dragging control of user"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "            this.GetCurrentSelection().Unselect();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "            System.Drawing.Point currentMousePos \u003d System.Windows.Forms.Control.MousePosition;"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "            float diffX \u003d currentMousePos.X - _initialMousePos.X;"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "            float diffY \u003d currentMousePos.Y - _initialMousePos.Y;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c _shapesToBeMoved.Count; i++)"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape s \u003d _shapesToBeMoved[i];"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "                if (Math.Abs(diffX) \u003e Math.Abs(diffY))"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "                    s.Left \u003d _initialPos[i, Left] + diffX;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "                    s.Top \u003d _initialPos[i, Top];"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "                    s.Left \u003d _initialPos[i, Left];"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "                    s.Top \u003d _initialPos[i, Top] + diffY;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        void _leftMouseUpListener_LockAxis(object sender, SysMouseEventInfo e)"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "            _dispatcherTimer.Stop();"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "            _selectedRange.Select();"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "        void _leftMouseDownListener_LockAxis(object sender, SysMouseEventInfo e)"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "                if (lockAxisButton.IsMouseOver)"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "                    DisableLockAxisMode();"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "                System.Drawing.Point p \u003d System.Windows.Forms.Control.MousePosition;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "                Models.PowerPointSlide currentSlide \u003d this.GetCurrentSlide();"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape selectedShape \u003d GetShapeDirectlyBelowMousePos(_allShapesInSlide, p);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "                if (selectedShape \u003d\u003d null)"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "                    DisableLockAxisMode();"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "                    lockAxisButton.IsChecked \u003d false;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "                bool isShapeToBeMoved \u003d _shapesToBeMoved.Contains(selectedShape);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!isShapeToBeMoved)"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "                    DisableLockAxisMode();"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "                    lockAxisButton.IsChecked \u003d false;"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "                this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "                _initialPos \u003d new float[_shapesToBeMoved.Count, 2];"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c _shapesToBeMoved.Count; i++)"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "                    Shape s \u003d _shapesToBeMoved[i];"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "                    _initialPos[i, Left] \u003d s.Left;"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "                    _initialPos[i, Top] \u003d s.Top;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "                _initialMousePos \u003d p;"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "                _dispatcherTimer.Start();"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception ex)"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(ex, \"LockAxis\");"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Snap"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SnapHorizontalButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cShape\u003e\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.SnapHorizontal(shapes);"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, false);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SnapVerticalButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cShape\u003e\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.SnapVertical(shapes);"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, false);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SnapAwayButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cShape\u003e\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.SnapAway(shapes);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "            ExecutePositionsAction(positionsAction, false);"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Preview Behaviour"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AlignLeftButton_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange\u003e positionsAction \u003d shapes \u003d\u003e PositionsLabMain.AlignLeft(shapes);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, true, true);"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AlignRightButton_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideWidth \u003d this.GetCurrentPresentation().SlideWidth;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange, float\u003e positionsAction \u003d (shapes, width) \u003d\u003e PositionsLabMain.AlignRight(shapes, width);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, slideWidth, true);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AlignTopButton_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange\u003e positionsAction \u003d shapes \u003d\u003e PositionsLabMain.AlignTop(shapes);"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, true, true);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AlignBottomButton_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideHeight \u003d this.GetCurrentPresentation().SlideHeight;"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange, float\u003e positionsAction \u003d (shapes, height) \u003d\u003e PositionsLabMain.AlignBottom(shapes, height);"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, slideHeight, true);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AlignHorizontalCenterButton_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideHeight \u003d this.GetCurrentPresentation().SlideHeight;"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange, float\u003e positionsAction \u003d (shapes, height) \u003d\u003e PositionsLabMain.AlignHorizontalCenter(shapes, height);"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, slideHeight, true);"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AlignVerticalCenterButton_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideWidth \u003d this.GetCurrentPresentation().SlideWidth;"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange, float\u003e positionsAction \u003d (shapes, width) \u003d\u003e PositionsLabMain.AlignVerticalCenter(shapes, width);"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, slideWidth, true);"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AlignCenterButton_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideHeight \u003d this.GetCurrentPresentation().SlideHeight;"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideWidth \u003d this.GetCurrentPresentation().SlideWidth;"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange, float, float\u003e positionsAction \u003d (shapes, height, width) \u003d\u003e PositionsLabMain.AlignCenter(shapes, height, width);"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, slideHeight, slideWidth, true);"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AlignRadialButton_MouseEnter(object sender, MouseEventArgs e)"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.AlignRadial(shapes);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, true, isConvertPPShape: false);"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AdjoinHorizontalButton_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabMain.AdjoinWithoutAligning();"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cPPShape\u003e\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.AdjoinHorizontal(shapes);"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, true);"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AdjoinHorizontalWithAlignButton_MouseEnter(object sender, MouseEventArgs e)"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabMain.AdjoinWithAligning();"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cPPShape\u003e\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.AdjoinHorizontal(shapes);"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, true);"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AdjoinVerticalButton_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabMain.AdjoinWithoutAligning();"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cPPShape\u003e\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.AdjoinVertical(shapes);"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, true);"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AdjoinVerticalWithAlignButton_MouseEnter(object sender, MouseEventArgs e)"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabMain.AdjoinWithAligning();"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cPPShape\u003e\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.AdjoinVertical(shapes);"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, true);"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DistributeHorizontalButton_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideWidth \u003d this.GetCurrentPresentation().SlideWidth;"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cPPShape\u003e, float\u003e positionsAction \u003d (shapes, width) \u003d\u003e PositionsLabMain.DistributeHorizontal(shapes, width);"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, slideWidth, true);"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DistributeVerticalButton_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideHeight \u003d this.GetCurrentPresentation().SlideHeight;"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cPPShape\u003e, float\u003e positionsAction \u003d (shapes, height) \u003d\u003e PositionsLabMain.DistributeVertical(shapes, height);"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, slideHeight, true);"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DistributeCenterButton_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideWidth \u003d this.GetCurrentPresentation().SlideWidth;"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "            float slideHeight \u003d this.GetCurrentPresentation().SlideHeight;"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cPPShape\u003e, float, float\u003e positionsAction \u003d (shapes, width, height) \u003d\u003e PositionsLabMain.DistributeCenter(shapes, width, height);"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, slideWidth, slideHeight, true);"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DistributeRadialButton_MouseEnter(object sender, MouseEventArgs e)"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cShapeRange\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.DistributeRadial(shapes);"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, true, isConvertPPShape: false);"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SwapPositionsButton_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cPPShape\u003e, bool\u003e positionsAction \u003d (shapes, isPreview) \u003d\u003e PositionsLabMain.Swap(shapes, isPreview);"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, true, true);"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SnapHorizontalButton_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cShape\u003e\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.SnapHorizontal(shapes);"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, true);"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SnapVerticalButton_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cShape\u003e\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.SnapVertical(shapes);"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, true);"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SnapAwayButton_MouseEnter(object sender, System.Windows.Input.MouseEventArgs e)"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "            Action\u003cList\u003cShape\u003e\u003e positionsAction \u003d (shapes) \u003d\u003e PositionsLabMain.SnapAway(shapes);"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d delegate"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "                ExecutePositionsAction(positionsAction, true);"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "            PreviewHandler();"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Helper"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "        private Shape AddReferencePoint(Shapes shapes, float left, float top)"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "            return shapes.AddShape(Office.MsoAutoShapeType.msoShapeOval, left, top, RefpointRadius, RefpointRadius);"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "        private float PointsToScreenPixelsX(float point)"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.GetCurrentWindow().PointsToScreenPixelsX(point);"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "        private float PointsToScreenPixelsY(float point)"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.GetCurrentWindow().PointsToScreenPixelsY(point);"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool IsPointWithinShape(Shape shape, System.Drawing.Point p)"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "            float epsilon \u003d 0.00001f;"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "            System.Drawing.PointF centerPoint \u003d ConvertSlidePointToScreenPoint(ShapeUtil.GetCenterPoint(shape));"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "            System.Drawing.PointF rotatedMousePos \u003d CommonUtil.RotatePoint(p, centerPoint, -shape.Rotation);"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "            float x1 \u003d PointsToScreenPixelsX(shape.Left);"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "            float y1 \u003d PointsToScreenPixelsY(shape.Top);"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "            float x2 \u003d PointsToScreenPixelsX(shape.Left + shape.Width);"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "            float y2 \u003d PointsToScreenPixelsY(shape.Top + shape.Height);"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "            // Expand the bounding box with a standard padding"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "            // NOTE: PowerPoint transforms the mouse cursor when entering shapes before it actually"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "            // enters the shape. To account for that, add this extra \u0027padding\u0027"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "            // Testing reveals that the current value (in PowerPoint 2013) is 6px"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "            // http://stackoverflow.com/questions/22815084/catch-mouse-events-in-powerpoint-designer-through-vsto"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "            x1 -\u003d 6;"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "            x2 +\u003d 6;"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "            y1 -\u003d 6;"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "            y2 +\u003d 6;"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "            return (x1 - epsilon \u003c\u003d rotatedMousePos.X \u0026\u0026 rotatedMousePos.X  \u003c\u003d x2 + epsilon) \u0026\u0026 (y1 - epsilon \u003c\u003d rotatedMousePos.Y \u0026\u0026 rotatedMousePos.Y \u003c\u003d y2 + epsilon);"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "        private Shape GetShapeDirectlyBelowMousePos(List\u003cShape\u003e shapes, System.Drawing.Point p)"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape aShape \u003d null;"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape s in shapes)"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "                if (IsPointWithinShape(s, p))"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (aShape \u003d\u003d null || aShape.ZOrderPosition \u003c s.ZOrderPosition)"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "                        aShape \u003d s;"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "            return aShape;"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "        private List\u003cPPShape\u003e ConvertShapeRangeToPPShapeList (ShapeRange range, int index)"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPPShape\u003e shapes \u003d new List\u003cPPShape\u003e();"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d index; i \u003c\u003d range.Count; i++)"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape s \u003d range[i];"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "                if (s.Type.Equals(Office.MsoShapeType.msoPicture))"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapes.Add(new PPShape(range[i], false));"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapes.Add(new PPShape(range[i]));"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "            return shapes;"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "        private List\u003cShape\u003e ConvertShapeRangeToShapeList(ShapeRange range, int index)"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cShape\u003e shapes \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d index; i \u003c\u003d range.Count; i++)"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "                shapes.Add(range[i]);"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "            return shapes;"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "        private List\u003cShape\u003e ConvertShapesToShapeList(Shapes shapes)"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cShape\u003e listOfShapes \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape s in shapes)"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "                listOfShapes.Add(s);"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "            return listOfShapes;"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "        private System.Drawing.PointF ConvertSlidePointToScreenPoint(System.Drawing.PointF pt)"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "            pt.X \u003d PointsToScreenPixelsX(pt.X);"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "            pt.Y \u003d PointsToScreenPixelsY(pt.Y);"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "            return pt;"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SelectShapes(List\u003cShape\u003e shapes)"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape s in shapes)"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "                s.Select(Office.MsoTriState.msoFalse);"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Settings Dialog"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AlignSettingsButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabSettings.ShowAlignSettingsDialog();"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DistributeSettingsButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabSettings.ShowDistributeSettingsDialog();"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ReorderSettingsButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabSettings.ShowReorderSettingsDialog();"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ReorientSettingsButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsLabSettings.ShowReorientSettingsDialog();"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void ClearAllEventHandlers()"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_leftMouseUpListener !\u003d null)"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "                _leftMouseUpListener.Close();"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_leftMouseDownListener !\u003d null)"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "                _leftMouseDownListener.Close();"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "            _dispatcherTimer.Stop();"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "            _dispatcherTimer \u003d new System.Windows.Threading.DispatcherTimer();"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "        private void StartRotationMode()"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "            _dispatcherTimer.Tick +\u003d RotationHandler;"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "            _leftMouseUpListener \u003d new LMouseUpListener();"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "            _leftMouseUpListener.LButtonUpClicked +\u003d _leftMouseUpListener_Rotation;"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "            _leftMouseDownListener \u003d new LMouseDownListener();"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "            _leftMouseDownListener.LButtonDownClicked +\u003d _leftMouseDownListener_Rotation;"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DisableRotationMode()"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "            ClearAllEventHandlers();"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "            _selectedRange \u003d null;"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "            _refPoint \u003d null;"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "            _shapesToBeRotated \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "            _allShapesInSlide \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "            _prevMousePos \u003d new System.Drawing.Point();"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "        private void StartLockAxisMode()"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "            _dispatcherTimer.Tick +\u003d LockAxisHandler;"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "            _leftMouseUpListener \u003d new LMouseUpListener();"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "            _leftMouseUpListener.LButtonUpClicked +\u003d _leftMouseUpListener_LockAxis;"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "            _leftMouseDownListener \u003d new LMouseDownListener();"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "            _leftMouseDownListener.LButtonDownClicked +\u003d _leftMouseDownListener_LockAxis;"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DisableLockAxisMode()"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "            ClearAllEventHandlers();"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "            _selectedRange \u003d null;"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "            _shapesToBeMoved \u003d null;"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "            _initialMousePos \u003d new System.Drawing.Point();"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Error Handling"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "        public void ShowErrorMessageBox(string content, Exception exception \u003d null)"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "            if (exception \u003d\u003d null)"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(content, PositionsLabText.ErrorDialogTitle);"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "            string errorMessage \u003d GetErrorMessage(exception.Message);"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!string.Equals(errorMessage, PositionsLabText.ErrorUndefined, StringComparison.Ordinal))"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(content, PositionsLabText.ErrorDialogTitle);"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "                ErrorDialogBox.ShowDialog(PositionsLabText.ErrorDialogTitle, content, exception);"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "        private string GetErrorMessage(string errorMsg)"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (errorMsg)"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "                case PositionsLabText.ErrorNoSelection:"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "                    return PositionsLabText.ErrorNoSelection;"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "                case PositionsLabText.ErrorFewerThanTwoSelection:"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "                    return PositionsLabText.ErrorFewerThanTwoSelection;"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "                case PositionsLabText.ErrorFewerThanThreeSelection:"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "                    return PositionsLabText.ErrorFewerThanThreeSelection;"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "                case PositionsLabText.ErrorFewerThanFourSelection:"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "                    return PositionsLabText.ErrorFewerThanFourSelection;"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "                case PositionsLabText.ErrorFunctionNotSupportedForWithinShapes:"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "                    return PositionsLabText.ErrorFunctionNotSupportedForWithinShapes;"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "                case PositionsLabText.ErrorFunctionNotSupportedForSlide:"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "                    return PositionsLabText.ErrorFunctionNotSupportedForSlide;"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "                case PositionsLabText.ErrorFunctionNotSupportedForOverlapRefShapeCenter:"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "                    return PositionsLabText.ErrorFunctionNotSupportedForOverlapRefShapeCenter;"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "                    return PositionsLabText.ErrorUndefined;"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "        private void IgnoreExceptionThrown() { }"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Helper"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "        // returns true if selection is valid"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool HandleInvalidSelection(bool isPreview, Selection selection)"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!ShapeUtil.IsSelectionShape(selection))"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!isPreview)"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "                    ShowErrorMessageBox(PositionsLabText.ErrorNoSelection);"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "        // Align left and top, Align/Distribute radial"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "        public void ExecutePositionsAction(Action\u003cShapeRange\u003e positionsAction, bool isPreview, bool isConvertPPShape)"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "            Selection selection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!HandleInvalidSelection(isPreview, selection))"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid selection!"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange simulatedShapes \u003d null;"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapeRange selectedShapes \u003d selection.ShapeRange;"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isPreview)"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "                    SaveSelectedShapePositions(selectedShapes, allShapePos);"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "                    UndoPreview();"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "                    _previewCallBack \u003d null;"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "                // selectedShapes.Duplicate() may return a list with reversed sequence  "
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "                simulatedShapes \u003d DuplicateShapes(selectedShapes); "
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "                if (PositionsLabSettings.AlignReference \u003d\u003d PositionsLabSettings.AlignReferenceObject.PowerpointDefaults)"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "                    positionsAction.Invoke(selectedShapes);"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "                else if (isConvertPPShape)"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "                    List\u003cPPShape\u003e simulatedPPShapes \u003d ConvertShapeRangeToPPShapeList(simulatedShapes, 1);"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "                    float[,] initialPositions \u003d SaveOriginalPositions(simulatedPPShapes);"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "                    positionsAction.Invoke(simulatedShapes);"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncShapes(selectedShapes, simulatedShapes, initialPositions);"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "                    positionsAction.Invoke(simulatedShapes);"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncShapes(selectedShapes, simulatedShapes);"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isPreview)"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "                    _previewIsExecuted \u003d true;"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception ex)"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!isPreview)"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "                    ShowErrorMessageBox(ex.Message, ex);"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "            finally"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "                if (simulatedShapes !\u003d null)"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "                    try"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "                        simulatedShapes.Delete();"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "                        GC.Collect();"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "                    // Catch corrupted shapes"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "                    catch (System.Runtime.InteropServices.COMException)"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "                        // Remove all simulated shapes manually"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "                        for (int i \u003d 0; i \u003c simulatedShapes.Count; i++)"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "                            // This method to remove duplicated shapes might fail for non-corrupted shapes when mixing good/bad shapes"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "                            if (this.GetCurrentSlide().Shapes[1].Name.Contains(\"_Copy\"))"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "                            {"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "                                this.GetCurrentSlide().Shapes[1].Delete();"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "                            else"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "                            {"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "                        // Remove any outlier extra shapes not deleted previously"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "                        // Only triggered for cases where Distribute is called for cases consisting of both"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "                        // corrupted and non-corrupted shapes"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "                        try"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "                            this.GetCurrentSelection().Delete();"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "                        catch (System.Runtime.InteropServices.COMException)"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "                            // Exception will trigger whenever Distribute is applied to cases where all shapes are "
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "                            // either corrupted or non-corrupted, which is already handled before this try-catch block"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "                        // Ask user to undo the operation to remove any excess duplicates"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "                        MessageBox.Show(PositionsLabText.ErrorCorruptedSelection, PositionsLabText.ErrorCorruptedShapesTitle);"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "        // Align right, bottom, vertical center, horizontal center"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "        public void ExecutePositionsAction(Action\u003cShapeRange, float\u003e positionsAction, float dimension, bool isPreview)"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "            Selection selection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!HandleInvalidSelection(isPreview, selection))"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid selection!"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange simulatedShapes \u003d null;"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapeRange selectedShapes \u003d selection.ShapeRange;"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isPreview)"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "                    SaveSelectedShapePositions(selectedShapes, allShapePos);"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "                    UndoPreview();"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "                    _previewCallBack \u003d null;"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "                simulatedShapes \u003d DuplicateShapes(selectedShapes);"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "                if (PositionsLabSettings.AlignReference \u003d\u003d PositionsLabSettings.AlignReferenceObject.PowerpointDefaults)"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "                    positionsAction.Invoke(selectedShapes, dimension);"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "                    List\u003cPPShape\u003e simulatedPPShapes \u003d ConvertShapeRangeToPPShapeList(simulatedShapes, 1);"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "                    float[,] initialPositions \u003d SaveOriginalPositions(simulatedPPShapes);"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "                    positionsAction.Invoke(simulatedShapes, dimension);"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncShapes(selectedShapes, simulatedShapes, initialPositions);"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isPreview)"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "                    _previewIsExecuted \u003d true;"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception ex)"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!isPreview)"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "                    ShowErrorMessageBox(ex.Message, ex);"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "            finally"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "                if (simulatedShapes !\u003d null)"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "                    simulatedShapes.Delete();"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "                    GC.Collect();"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "        // Align center"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "        public void ExecutePositionsAction(Action\u003cShapeRange, float, float\u003e positionsAction, float dimension1, float dimension2, bool isPreview)"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "            Selection selection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!HandleInvalidSelection(isPreview, selection))"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid selection!"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange simulatedShapes \u003d null;"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapeRange selectedShapes \u003d selection.ShapeRange;"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isPreview)"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "                    SaveSelectedShapePositions(selectedShapes, allShapePos);"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "                    UndoPreview();"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "                    _previewCallBack \u003d null;"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "                simulatedShapes \u003d DuplicateShapes(selectedShapes);"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "                simulatedShapes.Select();"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "                if (PositionsLabSettings.AlignReference \u003d\u003d PositionsLabSettings.AlignReferenceObject.PowerpointDefaults)"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "                    positionsAction.Invoke(selectedShapes, dimension1, dimension2);"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "                    List\u003cPPShape\u003e simulatedPPShapes \u003d ConvertShapeRangeToPPShapeList(simulatedShapes, 1);"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "                    float[,] initialPositions \u003d SaveOriginalPositions(simulatedPPShapes);"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "                    positionsAction.Invoke(simulatedShapes, dimension1, dimension2);"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncShapes(selectedShapes, simulatedShapes, initialPositions);"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isPreview)"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "                    _previewIsExecuted \u003d true;"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception ex)"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!isPreview)"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "                    ShowErrorMessageBox(ex.Message, ex);"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "            finally"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "                if (simulatedShapes !\u003d null)"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "                    simulatedShapes.Delete();"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "                    GC.Collect();"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "        // Adjoin operations"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "        public void ExecutePositionsAction(Action\u003cList\u003cPPShape\u003e\u003e positionsAction, bool isPreview)"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "            // Need to run the action 2 times because of the nature of PowerPoint default operations"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "            // This has been determined via manual testing"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c 2; i++)"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "                Selection selection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!HandleInvalidSelection(isPreview, selection))"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "                    // invalid selection!"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapeRange simulatedShapes \u003d null;"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "                try"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "                    ShapeRange selectedShapes \u003d selection.ShapeRange;"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (isPreview)"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "                        SaveSelectedShapePositions(selectedShapes, allShapePos);"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "                    else"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "                        UndoPreview();"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "                        _previewCallBack \u003d null;"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "                    simulatedShapes \u003d selectedShapes.Duplicate();"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "                    List\u003cPPShape\u003e simulatedPPShapes \u003d ConvertShapeRangeToPPShapeList(simulatedShapes, 1);"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "                    float[,] initialPositions \u003d SaveOriginalPositions(simulatedPPShapes);"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "                    positionsAction.Invoke(simulatedPPShapes);"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncShapes(selectedShapes, simulatedPPShapes, initialPositions);"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (isPreview)"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "                        _previewIsExecuted \u003d true;"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "                catch (Exception ex)"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!isPreview)"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "                        ShowErrorMessageBox(ex.Message, ex);"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "                finally"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (simulatedShapes !\u003d null)"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "                        simulatedShapes.Delete();"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "                        GC.Collect();"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "        public void ExecutePositionsAction(Action\u003cList\u003cPPShape\u003e, bool\u003e positionsAction, bool booleanVal, bool isPreview)"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "            Selection selection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!HandleInvalidSelection(isPreview, selection))"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid selection!"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange simulatedShapes \u003d null;"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapeRange selectedShapes \u003d selection.ShapeRange;"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isPreview)"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "                    SaveSelectedShapePositions(selectedShapes, allShapePos);"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "                    UndoPreview();"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "                    _previewCallBack \u003d null;"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "                simulatedShapes \u003d DuplicateShapes(selectedShapes);"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "                // set the zOrder"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d selectedShapes.Count; i++)"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "                    PPShape simulatedPPShape \u003d new PPShape(simulatedShapes[i], false);"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "                    ShapeUtil.SwapZOrder(simulatedPPShape._shape, selectedShapes[i]);"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cPPShape\u003e simulatedPPShapes \u003d ConvertShapeRangeToPPShapeList(simulatedShapes, 1);"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "                float[,] initialPositions \u003d SaveOriginalPositions(simulatedPPShapes);"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "                positionsAction.Invoke(simulatedPPShapes, booleanVal);"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncShapes(selectedShapes, simulatedPPShapes, initialPositions);"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isPreview)"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "                    _previewIsExecuted \u003d true;"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception ex)"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!isPreview)"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "                    ShowErrorMessageBox(ex.Message, ex);"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "            finally"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "                if (simulatedShapes !\u003d null)"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "                    simulatedShapes.Delete();"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "                    GC.Collect();"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "        // Distribute horizontal and vertical"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "        public void ExecutePositionsAction(Action\u003cList\u003cPPShape\u003e, float\u003e positionsAction, float dimension, bool isPreview)"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "            // Need to run the action 2 times because of the nature of PowerPoint default operations"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "            // This has been determined via manual testing"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int numOfRuns \u003d 0; numOfRuns \u003c 2; numOfRuns++)"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "                Selection selection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!HandleInvalidSelection(isPreview, selection))"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "                    // invalid selection!"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapeRange simulatedShapes \u003d null;"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "                try"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "                    ShapeRange selectedShapes \u003d selection.ShapeRange;"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (isPreview)"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "                        SaveSelectedShapePositions(selectedShapes, allShapePos);"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "                    else"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "                        UndoPreview();"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "                        _previewCallBack \u003d null;"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "                    simulatedShapes \u003d selectedShapes.Duplicate();"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "                    List\u003cPPShape\u003e simulatedPPShapes \u003d ConvertShapeRangeToPPShapeList(simulatedShapes, 1);"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "                    float[,] initialPositions \u003d SaveOriginalPositions(simulatedPPShapes);"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "                    positionsAction.Invoke(simulatedPPShapes, dimension);"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncShapes(selectedShapes, simulatedPPShapes, initialPositions);"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (isPreview)"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "                        _previewIsExecuted \u003d true;"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "                catch (Exception ex)"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!isPreview)"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": "                        ShowErrorMessageBox(ex.Message, ex);"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "                finally"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (simulatedShapes !\u003d null)"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "                        simulatedShapes.Delete();"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "                        GC.Collect();"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "        // Distribute center"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": "        public void ExecutePositionsAction(Action\u003cList\u003cPPShape\u003e, float, float\u003e positionsAction, float dimension1, float dimension2, bool isPreview)"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "            // Need to run the action 2 times because of the nature of PowerPoint default operations"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "            // This has been determined via manual testing"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int numOfRuns \u003d 0; numOfRuns \u003c 2; numOfRuns++)"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": "                if (this.GetCurrentSelection().Type !\u003d PpSelectionType.ppSelectionShapes)"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!isPreview)"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": "                        ShowErrorMessageBox(PositionsLabText.ErrorNoSelection);"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapeRange simulatedShapes \u003d null;"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "                try"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "                    ShapeRange selectedShapes \u003d this.GetCurrentSelection().ShapeRange;"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (isPreview)"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "                        SaveSelectedShapePositions(selectedShapes, allShapePos);"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": "                    else"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "                        UndoPreview();"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "                        _previewCallBack \u003d null;"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": "                        this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": "                    simulatedShapes \u003d selectedShapes.Duplicate();"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "                    List\u003cPPShape\u003e simulatedPPShapes \u003d ConvertShapeRangeToPPShapeList(simulatedShapes, 1);"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "                    float[,] initialPositions \u003d SaveOriginalPositions(simulatedPPShapes);"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "                    positionsAction.Invoke(simulatedPPShapes, dimension1, dimension2);"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncShapes(selectedShapes, simulatedPPShapes, initialPositions);"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (isPreview)"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "                        _previewIsExecuted \u003d true;"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": "                catch (Exception ex)"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (!isPreview)"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": "                        ShowErrorMessageBox(ex.Message, ex);"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "                finally"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (simulatedShapes !\u003d null)"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "                        simulatedShapes.Delete();"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "                        GC.Collect();"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "        public void ExecutePositionsAction(Action\u003cList\u003cShape\u003e\u003e positionsAction, bool isPreview)"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": "            if (this.GetCurrentSelection().Type !\u003d PpSelectionType.ppSelectionShapes)"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!isPreview)"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "                    ShowErrorMessageBox(PositionsLabText.ErrorNoSelection);"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapeRange selectedShapes \u003d this.GetCurrentSelection().ShapeRange;"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isPreview)"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": "                    SaveSelectedShapePositions(selectedShapes, allShapePos);"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "                    UndoPreview();"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "                    _previewCallBack \u003d null;"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "                positionsAction.Invoke(ConvertShapeRangeToShapeList(selectedShapes, 1));"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": "                GC.Collect();"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isPreview)"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": "                    _previewIsExecuted \u003d true;"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception ex)"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!isPreview)"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "                    ShowErrorMessageBox(ex.Message, ex);"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "        // Distribute grid"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ExecuteDistributeGrid(int rowLength, int colLength)"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange simulatedShapes \u003d null;"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "                this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapeRange selectedShapes \u003d this.GetCurrentSelection().ShapeRange;"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "                simulatedShapes \u003d DuplicateShapes(selectedShapes);"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cPPShape\u003e simulatedPPShapes \u003d ConvertShapeRangeToPPShapeList(simulatedShapes, 1);"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "                PositionsLabMain.DistributeGrid(simulatedPPShapes, rowLength, colLength);"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncShapes(selectedShapes, simulatedShapes);"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception ex)"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "                ShowErrorMessageBox(ex.Message, ex);"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "            finally"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "                if (simulatedShapes !\u003d null)"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": "                    try"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": "                        simulatedShapes.Delete();"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "                        GC.Collect();"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": "                    // Catch corrupted shapes"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": "                    catch (System.Runtime.InteropServices.COMException)"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": "                        // Remove all simulated shapes manually"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": "                        for (int i \u003d 0; i \u003c simulatedShapes.Count; i++)"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": "                            // This method to remove duplicated shapes might fail for non-corrupted shapes when mixing good/bad shapes"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": "                            if (this.GetCurrentSlide().Shapes[1].Name.Contains(\"_Copy\"))"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": "                            {"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": "                                this.GetCurrentSlide().Shapes[1].Delete();"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "                            else"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": "                            {"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": "                                break;"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "                        // Remove any outlier extra shapes not deleted previously"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "                        // Only triggered for cases where Distribute is called for cases consisting of both"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": "                        // corrupted and non-corrupted shapes"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": "                        try"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": "                            this.GetCurrentSelection().Delete();"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "                        catch (System.Runtime.InteropServices.COMException)"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "                            // Exception will trigger whenever Distribute is applied to cases where all shapes are "
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": "                            // either corrupted or non-corrupted, which is already handled before this try-catch block"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": "                        // Ask user to undo the operation to remove any excess duplicates"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": "                        MessageBox.Show(PositionsLabText.ErrorCorruptedSelection, PositionsLabText.ErrorCorruptedShapesTitle);"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": "        private void PreviewHandler()"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": "            Focus();"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": "            if (IsPreviewKeyPressed())"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": "                _previewCallBack.Invoke();"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UndoPreview(object sender, MouseEventArgs e)"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "-"
        },
        "content": "            UndoPreview();"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": "            _previewCallBack \u003d null;"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UndoPreview()"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_previewIsExecuted)"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapeRange selectedShapes \u003d this.GetCurrentSelection().ShapeRange;"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "-"
        },
        "content": "                foreach (Shape s in selectedShapes)"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "-"
        },
        "content": "                    PositionShapeProperties properties;"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "-"
        },
        "content": "                    bool isPresent \u003d allShapePos.TryGetValue(s.Id, out properties);"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (isPresent)"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "-"
        },
        "content": "                        s.Left \u003d properties.Position.X;"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": "                        s.Top \u003d properties.Position.Y;"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": "                        s.Rotation \u003d properties.Rotation;"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "-"
        },
        "content": "                _previewIsExecuted \u003d false;"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "-"
        },
        "content": "                GC.Collect();"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool IsPreviewKeyPressed()"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Keyboard.IsKeyDown(Key.LeftShift) || Keyboard.IsKeyDown(Key.RightShift))"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool IsChangeIconKeyPressed()"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Keyboard.IsKeyDown(Key.LeftCtrl) || Keyboard.IsKeyDown(Key.RightCtrl))"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SyncShapes(ShapeRange selected, ShapeRange simulatedShapes)"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d selected.Count; i++)"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape selectedShape \u003d selected[i];"
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape simulatedShape \u003d simulatedShapes[i];"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedShape.IncrementLeft(ShapeUtil.GetCenterPoint(simulatedShape).X - ShapeUtil.GetCenterPoint(selectedShape).X);"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedShape.IncrementTop(ShapeUtil.GetCenterPoint(simulatedShape).Y - ShapeUtil.GetCenterPoint(selectedShape).Y);"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedShape.Rotation \u003d simulatedShape.Rotation;"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SyncShapes(ShapeRange selected, ShapeRange simulatedShapes, float[,] originalPositions)"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d selected.Count; i++)"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape selectedShape \u003d selected[i];"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape simulatedShape \u003d simulatedShapes[i];"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedShape.IncrementLeft(ShapeUtil.GetCenterPoint(simulatedShape).X - originalPositions[i - 1, Left]);"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedShape.IncrementTop(ShapeUtil.GetCenterPoint(simulatedShape).Y - originalPositions[i - 1, Top]);"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SyncShapes(ShapeRange selected, List\u003cPPShape\u003e simulatedShapes, float[,] originalPositions)"
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d selected.Count; i++)"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape selectedShape \u003d selected[i];"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "-"
        },
        "content": "                PPShape simulatedShape \u003d simulatedShapes[i - 1];"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedShape.IncrementLeft(simulatedShape.VisualCenter.X - originalPositions[i - 1, Left]);"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedShape.IncrementTop(simulatedShape.VisualCenter.Y - originalPositions[i - 1, Top]);"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapeUtil.SwapZOrder(simulatedShape._shape, selectedShape);"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "-"
        },
        "content": "        private ShapeRange DuplicateShapes(ShapeRange range)"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "-"
        },
        "content": "            String[] duplicatedShapeNames \u003d new String[range.Count];"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c range.Count; i++)"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape shape \u003d range[i + 1];"
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape duplicated \u003d shape.Duplicate()[1];"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "-"
        },
        "content": "                // Add a number at end of name in case the name of shapes are same"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "-"
        },
        "content": "                duplicated.Name \u003d shape.Name + \"_Copy_\" + i.ToString();"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "-"
        },
        "content": "                duplicated.Left \u003d shape.Left;"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "-"
        },
        "content": "                duplicated.Top \u003d shape.Top;"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "-"
        },
        "content": "                duplicatedShapeNames[i] \u003d duplicated.Name;"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.GetCurrentSlide().Shapes.Range(duplicatedShapeNames);"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "-"
        },
        "content": "        private float[,] SaveOriginalPositions(List\u003cPPShape\u003e shapes)"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "-"
        },
        "content": "            float[,] initialPositions \u003d new float[shapes.Count, 2];"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c shapes.Count; i++)"
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "-"
        },
        "content": "                PPShape s \u003d shapes[i];"
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": "                System.Drawing.PointF pt \u003d s.VisualCenter;"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "-"
        },
        "content": "                initialPositions[i, Left] \u003d pt.X;"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "-"
        },
        "content": "                initialPositions[i, Top] \u003d pt.Y;"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "-"
        },
        "content": "            return initialPositions;"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SaveSelectedShapePositions(ShapeRange shapes, Dictionary\u003cint, PositionShapeProperties\u003e dictionary)"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "-"
        },
        "content": "            dictionary.Clear();"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape s in shapes)"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "-"
        },
        "content": "                dictionary.Add(s.Id, new PositionShapeProperties(new System.Drawing.PointF(s.Left, s.Top), s.Rotation, s.HorizontalFlip, s.VerticalFlip));"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 5,
      "-": 1768
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/Properties/Resources.Designer.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿//------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// \u003cauto-generated\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "//     This code was generated by a tool."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "//     Runtime Version:4.0.30319.42000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "//     Changes to this file may cause incorrect behavior and will be lost if"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "//     the code is regenerated."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "// \u003c/auto-generated\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "//------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.Properties"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ///   A strongly-typed resource class, for looking up localized strings, etc."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // This class was auto-generated by the StronglyTypedResourceBuilder"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    // class via a tool like ResGen or Visual Studio."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    // To add or remove a member, edit your .ResX file then rerun ResGen"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // with the /str option, or rebuild your VS project."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"System.Resources.Tools.StronglyTypedResourceBuilder\", \"15.0.0.0\")]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public class Resources {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        private static global::System.Resources.ResourceManager resourceMan;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        private static global::System.Globalization.CultureInfo resourceCulture;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute(\"Microsoft.Performance\", \"CA1811:AvoidUncalledPrivateCode\")]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        internal Resources() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Returns the cached ResourceManager instance used by this class."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        public static global::System.Resources.ResourceManager ResourceManager {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                if (object.ReferenceEquals(resourceMan, null)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    global::System.Resources.ResourceManager temp \u003d new global::System.Resources.ResourceManager(\"PowerPointLabs.Properties.Resources\", typeof(Resources).Assembly);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    resourceMan \u003d temp;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                return resourceMan;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Overrides the current thread\u0027s CurrentUICulture property for all"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   resource lookups using this strongly typed resource class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public static global::System.Globalization.CultureInfo Culture {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                return resourceCulture;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            set {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                resourceCulture \u003d value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap About {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"About\", resourceCulture);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Acknowledgement {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Acknowledgement\", resourceCulture);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AddAnimation {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AddAnimation\", resourceCulture);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AddAnimationContext {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AddAnimationContext\", resourceCulture);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AddAudio {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AddAudio\", resourceCulture);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AddCaption {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AddCaption\", resourceCulture);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AddExplanationIcon {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AddExplanationIcon\", resourceCulture);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AddNarrationContext {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AddNarrationContext\", resourceCulture);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AddSpotlightContext {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AddSpotlightContext\", resourceCulture);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AddToCustomShapes {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AddToCustomShapes\", resourceCulture);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public static System.Drawing.Bitmap AddToCustomShapesDisabled {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AddToCustomShapesDisabled\", resourceCulture);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        "
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AdjoinHorizontalIcon {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AdjoinHorizontalIcon\", resourceCulture);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AdjoinHorizontalWithAlignIcon {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AdjoinHorizontalWithAlignIcon\", resourceCulture);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AdjoinVerticalIcon {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AdjoinVerticalIcon\", resourceCulture);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AdjoinVerticalWithAlignIcon {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AdjoinVerticalWithAlignIcon\", resourceCulture);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AgendaLab {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AgendaLab\", resourceCulture);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AgendaRemove {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AgendaRemove\", resourceCulture);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AgendaSettings {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AgendaSettings\", resourceCulture);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AgendaSidebar {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AgendaSidebar\", resourceCulture);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AgendaSync {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AgendaSync\", resourceCulture);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AgendaText {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AgendaText\", resourceCulture);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AgendaVisual {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AgendaVisual\", resourceCulture);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AlignBottomDefaultIcon {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AlignBottomDefaultIcon\", resourceCulture);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AlignBottomIcon {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AlignBottomIcon\", resourceCulture);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AlignCenterIcon {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AlignCenterIcon\", resourceCulture);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AlignHorizontalCenterDefaultIcon {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AlignHorizontalCenterDefaultIcon\", resourceCulture);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AlignHorizontalCenterIcon {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AlignHorizontalCenterIcon\", resourceCulture);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AlignLeftDefaultIcon {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AlignLeftDefaultIcon\", resourceCulture);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AlignLeftIcon {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AlignLeftIcon\", resourceCulture);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AlignRadialIcon {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AlignRadialIcon\", resourceCulture);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AlignRightDefaultIcon {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AlignRightDefaultIcon\", resourceCulture);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AlignRightIcon {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AlignRightIcon\", resourceCulture);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AlignTopDefaultIcon {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AlignTopDefaultIcon\", resourceCulture);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AlignTopIcon {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AlignTopIcon\", resourceCulture);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AlignVerticalCenterDefaultIcon {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AlignVerticalCenterDefaultIcon\", resourceCulture);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AlignVerticalCenterIcon {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AlignVerticalCenterIcon\", resourceCulture);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static System.Drawing.Bitmap Animation_Appear {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Animation_Appear\", resourceCulture);"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        "
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static System.Drawing.Bitmap Animation_Bounce {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Animation_Bounce\", resourceCulture);"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        "
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static System.Drawing.Bitmap Animation_Fade {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Animation_Fade\", resourceCulture);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        "
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static System.Drawing.Bitmap Animation_Float_In {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Animation_Float_In\", resourceCulture);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        "
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static System.Drawing.Bitmap Animation_Fly_In {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Animation_Fly_In\", resourceCulture);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        "
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static System.Drawing.Bitmap Animation_Grow___Turn {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Animation_Grow___Turn\", resourceCulture);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        "
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static System.Drawing.Bitmap Animation_Random_Bars {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Animation_Random_Bars\", resourceCulture);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        "
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static System.Drawing.Bitmap Animation_Shape {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Animation_Shape\", resourceCulture);"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        "
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static System.Drawing.Bitmap Animation_Split {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Animation_Split\", resourceCulture);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        "
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static System.Drawing.Bitmap Animation_Swivel {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Animation_Swivel\", resourceCulture);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        "
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static System.Drawing.Bitmap Animation_Wheel {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Animation_Wheel\", resourceCulture);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        "
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static System.Drawing.Bitmap Animation_Wipe {"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Animation_Wipe\", resourceCulture);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        "
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static System.Drawing.Bitmap Animation_Zoom {"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Animation_Zoom\", resourceCulture);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        "
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AnimationEmphasis {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AnimationEmphasis\", resourceCulture);"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AnimationEntrance {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AnimationEntrance\", resourceCulture);"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AnimationExit {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AnimationExit\", resourceCulture);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AnimationLab {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AnimationLab\", resourceCulture);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AnimationMotionPath {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AnimationMotionPath\", resourceCulture);"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AnimationsGroup {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AnimationsGroup\", resourceCulture);"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Apply_icon {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Apply_icon\", resourceCulture);"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap AudioGroup {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"AudioGroup\", resourceCulture);"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap BlurBackground {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"BlurBackground\", resourceCulture);"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap BlurRemainder {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"BlurRemainder\", resourceCulture);"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap BlurSelected {"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"BlurSelected\", resourceCulture);"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Brightness_icon_25x25 {"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Brightness_icon_25x25\", resourceCulture);"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Bullets {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Bullets\", resourceCulture);"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap CancelCalloutButton {"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"CancelCalloutButton\", resourceCulture);"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap CaptionsLab {"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"CaptionsLab\", resourceCulture);"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ChoosePicturesIcon {"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ChoosePicturesIcon\", resourceCulture);"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Clear_icon {"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Clear_icon\", resourceCulture);"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Byte[]."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "        public static byte[] ClosedHand {"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ClosedHand\", resourceCulture);"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((byte[])(obj));"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ColorsLab {"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ColorsLab\", resourceCulture);"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ConvertToPicture {"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ConvertToPicture\", resourceCulture);"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public static System.Drawing.Bitmap ConvertToTooltip {"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ConvertToTooltip\", resourceCulture);"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        "
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public static System.Drawing.Bitmap CreateCallout {"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"CreateCallout\", resourceCulture);"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        "
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public static System.Drawing.Bitmap CreateTooltip {"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"CreateTooltip\", resourceCulture);"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        "
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public static System.Drawing.Bitmap CreateTrigger {"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"CreateTrigger\", resourceCulture);"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        "
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap CropLab {"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"CropLab\", resourceCulture);"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap CropOutPadding {"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"CropOutPadding\", resourceCulture);"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap CropToAspectRatio {"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"CropToAspectRatio\", resourceCulture);"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap CropToSame {"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"CropToSame\", resourceCulture);"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap CropToSlide {"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"CropToSlide\", resourceCulture);"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap CutOutShape {"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"CutOutShape\", resourceCulture);"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap CutOutShapeMenu {"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"CutOutShapeMenu\", resourceCulture);"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap DefaultPicture {"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"DefaultPicture\", resourceCulture);"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap DistributeCenterIcon {"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"DistributeCenterIcon\", resourceCulture);"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap DistributeGridIcon {"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"DistributeGridIcon\", resourceCulture);"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap DistributeHorizontalIcon {"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"DistributeHorizontalIcon\", resourceCulture);"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap DistributeRadialIcon {"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"DistributeRadialIcon\", resourceCulture);"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap DistributeShapeIcon {"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"DistributeShapeIcon\", resourceCulture);"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap DistributeVerticalIcon {"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"DistributeVerticalIcon\", resourceCulture);"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Down {"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Down\", resourceCulture);"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap DuplicateRotateIcon {"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"DuplicateRotateIcon\", resourceCulture);"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap EditNameContext {"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"EditNameContext\", resourceCulture);"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap EffectsGroup {"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"EffectsGroup\", resourceCulture);"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap EffectsLab {"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"EffectsLab\", resourceCulture);"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ELearningLab {"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ELearningLab\", resourceCulture);"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ELearningLabIcon2 {"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ELearningLabIcon2\", resourceCulture);"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public static System.Drawing.Bitmap ExportSlideAsPicture {"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ExportSlideAsPicture\", resourceCulture);"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        "
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Byte[]."
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "        public static byte[] EyeDropper {"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"EyeDropper\", resourceCulture);"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((byte[])(obj));"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public static System.Drawing.Bitmap EyeDropper_icon {"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"EyeDropper_icon\", resourceCulture);"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        "
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Feedback {"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Feedback\", resourceCulture);"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap FillColor_icon {"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"FillColor_icon\", resourceCulture);"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap FillSlide {"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"FillSlide\", resourceCulture);"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Fit {"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Fit\", resourceCulture);"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap FitToHeight {"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"FitToHeight\", resourceCulture);"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap FitToWidth {"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"FitToWidth\", resourceCulture);"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap FlipHorizontal {"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"FlipHorizontal\", resourceCulture);"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap FlipHorizontalIcon {"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"FlipHorizontalIcon\", resourceCulture);"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap FlipVertical {"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"FlipVertical\", resourceCulture);"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap FlipVerticalIcon {"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"FlipVerticalIcon\", resourceCulture);"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap FormattingGroup {"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"FormattingGroup\", resourceCulture);"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap halfWidth {"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"halfWidth\", resourceCulture);"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap HelpMenu {"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"HelpMenu\", resourceCulture);"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap HideShape {"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"HideShape\", resourceCulture);"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap HighlightBackground {"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"HighlightBackground\", resourceCulture);"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap HighlightBackgroundContext {"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"HighlightBackgroundContext\", resourceCulture);"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap HighlightLab {"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"HighlightLab\", resourceCulture);"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap HighlightText {"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"HighlightText\", resourceCulture);"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap HighlightTextContext {"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"HighlightTextContext\", resourceCulture);"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap HighlightWords {"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"HighlightWords\", resourceCulture);"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Indicator {"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Indicator\", resourceCulture);"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap InSlideAnimation {"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"InSlideAnimation\", resourceCulture);"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap InSlideContext {"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"InSlideContext\", resourceCulture);"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Left {"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Left\", resourceCulture);"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap LeftRotate {"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"LeftRotate\", resourceCulture);"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap LineColor_icon {"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"LineColor_icon\", resourceCulture);"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap LineColor_icon1 {"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"LineColor_icon1\", resourceCulture);"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Load_icon {"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Load_icon\", resourceCulture);"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Loading {"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Loading\", resourceCulture);"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap LockAxisIcon {"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"LockAxisIcon\", resourceCulture);"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Logo {"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Logo\", resourceCulture);"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Magnify {"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Magnify\", resourceCulture);"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap MakeTransparent {"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"MakeTransparent\", resourceCulture);"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap maxWidth {"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"maxWidth\", resourceCulture);"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap MergeIntoGroup {"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"MergeIntoGroup\", resourceCulture);"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap MinusZoom {"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"MinusZoom\", resourceCulture);"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap minWidth {"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"minWidth\", resourceCulture);"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap NarrationsLab {"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"NarrationsLab\", resourceCulture);"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Byte[]."
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "        public static byte[] OpenHand {"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"OpenHand\", resourceCulture);"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((byte[])(obj));"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap PasteAtCursorPosition {"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"PasteAtCursorPosition\", resourceCulture);"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap PasteAtOriginalPosition {"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"PasteAtOriginalPosition\", resourceCulture);"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap PasteIntoGroup {"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"PasteIntoGroup\", resourceCulture);"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap PasteLab {"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"PasteLab\", resourceCulture);"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap PasteToFillSlide {"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"PasteToFillSlide\", resourceCulture);"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap PasteToFitSlide {"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"PasteToFitSlide\", resourceCulture);"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Pause {"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Pause\", resourceCulture);"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap PictureSlidesLab {"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"PictureSlidesLab\", resourceCulture);"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Play {"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Play\", resourceCulture);"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap PlusZoom {"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"PlusZoom\", resourceCulture);"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap PositionsLab {"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"PositionsLab\", resourceCulture);"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap PptlabsContextMenu {"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"PptlabsContextMenu\", resourceCulture);"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap PslRefresh {"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"PslRefresh\", resourceCulture);"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap PslSample1 {"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"PslSample1\", resourceCulture);"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap PslSample2 {"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"PslSample2\", resourceCulture);"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap PslSettings {"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"PslSettings\", resourceCulture);"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap RadialShapeOrientationDynamicIcon {"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"RadialShapeOrientationDynamicIcon\", resourceCulture);"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap RadialShapeOrientationFixedIcon {"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"RadialShapeOrientationFixedIcon\", resourceCulture);"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap RecolorBackground {"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"RecolorBackground\", resourceCulture);"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap RecolorRemainder {"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"RecolorRemainder\", resourceCulture);"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Record {"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Record\", resourceCulture);"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap RecordAudio {"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"RecordAudio\", resourceCulture);"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Refresh {"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Refresh\", resourceCulture);"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Reload_icon {"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Reload_icon\", resourceCulture);"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ReloadAnimation {"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ReloadAnimation\", resourceCulture);"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ReloadAnimationContext {"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ReloadAnimationContext\", resourceCulture);"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ReloadSpotlight {"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ReloadSpotlight\", resourceCulture);"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap RemoveAudio {"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"RemoveAudio\", resourceCulture);"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap RemoveCaption {"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"RemoveCaption\", resourceCulture);"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap RemoveHighlighting {"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"RemoveHighlighting\", resourceCulture);"
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap RemoveNotes {"
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"RemoveNotes\", resourceCulture);"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ReplaceWithClipboard {"
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ReplaceWithClipboard\", resourceCulture);"
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeDecreaseHeight {"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeDecreaseHeight\", resourceCulture);"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeDecreaseWidth {"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeDecreaseWidth\", resourceCulture);"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeFitToFill {"
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeFitToFill\", resourceCulture);"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeFitToHeight {"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeFitToHeight\", resourceCulture);"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeFitToWidth {"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeFitToWidth\", resourceCulture);"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeIncreaseHeight {"
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeIncreaseHeight\", resourceCulture);"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeIncreaseWidth {"
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeIncreaseWidth\", resourceCulture);"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeLab {"
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeLab\", resourceCulture);"
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeLock {"
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeLock\", resourceCulture);"
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeMatchHeight {"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeMatchHeight\", resourceCulture);"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeMatchWidth {"
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeMatchWidth\", resourceCulture);"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeProportionArea {"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeProportionArea\", resourceCulture);"
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeProportionHeight {"
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeProportionHeight\", resourceCulture);"
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeProportionWidth {"
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeProportionWidth\", resourceCulture);"
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeSameHeight {"
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeSameHeight\", resourceCulture);"
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeSameSize {"
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeSameSize\", resourceCulture);"
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeSameWidth {"
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeSameWidth\", resourceCulture);"
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeStore {"
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeStore\", resourceCulture);"
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeStretchBottom {"
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeStretchBottom\", resourceCulture);"
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeStretchLeft {"
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeStretchLeft\", resourceCulture);"
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeStretchRight {"
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeStretchRight\", resourceCulture);"
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeStretchTop {"
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeStretchTop\", resourceCulture);"
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1960,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1961,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1962,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1963,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1964,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1965,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1966,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeSymmetricBottom {"
      },
      {
        "lineNumber": 1967,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1968,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeSymmetricBottom\", resourceCulture);"
      },
      {
        "lineNumber": 1969,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1970,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1971,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1972,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1973,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1974,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1975,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1976,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeSymmetricLeft {"
      },
      {
        "lineNumber": 1977,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1978,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeSymmetricLeft\", resourceCulture);"
      },
      {
        "lineNumber": 1979,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1980,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1981,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1982,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1983,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1984,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1985,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1986,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeSymmetricRight {"
      },
      {
        "lineNumber": 1987,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1988,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeSymmetricRight\", resourceCulture);"
      },
      {
        "lineNumber": 1989,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 1990,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1991,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1992,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1993,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1994,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 1995,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1996,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeSymmetricTop {"
      },
      {
        "lineNumber": 1997,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 1998,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeSymmetricTop\", resourceCulture);"
      },
      {
        "lineNumber": 1999,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2000,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2001,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2002,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2003,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2004,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2005,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2006,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ResizeUnlock {"
      },
      {
        "lineNumber": 2007,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2008,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ResizeUnlock\", resourceCulture);"
      },
      {
        "lineNumber": 2009,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2010,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2011,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2012,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2013,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2014,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2015,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2016,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Right {"
      },
      {
        "lineNumber": 2017,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2018,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Right\", resourceCulture);"
      },
      {
        "lineNumber": 2019,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2020,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2021,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2022,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2023,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2024,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2025,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2026,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap RightArrowGreen {"
      },
      {
        "lineNumber": 2027,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2028,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"RightArrowGreen\", resourceCulture);"
      },
      {
        "lineNumber": 2029,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2030,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2031,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2032,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2033,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2034,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2035,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2036,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap RightRotate {"
      },
      {
        "lineNumber": 2037,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2038,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"RightRotate\", resourceCulture);"
      },
      {
        "lineNumber": 2039,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2040,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2041,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2042,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2043,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2044,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2045,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2046,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap RotateIcon {"
      },
      {
        "lineNumber": 2047,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2048,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"RotateIcon\", resourceCulture);"
      },
      {
        "lineNumber": 2049,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2050,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2051,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2052,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2053,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2054,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2055,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2056,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Saturation_icon_18x18 {"
      },
      {
        "lineNumber": 2057,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2058,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Saturation_icon_18x18\", resourceCulture);"
      },
      {
        "lineNumber": 2059,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2060,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2061,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2062,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2063,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2064,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2065,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2066,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Save_icon {"
      },
      {
        "lineNumber": 2067,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2068,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Save_icon\", resourceCulture);"
      },
      {
        "lineNumber": 2069,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2070,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2071,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2072,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2073,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2074,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2075,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2076,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap SaveLab {"
      },
      {
        "lineNumber": 2077,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2078,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"SaveLab\", resourceCulture);"
      },
      {
        "lineNumber": 2079,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2080,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2081,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2082,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2083,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2084,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2085,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2086,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap SaveLabActionButton {"
      },
      {
        "lineNumber": 2087,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2088,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"SaveLabActionButton\", resourceCulture);"
      },
      {
        "lineNumber": 2089,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2090,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2091,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2092,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2093,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2094,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2095,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2096,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap SettingsGear {"
      },
      {
        "lineNumber": 2097,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2098,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"SettingsGear\", resourceCulture);"
      },
      {
        "lineNumber": 2099,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2100,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2102,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2103,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2104,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2105,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2106,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ShapesLab {"
      },
      {
        "lineNumber": 2107,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2108,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ShapesLab\", resourceCulture);"
      },
      {
        "lineNumber": 2109,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2110,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2112,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2113,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2114,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2115,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2116,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap SnapAwayIcon {"
      },
      {
        "lineNumber": 2117,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2118,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"SnapAwayIcon\", resourceCulture);"
      },
      {
        "lineNumber": 2119,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2120,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2122,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2123,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2124,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2125,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2126,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap SnapHorizontalIcon {"
      },
      {
        "lineNumber": 2127,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2128,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"SnapHorizontalIcon\", resourceCulture);"
      },
      {
        "lineNumber": 2129,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2130,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2132,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2133,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2134,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2135,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2136,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap SnapVerticalIcon {"
      },
      {
        "lineNumber": 2137,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2138,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"SnapVerticalIcon\", resourceCulture);"
      },
      {
        "lineNumber": 2139,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2140,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2142,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2143,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2144,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2145,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2146,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap SpeakTextContext {"
      },
      {
        "lineNumber": 2147,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2148,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"SpeakTextContext\", resourceCulture);"
      },
      {
        "lineNumber": 2149,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2150,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2152,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2153,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2154,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2155,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2156,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Spotlight {"
      },
      {
        "lineNumber": 2157,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2158,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Spotlight\", resourceCulture);"
      },
      {
        "lineNumber": 2159,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2160,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2162,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2163,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2164,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2165,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2166,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Stop {"
      },
      {
        "lineNumber": 2167,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2168,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Stop\", resourceCulture);"
      },
      {
        "lineNumber": 2169,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2170,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2172,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2173,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2174,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2175,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2176,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap SwapIcon {"
      },
      {
        "lineNumber": 2177,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2178,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"SwapIcon\", resourceCulture);"
      },
      {
        "lineNumber": 2179,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2180,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2182,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2183,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2184,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2185,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2186,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap SyncExplanationIcon {"
      },
      {
        "lineNumber": 2187,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2188,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"SyncExplanationIcon\", resourceCulture);"
      },
      {
        "lineNumber": 2189,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2190,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2191,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2192,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2193,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2194,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2195,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2196,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap SyncLab {"
      },
      {
        "lineNumber": 2197,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2198,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"SyncLab\", resourceCulture);"
      },
      {
        "lineNumber": 2199,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2200,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2202,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2203,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2204,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2205,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2206,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap SyncLabCopyButton {"
      },
      {
        "lineNumber": 2207,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2208,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"SyncLabCopyButton\", resourceCulture);"
      },
      {
        "lineNumber": 2209,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2212,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2213,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2214,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2215,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2216,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap SyncLabDeleteButton {"
      },
      {
        "lineNumber": 2217,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2218,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"SyncLabDeleteButton\", resourceCulture);"
      },
      {
        "lineNumber": 2219,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2220,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2222,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2223,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2224,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2225,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2226,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap SyncLabEditButton {"
      },
      {
        "lineNumber": 2227,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2228,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"SyncLabEditButton\", resourceCulture);"
      },
      {
        "lineNumber": 2229,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2230,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2232,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2233,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2234,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2235,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2236,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap SyncLabPasteButton {"
      },
      {
        "lineNumber": 2237,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2238,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"SyncLabPasteButton\", resourceCulture);"
      },
      {
        "lineNumber": 2239,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2240,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2241,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2242,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2243,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2244,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2245,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2246,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap TextColor_icon {"
      },
      {
        "lineNumber": 2247,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2248,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"TextColor_icon\", resourceCulture);"
      },
      {
        "lineNumber": 2249,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2250,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2252,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2253,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2254,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2255,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2256,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap TimerLab {"
      },
      {
        "lineNumber": 2257,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2258,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"TimerLab\", resourceCulture);"
      },
      {
        "lineNumber": 2259,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2260,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2262,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2263,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2264,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2265,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2266,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public static System.Drawing.Bitmap TooltipsLab {"
      },
      {
        "lineNumber": 2267,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2268,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"TooltipsLab\", resourceCulture);"
      },
      {
        "lineNumber": 2269,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2270,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2271,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2272,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        "
      },
      {
        "lineNumber": 2273,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2274,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2275,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2276,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Tutorial {"
      },
      {
        "lineNumber": 2277,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2278,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Tutorial\", resourceCulture);"
      },
      {
        "lineNumber": 2279,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2280,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2282,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2283,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2284,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2285,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2286,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Up {"
      },
      {
        "lineNumber": 2287,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2288,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Up\", resourceCulture);"
      },
      {
        "lineNumber": 2289,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2290,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2291,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2292,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2293,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2294,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2295,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2296,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap UserGuide {"
      },
      {
        "lineNumber": 2297,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2298,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"UserGuide\", resourceCulture);"
      },
      {
        "lineNumber": 2299,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2300,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2302,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2303,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2304,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2305,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2306,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap Zoom {"
      },
      {
        "lineNumber": 2307,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2308,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"Zoom\", resourceCulture);"
      },
      {
        "lineNumber": 2309,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2310,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2312,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2313,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2314,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2315,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2316,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ZoomIn {"
      },
      {
        "lineNumber": 2317,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2318,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ZoomIn\", resourceCulture);"
      },
      {
        "lineNumber": 2319,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2320,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2322,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2323,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2324,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2325,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2326,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ZoomInContext {"
      },
      {
        "lineNumber": 2327,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2328,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ZoomInContext\", resourceCulture);"
      },
      {
        "lineNumber": 2329,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2330,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2331,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2332,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2333,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2334,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2335,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2336,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ZoomLab {"
      },
      {
        "lineNumber": 2337,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2338,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ZoomLab\", resourceCulture);"
      },
      {
        "lineNumber": 2339,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2340,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2341,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2342,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2343,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2344,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2345,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2346,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ZoomOut {"
      },
      {
        "lineNumber": 2347,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2348,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ZoomOut\", resourceCulture);"
      },
      {
        "lineNumber": 2349,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2350,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2351,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2352,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2353,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2354,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2355,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2356,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ZoomOutContext {"
      },
      {
        "lineNumber": 2357,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2358,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ZoomOutContext\", resourceCulture);"
      },
      {
        "lineNumber": 2359,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2360,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2362,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2363,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2364,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2365,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2366,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ZoomToArea {"
      },
      {
        "lineNumber": 2367,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2368,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ZoomToArea\", resourceCulture);"
      },
      {
        "lineNumber": 2369,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2370,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2371,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2372,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 2373,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 2374,
        "author": {
          "gitId": "-"
        },
        "content": "        ///   Looks up a localized resource of type System.Drawing.Bitmap."
      },
      {
        "lineNumber": 2375,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 2376,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Drawing.Bitmap ZoomToAreaContext {"
      },
      {
        "lineNumber": 2377,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 2378,
        "author": {
          "gitId": "-"
        },
        "content": "                object obj \u003d ResourceManager.GetObject(\"ZoomToAreaContext\", resourceCulture);"
      },
      {
        "lineNumber": 2379,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((System.Drawing.Bitmap)(obj));"
      },
      {
        "lineNumber": 2380,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 2381,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 2382,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 2383,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 60,
      "blewjy": 20,
      "YuPeiHenry": 130,
      "-": 2173
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/Properties/Settings.Designer.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿//------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// \u003cauto-generated\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "//     This code was generated by a tool."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "//     Runtime Version:4.0.30319.42000"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "//"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "//     Changes to this file may cause incorrect behavior and will be lost if"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "//     the code is regenerated."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "// \u003c/auto-generated\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "//------------------------------------------------------------------------------"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.Properties {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    [global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator\", \"15.9.0.0\")]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        private static Settings defaultInstance \u003d ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Settings Default {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                return defaultInstance;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.Configuration.ApplicationScopedSettingAttribute()]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.Configuration.DefaultSettingValueAttribute(\"dev\")]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        public string ReleaseType {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((string)(this[\"ReleaseType\"]));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.Configuration.ApplicationScopedSettingAttribute()]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.Configuration.DefaultSettingValueAttribute(\"online\")]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        public string InstallerType {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((string)(this[\"InstallerType\"]));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.Configuration.ApplicationScopedSettingAttribute()]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.Configuration.DefaultSettingValueAttribute(\"https://www.comp.nus.edu.sg/~pptlabs/download-78563/\")]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        public string ReleaseAddr {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((string)(this[\"ReleaseAddr\"]));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.Configuration.ApplicationScopedSettingAttribute()]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.Configuration.DefaultSettingValueAttribute(\"https://www.comp.nus.edu.sg/~pptlabs/download/dev/\")]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        public string DevAddr {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((string)(this[\"DevAddr\"]));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.Configuration.ApplicationScopedSettingAttribute()]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        [global::System.Configuration.DefaultSettingValueAttribute(\"5.1.0.0\")]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        public string Version {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((string)(this[\"Version\"]));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.Configuration.ApplicationScopedSettingAttribute()]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        [global::System.Configuration.DefaultSettingValueAttribute(\"18 June 2019\")]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        public string ReleaseDate {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            get {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                return ((string)(this[\"ReleaseDate\"]));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 2,
      "-": 78
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/Ribbon1.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Diagnostics.CodeAnalysis;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using System.IO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Reflection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Runtime.InteropServices;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Forms;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Factory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.PictureSlidesLab.Views;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "using Office \u003d Microsoft.Office.Core;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPoint \u003d Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "// Follow these steps to enable the Ribbon (XML) item:"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "// 1: Copy the following code block into the ThisAddin, ThisWorkbook, or ThisDocument class."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "//  protected override Microsoft.Office.Core.IRibbonExtensibility CreateRibbonExtensibilityObject()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "//  {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "//      return new Ribbon1();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "//  }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "// 2. Create callback methods in the \"Ribbon Callbacks\" region of this class to handle user"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "//    actions, such as clicking a button. Note: if you have exported this Ribbon from the Ribbon designer,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "//    move your code from the event handlers to the callback methods and modify the code to work with the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "//    Ribbon extensibility (RibbonX) programming model."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "// 3. Assign attributes to the control tags in the Ribbon XML file to identify the appropriate callback methods in your code."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "// For more information, see the Ribbon XML documentation in the Visual Studio Tools for Office Help."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    [ComVisible(true)]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    [SuppressMessage(\"Microsoft.StyleCop.CSharp.OrderingRules\", \"SA1202:ElementsMustBeOrderedByAccess\", Justification \u003d \"Migration to Action Framework\")]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public class Ribbon1 : Office.IRibbonExtensibility"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Action Framework Factory"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        private ActionHandlerFactory ActionHandlerFactory { get; set; }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        private EnabledHandlerFactory EnabledHandlerFactory { get; set; }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        private LabelHandlerFactory LabelHandlerFactory { get; set; }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        private ImageHandlerFactory ImageHandlerFactory { get; set; }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        private SupertipHandlerFactory SupertipHandlerFactory { get; set; }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        private ContentHandlerFactory ContentHandlerFactory { get; set; }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        private PressedHandlerFactory PressedHandlerFactory { get; set; }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        private CheckBoxActionHandlerFactory CheckBoxActionHandlerFactory { get; set; }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Action Framework entry point"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        public void OnAction(Office.IRibbonControl control)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            ActionFramework.Common.Interface.ActionHandler actionHandler \u003d ActionHandlerFactory.CreateInstance(control.Id, control.Tag);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            actionHandler.Execute(control.Id);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool GetEnabled(Office.IRibbonControl control)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            if (IsAnyWindowOpen())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                ActionFramework.Common.Interface.EnabledHandler enabledHandler \u003d EnabledHandlerFactory.CreateInstance(control.Id, control.Tag);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                return enabledHandler.Get(control.Id);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            } "
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            else "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public string GetLabel(Office.IRibbonControl control)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            ActionFramework.Common.Interface.LabelHandler labelHandler \u003d LabelHandlerFactory.CreateInstance(control.Id, control.Tag);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return labelHandler.Get(control.Id);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public string GetSupertip(Office.IRibbonControl control)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            ActionFramework.Common.Interface.SupertipHandler supertipHandler \u003d SupertipHandlerFactory.CreateInstance(control.Id, control.Tag);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return supertipHandler.Get(control.Id);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public Bitmap GetImage(Office.IRibbonControl control)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            ActionFramework.Common.Interface.ImageHandler imageHandler \u003d ImageHandlerFactory.CreateInstance(control.Id, control.Tag);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return imageHandler.Get(control.Id);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        public string GetContent(Office.IRibbonControl control)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            ActionFramework.Common.Interface.ContentHandler contentHandler \u003d ContentHandlerFactory.CreateInstance(control.Id, control.Tag);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return contentHandler.Get(control.Id);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool GetPressed(Office.IRibbonControl control)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            ActionFramework.Common.Interface.PressedHandler pressedHandler \u003d PressedHandlerFactory.CreateInstance(control.Id, control.Tag);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            return pressedHandler.Get(control.Id);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public void OnCheckBoxAction(Office.IRibbonControl control, bool pressed)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            ActionFramework.Common.Interface.CheckBoxActionHandler checkBoxActionHandler \u003d CheckBoxActionHandlerFactory.CreateInstance(control.Id, control.Tag);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            checkBoxActionHandler.Execute(control.Id, pressed);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Deprecated. Please only use Action Framework to support the feature."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "#pragma warning disable 0618"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        private Office.IRibbonUI _ribbon;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // Initial bool value for whether the Drawing Tools Format Tab is disabled"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool DisableFormatTab { get; set; }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        // Initial bool value for whether images should be compressed"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private bool ShouldCompressImages { get; set; }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        #region IRibbonExtensibility Members"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public string GetCustomUI(string ribbonId)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return GetResourceText(\"PowerPointLabs.Ribbon1.xml\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Ribbon Callbacks"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        //Create callback methods here. For more information about adding callback methods, select the Ribbon XML item in Solution Explorer and then press F1"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set the visibility of the Drawing Tools Format Tab"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool ToggleVisibleFormatTab(Office.IRibbonControl control)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            return !DisableFormatTab;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        // Toggles the boolean controlling the visibility of the Drawing Tools Format Tab"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        public void ToggleVisibility(Office.IRibbonControl control, bool pressed)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            DisableFormatTab \u003d pressed;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            _ribbon.InvalidateControlMso(\"TabDrawingToolsFormat\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            _ribbon.InvalidateControl(\"VisibleFormatShapes\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        // Toggles the boolean controlling whether images should be compressed."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void ToggleImageCompression(Office.IRibbonControl control, bool pressed)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ShouldCompressImages \u003d pressed;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            _ribbon.InvalidateControl(\"ShouldCompressImagesCheckbox\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            GraphicsUtil.ShouldCompressPictureExport(ShouldCompressImages);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void InitialiseVisibilityCheckbox()"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            _ribbon.InvalidateControl(\"VisibleFormatShapes\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void InitialiseCompressImagesCheckbox()"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            _ribbon.InvalidateControl(\"ShouldCompressImagesCheckbox\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sets the default starting status of the checkbox (whether checked or not)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool SetVisibility(Office.IRibbonControl control)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return DisableFormatTab;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        // Sets the default starting status of the checkbox (whether checked or not)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public bool SetImageCompression(Office.IRibbonControl control)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return ShouldCompressImages;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        public void RibbonLoad(Office.IRibbonUI ribbonUi)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            ActionHandlerFactory \u003d new ActionHandlerFactory();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            EnabledHandlerFactory \u003d new EnabledHandlerFactory();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            LabelHandlerFactory \u003d new LabelHandlerFactory();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            SupertipHandlerFactory \u003d new SupertipHandlerFactory();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            ImageHandlerFactory \u003d new ImageHandlerFactory();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            ContentHandlerFactory \u003d new ContentHandlerFactory();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            PressedHandlerFactory \u003d new PressedHandlerFactory();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            CheckBoxActionHandlerFactory \u003d new CheckBoxActionHandlerFactory();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            DisableFormatTab \u003d new Boolean();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ShouldCompressImages \u003d new Boolean();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            _ribbon \u003d ribbonUi;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        public void RefreshRibbonControl(String controlId)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "                _ribbon.InvalidateControl(controlId);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(e, \"RefreshRibbonControl\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                throw;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Button Labels"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public string GetPowerPointLabsAddInsTabLabel(Office.IRibbonControl control)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            return CommonText.PowerPointLabsAddInsTabLabel;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        public string GetCombineShapesLabel(Office.IRibbonControl control)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            return CommonText.CombineShapesLabel;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        public string GetPowerPointLabsMenuLabel(Office.IRibbonControl control)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            return CommonText.PowerPointLabsMenuLabel;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        # endregion"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool IsValidPresentation(PowerPoint.Presentation pres)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Globals.ThisAddIn.VerifyVersion(pres))"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(CommonText.ErrorVersionNotCompatible);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        public Bitmap GetContextMenuImage(Office.IRibbonControl control)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                return new Bitmap(Properties.Resources.PptlabsContextMenu);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(e, \"GetContextMenuImage\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                throw;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Feature: Picture Slides Lab"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        public PictureSlidesLabWindow PictureSlidesLabWindow { get; set; }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Feature: Combine Shapes"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool GetVisibilityForCombineShapes(Office.IRibbonControl control)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            const string officeVersion2010 \u003d \"14.0\";"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            return Globals.ThisAddIn.Application.Version \u003d\u003d officeVersion2010;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        private static string GetResourceText(string resourceName)"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            Assembly asm \u003d Assembly.GetExecutingAssembly();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            string[] resourceNames \u003d asm.GetManifestResourceNames();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c resourceNames.Length; i++)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                if (string.Compare(resourceName, resourceNames[i], StringComparison.OrdinalIgnoreCase) \u003d\u003d 0)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                    using (StreamReader resourceReader \u003d new StreamReader(asm.GetManifestResourceStream(resourceNames[i])))"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (resourceReader !\u003d null)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "                            return resourceReader.ReadToEnd();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool IsAnyWindowOpen() "
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            return Globals.ThisAddIn.Application.Windows.Count \u003e 0;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 24,
      "-": 276
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ShapesLab/CustomShapePane.Designer.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using System.Windows.Controls;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ShapesLab.Views;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.ShapesLab"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    partial class CustomShapePane"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Required designer variable."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        private System.ComponentModel.IContainer components \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void UpdateOnSelectionChange(Selection sel)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePaneWPF1.UpdateAddShapeButtonEnabledStatus(sel);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void AddShapeFromSelection(Selection selection)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePaneWPF1.AddShapeFromSelection(selection);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void AddCustomShape(string shapeName, string shapePath, bool immediateEditing)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePaneWPF1.AddCustomShape(shapeName, shapePath, immediateEditing);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void RemoveCustomShape(string shapeName)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePaneWPF1.RemoveCustomShape(shapeName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void RenameCustomShape(string shapeOldName, string shapeNewName)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePaneWPF1.RenameCustomShape(shapeOldName, shapeNewName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void AddCategory(string newCategoryName)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePaneWPF1.AddCategory(newCategoryName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void RemoveCategory(int removedCategoryIndex)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePaneWPF1.RemoveCategory(removedCategoryIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void RenameCategory(int renameCategoryIndex, string newCategoryName)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePaneWPF1.RenameCategory(renameCategoryIndex, newCategoryName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void InitCustomShapePaneStorage()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePaneWPF1.SetStorageSettings();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Test Interface"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public CustomShapePaneItem GetShape(string shapeName)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return CustomShapePaneWPF1.GetShape(shapeName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void ImportLibrary(string pathToLibrary)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePaneWPF1.ImportLibrary(pathToLibrary);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void ImportShape(string pathToShape)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePaneWPF1.ImportShape(pathToShape);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public Presentation GetShapeGallery()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return CustomShapePaneWPF1.GetShapeGallery();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public Button GetAddShapeButton()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return CustomShapePaneWPF1.addShapeButton;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void SaveSelectedShapes()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePaneWPF1.SaveSelectedShapes();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public System.Windows.Point GetShapeForClicking(string shapeName)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return CustomShapePaneWPF1.GetShapeForClicking(shapeName);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Clean up any resources being used."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"disposing\"\u003etrue if managed resources should be disposed; otherwise, false.\u003c/param\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        protected override void Dispose(bool disposing)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            if (disposing \u0026\u0026 (components !\u003d null))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                components.Dispose();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            base.Dispose(disposing);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Component Designer generated code"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Required method for Designer support - do not modify "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /// the contents of this method with the code editor."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        private void InitializeComponent()"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.elementHost1 \u003d new System.Windows.Forms.Integration.ElementHost();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.CustomShapePaneWPF1 \u003d new PowerPointLabs.ShapesLab.Views.CustomShapePaneWPF();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            this.SuspendLayout();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            // "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // elementHost1"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            // "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.elementHost1.Dock \u003d System.Windows.Forms.DockStyle.Fill;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.elementHost1.Location \u003d new System.Drawing.Point(0, 0);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.elementHost1.Name \u003d \"elementHost1\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.elementHost1.Size \u003d new System.Drawing.Size(300, 833);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.elementHost1.TabIndex \u003d 0;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.elementHost1.Text \u003d \"elementHost1\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.elementHost1.Child \u003d this.CustomShapePaneWPF1;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            // "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            // CustomShapePane"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            // "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            this.AutoScaleDimensions \u003d new System.Drawing.SizeF(6F, 13F);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            this.AutoScaleMode \u003d System.Windows.Forms.AutoScaleMode.Font;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.Controls.Add(this.elementHost1);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            this.Name \u003d \"CustomShapePane\";"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.Size \u003d new System.Drawing.Size(300, 833);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            this.ResumeLayout(false);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private System.Windows.Forms.Integration.ElementHost elementHost1;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public CustomShapePaneWPF CustomShapePaneWPF1 { get; private set; }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public string CurrentCategory"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return CustomShapePaneWPF1.CurrentCategory;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            set"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                CustomShapePaneWPF1.CurrentCategory \u003d value;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 109,
      "-": 55
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ShapesLab/CustomShapePane.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Forms;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.ShapesLab"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public partial class CustomShapePane : UserControl"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public CustomShapePane()"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "            InitializeComponent();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 1,
      "-": 14
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ShapesLab/ShapesLabUtils.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using PowerPoint \u003d Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.ShapesLab"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class ShapesLabUtils"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static void SyncShapeAdd(ThisAddIn addIn, string shapeName, string shapeFullName, string category)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (addIn \u003d\u003d null)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (PowerPoint.DocumentWindow window in Globals.ThisAddIn.Application.Windows)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (window \u003d\u003d addIn.Application.ActiveWindow)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                CustomShapePane shapePaneControl \u003d (addIn.GetControlFromWindow(typeof(CustomShapePane), window)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    as CustomShapePane);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (shapePaneControl?.CurrentCategory \u003d\u003d category)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    shapePaneControl.AddCustomShape(shapeName, shapeFullName, false);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static void SyncShapeRemove(ThisAddIn addIn, string shapeName, string category)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (addIn \u003d\u003d null)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (PowerPoint.DocumentWindow window in Globals.ThisAddIn.Application.Windows)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (window \u003d\u003d addIn.Application.ActiveWindow)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                CustomShapePane shapePaneControl \u003d (addIn.GetControlFromWindow(typeof(CustomShapePane), window)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    as CustomShapePane);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (shapePaneControl?.CurrentCategory \u003d\u003d category)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    shapePaneControl.RemoveCustomShape(shapeName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static void SyncShapeRename(ThisAddIn addIn, string shapeOldName, string shapeNewName, string category)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (addIn \u003d\u003d null)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (PowerPoint.DocumentWindow window in Globals.ThisAddIn.Application.Windows)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (window \u003d\u003d addIn.Application.ActiveWindow)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                CustomShapePane shapePaneControl \u003d (addIn.GetControlFromWindow(typeof(CustomShapePane), window)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    as CustomShapePane);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (shapePaneControl?.CurrentCategory \u003d\u003d category)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    shapePaneControl.RenameCustomShape(shapeOldName, shapeNewName);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static void SyncAddCategory(ThisAddIn addIn, string newCategoryName)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (addIn \u003d\u003d null)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (PowerPoint.DocumentWindow window in Globals.ThisAddIn.Application.Windows)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (window \u003d\u003d addIn.Application.ActiveWindow)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                CustomShapePane shapePaneControl \u003d (addIn.GetControlFromWindow(typeof(CustomShapePane), window)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    as CustomShapePane);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                shapePaneControl?.AddCategory(newCategoryName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static void SyncRemoveCategory(ThisAddIn addIn, int removedCategoryIndex)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (addIn \u003d\u003d null)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (PowerPoint.DocumentWindow window in Globals.ThisAddIn.Application.Windows)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (window \u003d\u003d addIn.Application.ActiveWindow)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                CustomShapePane shapePaneControl \u003d (addIn.GetControlFromWindow(typeof(CustomShapePane), window)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    as CustomShapePane);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                shapePaneControl?.RemoveCategory(removedCategoryIndex);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static void SyncRenameCategory(ThisAddIn addIn, int renameCategoryIndex, string newCategoryName)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (addIn \u003d\u003d null)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (PowerPoint.DocumentWindow window in Globals.ThisAddIn.Application.Windows)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (window \u003d\u003d addIn.Application.ActiveWindow)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                CustomShapePane shapePaneControl \u003d (addIn.GetControlFromWindow(typeof(CustomShapePane), window)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    as CustomShapePane);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                shapePaneControl?.RenameCategory(renameCategoryIndex, newCategoryName);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 124
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ShapesLab/Views/CustomComboBoxItem.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿namespace PowerPointLabs.ShapesLab.Views"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class CustomComboBoxItem"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public string actualName;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public bool isDefaultCategory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string DefaultCategorySuffix \u003d \" (default)\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public CustomComboBoxItem(string name, string defaultCategory)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            actualName \u003d name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isDefaultCategory \u003d name \u003d\u003d defaultCategory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void SetNewDefaultCategory(string defaultCategory)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            isDefaultCategory \u003d actualName \u003d\u003d defaultCategory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        override public string ToString()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return actualName + (isDefaultCategory ? DefaultCategorySuffix : \"\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 25,
      "-": 1
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ShapesLab/Views/CustomMenuItem.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using System.Windows;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows.Controls;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.ShapesLab.Views"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class CustomMenuItem: MenuItem"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public string actualName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public CustomMenuItem(string name, RoutedEventHandler clickHandler)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            actualName \u003d name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Header \u003d name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Click +\u003d clickHandler;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 16
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ShapesLab/Views/CustomShapePaneItem.xaml.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Collections.ObjectModel;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.IO;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Text.RegularExpressions;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows.Controls;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows.Input;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows.Interop;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows.Media.Imaging;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.ShapesLab.Views"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /// Interaction logic for CustomShapePaneItem.xaml"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public partial class CustomShapePaneItem : UserControl"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private Bitmap image;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private CustomShapePaneWPF parent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private Status editStatus;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private bool hasJustExitedFromTextBox \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private string shapeName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public enum Status"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Idle,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Editing"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Constructors"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public CustomShapePaneItem(CustomShapePaneWPF parent, string shapeName, string shapePath, bool isReadyForEditing, ObservableCollection\u003cMenuItem\u003e moveShapeContextMenu)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Initialize(isReadyForEditing);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.parent \u003d parent;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ImagePath \u003d shapePath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.shapeName \u003d shapeName;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.Text \u003d shapeName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            moveShape.Items.Clear();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            moveShape.ItemsSource \u003d moveShapeContextMenu;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // critical line, we need to free the reference to the image immediately after we\u0027ve"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // finished thumbnail generation, else we could not modify (rename/ delete) the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // image. Therefore, we use using keyword to ensure a collection."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            using (Bitmap bitmap \u003d new Bitmap(shapePath))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Image \u003d Utils.GraphicsUtil.CreateThumbnailImage(bitmap, 50, 50);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Properties"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public Bitmap Image"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return image;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            set"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                image \u003d value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                UpdateImage();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public Status EditStatus"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return editStatus;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            set"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (value \u003d\u003d editStatus)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                editStatus \u003d value;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                switch (value)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    case Status.Editing:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        StartNameEdit();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    case Status.Idle:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        FinishNameEdit();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public string ImagePath { get; set; }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public string Text"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return shapeName;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region API"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// Updates UI"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003cparam name\u003d\"newShapeName\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void SyncRenameShape(string newShapeName)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.Text \u003d newShapeName;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shapeName \u003d newShapeName;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void UnfocusTextBox()"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            //unfocus from the textbox"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            DependencyObject scope \u003d FocusManager.GetFocusScope(textBox);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            FocusManager.SetFocusedElement(scope, this as IInputElement);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void StartNameEdit()"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            SetEditableTextBox();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void FinishNameEdit()"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            SetReadOnlyTextBox();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            RenameShape(textBox.Text.Trim());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Context Menu"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void AddShapeClick(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            parent.AddShapesToSlide();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void EditShapeClick(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            EditStatus \u003d Status.Editing;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void DeleteShapeClick(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            parent.RemoveAllSelectedShapes();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Helper Functions"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // for names, we do not allow name involves"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // \u003c (less than)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // \u003e (greater than)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // : (colon)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // \" (double quote)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // / (forward slash)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // \\ (backslash)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // | (vertical bar or pipe)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // ? (question mark)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // * (asterisk)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // Regex \u003d [\u003c\u003e:\"/\\\\|?*]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string InvalidCharsRegex \u003d \"[\u003c\u003e:\\\"/\\\\\\\\|?*]\";"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void Initialize(bool isReadyForEdit)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            InitializeComponent();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            "
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            canvas.Focusable \u003d true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.KeyDown +\u003d EnterKeyWhileEditing;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.LostFocus +\u003d TextBoxLostFocus;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (isReadyForEdit)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                SetEditableTextBox();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            else"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                SetReadOnlyTextBox();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void SetReadOnlyTextBox()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.IsReadOnly \u003d true;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.IsHitTestVisible \u003d false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.CaretIndex \u003d 0;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.BorderThickness \u003d new Thickness(0, 0, 0, 0);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.Background \u003d Background;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void SetEditableTextBox()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.IsEnabled \u003d true;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.IsReadOnly \u003d false;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.IsHitTestVisible \u003d true;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.CaretIndex \u003d 0;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.BorderThickness \u003d new Thickness(2, 2, 2, 2);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.Background \u003d System.Windows.Media.Brushes.White;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.Focus();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBox.SelectAll();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private bool HasNameChanged(string newShapeName)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return newShapeName \u003d\u003d shapeName;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private bool IsDuplicateName(string newShapeName)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string newPath \u003d ImagePath.Replace(shapeName, newShapeName);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // if the new name has been used, the new name is not allowed"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (File.Exists(newPath))"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                MessageBox.Show(CommonText.ErrorFileNameExist);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private bool IsValidName(string name)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Regex invalidChars \u003d new Regex(InvalidCharsRegex);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return !(string.IsNullOrWhiteSpace(name) ||"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                     invalidChars.IsMatch(name) ||"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                     Utils.ShapeUtil.IsShapeNameOverMaximumLength(name));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void RenameShape(string newShapeName)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (HasNameChanged(newShapeName))"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!IsValidName(newShapeName))"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                MessageBox.Show(Utils.ShapeUtil.IsShapeNameOverMaximumLength(newShapeName)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                    ? CommonText.ErrorNameTooLong"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                    : CommonText.ErrorInvalidCharacter);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                textBox.Text \u003d shapeName;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                EditStatus \u003d Status.Editing;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (IsDuplicateName(newShapeName))"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                EditStatus \u003d Status.Editing;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            //Update image"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string newPath \u003d ImagePath.Replace(@\"\\\" + shapeName, @\"\\\" + newShapeName);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (File.Exists(ImagePath))"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                File.Move(ImagePath, newPath);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                this.GetAddIn().ShapePresentation.RenameShape(shapeName, newShapeName);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ImagePath \u003d newPath;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ShapesLabUtils.SyncShapeRename(this.GetAddIn(), shapeName, newShapeName, parent.CurrentCategory);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            parent.RenameCustomShape(shapeName, newShapeName);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Event Handlers"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void UpdateImage()"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // if image isn\u0027t set, fill the control with the label"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (image \u003d\u003d null)"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                imageBox.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                col1.Width \u003d new GridLength(0);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            else"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "                BitmapSource source \u003d CommonUtil.CreateBitmapSource(image);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                imageBox.Source \u003d source;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                imageBox.Visibility \u003d Visibility.Visible;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                col1.Width \u003d new GridLength(60);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void EnterKeyWhileEditing(object sender, KeyEventArgs e)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (e.Key \u003d\u003d Key.Return)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                UnfocusTextBox();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                e.Handled \u003d true;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void TextBoxLostFocus(object sender, EventArgs args)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            hasJustExitedFromTextBox \u003d true;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            EditStatus \u003d Status.Idle;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void OnMouseDoubleClick(object sender, MouseButtonEventArgs e)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            e.Handled \u003d true;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (sender \u003d\u003d canvas \u0026\u0026 e.ClickCount \u003c 2)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            EditStatus \u003d Status.Idle;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            parent.AddShapesToSlide();"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void FocusTextBox()"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (hasJustExitedFromTextBox)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                hasJustExitedFromTextBox \u003d false;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!canvas.IsFocused)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            EditStatus \u003d Status.Editing;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            SetEditableTextBox();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void ClickOutsideTextBox(object sender, MouseButtonEventArgs e)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            UnfocusTextBox();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 350,
      "-": 2
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ShapesLab/Views/CustomShapePaneWPF.xaml.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Collections.ObjectModel;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Diagnostics;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.IO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Linq;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows.Controls;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows.Forms;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows.Input;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows.Media.Imaging;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows.Navigation;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ShortcutsLab;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.Views;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using MenuItem \u003d System.Windows.Controls.MenuItem;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using MessageBox \u003d System.Windows.Forms.MessageBox;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using ShapeRange \u003d Microsoft.Office.Interop.PowerPoint.ShapeRange;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.ShapesLab.Views"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /// Interaction logic for CustomShapePaneWPF.xaml"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public partial class CustomShapePaneWPF : System.Windows.Controls.UserControl"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string ImportLibraryFileDialogFilter \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"PowerPointLabs Shapes File|*.pptlabsshapes;*.pptx\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string ImportShapesFileDialogFilter \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            \"PowerPointLabs Shape File|*.pptlabsshape;*.pptx\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string ImportFileNameNoExtension \u003d \"import\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string ImportFileCopyName \u003d ImportFileNameNoExtension + \".pptx\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private readonly Comparers.AtomicNumberStringCompare _stringComparer \u003d new Comparers.AtomicNumberStringCompare();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private BindingSource _categoryBinding;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private ObservableCollection\u003cMenuItem\u003e _contextMenuCategoryBinding;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private WrapPanel wrapPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        # region Properties"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public ObservableCollection\u003cstring\u003e Categories { get; private set; }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public string CurrentCategory { get; set; }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public string ShapeRootFolderPath { get; private set; }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public string CurrentShapeFolderPath"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get { return ShapeRootFolderPath + @\"\\\" + CurrentCategory; }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private bool IsStorageSettingsGiven"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return ShapeRootFolderPath !\u003d null \u0026\u0026 CurrentCategory !\u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Constructors"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public CustomShapePaneWPF()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            InitializeComponent();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            DataContext \u003d this;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            addShapeImage.Source \u003d CommonUtil.CreateBitmapSource(Properties.Resources.AddToCustomShapes);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            singleShapeDownloadLink.NavigateUri \u003d new Uri(CommonText.SingleShapeDownloadUrl);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Init"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void SetStorageSettings()"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (IsStorageSettingsGiven)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ThisAddIn addIn \u003d this.GetAddIn();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            addIn.InitializeShapesLabConfig();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            addIn.InitializeShapeGallery();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ShapeRootFolderPath \u003d ShapesLabSettings.SaveFolderPath;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CurrentCategory \u003d addIn.ShapesLabConfig.DefaultCategory;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Categories \u003d new ObservableCollection\u003cstring\u003e(this.GetAddIn().ShapePresentation.Categories);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            SetupMoveShapeContextMenu();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            SetupCategoryBoxItems();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void CustomShapePaneWPF_Loaded(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Microsoft.Office.Tools.CustomTaskPane shapesLabPane \u003d this.GetAddIn().GetActivePane(typeof(CustomShapePane));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePane customShapePane \u003d shapesLabPane?.Control as CustomShapePane;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (customShapePane \u003d\u003d null)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                MessageBox.Show(ShapesLabText.ErrorShapePaneNotOpened);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            UpdateAddShapeButtonEnabledStatus(this.GetCurrentSelection());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            customShapePane.HandleDestroyed +\u003d CustomShapePane_Closing;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void CustomShapePane_Closing(Object sender, EventArgs e)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region API"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void UpdateAddShapeButtonEnabledStatus(Selection selection)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if ((selection \u003d\u003d null) || (selection.Type \u003d\u003d PpSelectionType.ppSelectionNone)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                || (selection.Type \u003d\u003d PpSelectionType.ppSelectionSlides)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                || !ShapeUtil.IsSelectionShapeOrText(selection))"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                DisableAddShapesButton();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            else"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                EnableAddShapesButton();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public bool GetAddShapeButtonEnabledStatus()"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return addShapeButton.IsEnabled;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void AddShapeFromSelection(Selection selection)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ThisAddIn addIn \u003d this.GetAddIn();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // first of all we check if the shape gallery has been opened correctly"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!addIn.ShapePresentation.Opened)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                MessageBox.Show(CommonText.ErrorShapeGalleryInit);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // Check this so that it is the same requirements as ConvertToPicture which is used when adding shapes"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!ShapeUtil.IsSelectionShapeOrText(selection))"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                MessageBox.Show(new Form() { TopMost \u003d true },"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    ShapesLabText.ErrorAddSelectionInvalid, ShapesLabText.ErrorDialogTitle);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // Finish checks, will add shape(s) from selection"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ShapeRange selectedShapes \u003d selection.ShapeRange;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (selection.HasChildShapeRange)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                selectedShapes \u003d selection.ChildShapeRange;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // add shape into shape gallery first to reduce flicker"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            PowerPointSlide currentSlide \u003d this.GetCurrentSlide();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            PowerPointPresentation pres \u003d this.GetCurrentPresentation();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string shapeName \u003d addIn.ShapePresentation.AddShape(pres, currentSlide, selectedShapes, selectedShapes[1].Name);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // add the selection into pane and save it as .png locally"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string shapePath \u003d Path.Combine(CurrentShapeFolderPath, shapeName + \".png\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            bool success \u003d ConvertToPicture.ConvertAndSave(selectedShapes, shapePath);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!success)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // sync the shape among all opening panels"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ShapesLabUtils.SyncShapeAdd(addIn, shapeName, shapePath, CurrentCategory);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // finally, add the shape into the panel"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            AddCustomShape(shapeName, shapePath, false);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// Adds a shape lexicographically."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void AddCustomShape(string shapeName, string shapePath, bool isReadyForEdit)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            DehighlightSelected();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePaneItem shapeItem \u003d new CustomShapePaneItem(this, shapeName, shapePath, isReadyForEdit, _contextMenuCategoryBinding);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            int insertionIndex \u003d GetShapeInsertionIndex(shapeName);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shapeList.Items.Insert(insertionIndex, shapeItem);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shapeList.SelectedIndex \u003d insertionIndex;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shapeList.ScrollIntoView(shapeItem);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void RemoveCustomShape(string shapeName)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            int shapeIndex \u003d GetShapeItemIndex(shapeName);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (shapeIndex \u003c 0)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shapeList.Items.RemoveAt(shapeIndex);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void RemoveAllSelectedShapes()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            //store names in list first, as enumeration will fail if the selected items are modified."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            List\u003cstring\u003e shapeNames \u003d new List\u003cstring\u003e();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (CustomShapePaneItem shape in shapeList.SelectedItems)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                shapeNames.Add(shape.Text);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (string shapeName in shapeNames)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                RemoveShape(shapeName);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void RenameCustomShape(string oldShapeName, string newShapeName)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            int shapeIndex \u003d GetShapeItemIndex(oldShapeName);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (shapeIndex \u003c 0)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePaneItem shape \u003d shapeList.Items[shapeIndex] as CustomShapePaneItem;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shape.SyncRenameShape(newShapeName);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shapeList.Items.Remove(shape);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            int insertionIndex \u003d GetShapeInsertionIndex(newShapeName);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shapeList.Items.Insert(insertionIndex, shape);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shapeList.SelectedIndex \u003d insertionIndex;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shapeList.ScrollIntoView(shape);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public bool IsShapeSelected(CustomShapePaneItem shape)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return shapeList.SelectedItems.Contains(shape);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void AddShapesToSlide()"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (shapeList.SelectedItems.Count \u003d\u003d 0)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                MessageBox.Show(ShapesLabText.ErrorNoPanelSelected, ShapesLabText.ErrorDialogTitle);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            PowerPointSlide currentSlide \u003d this.GetCurrentSlide();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (currentSlide \u003d\u003d null)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                MessageBox.Show(ShapesLabText.ErrorViewTypeNotSupported);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (CustomShapePaneItem shape in shapeList.SelectedItems)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ClipboardUtil.RestoreClipboardAfterAction(() \u003d\u003e"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    this.GetAddIn().ShapePresentation.CopyShape(shape.Text);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    currentSlide.Shapes.Paste().Select();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    return ClipboardUtil.ClipboardRestoreSuccess;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }, this.GetCurrentPresentation(), currentSlide);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void MoveShapes(string newCategoryName)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            //Add shape names first as shapeList.Items will be modified"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            List\u003cstring\u003e shapeNames \u003d new List\u003cstring\u003e();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (CustomShapePaneItem shape in shapeList.SelectedItems)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                shapeNames.Add(shape.Text);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (string shapeName in shapeNames)"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                string oriPath \u003d Path.Combine(CurrentShapeFolderPath, shapeName) + \".png\";"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                string destPath \u003d Path.Combine(ShapeRootFolderPath, newCategoryName, shapeName) + \".png\";"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                // if we have an identical name in the destination category, we won\u0027t allow"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                // moving"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (File.Exists(destPath))"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    MessageBox.Show(string.Format(TextCollection.ShapesLabText.ErrorSameShapeNameInDestination,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                    shapeName,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                    newCategoryName));"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                PowerPointSlide currentSlide \u003d this.GetCurrentSlide();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                PowerPointPresentation pres \u003d this.GetCurrentPresentation();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                // move shape in ShapeGallery to correct place"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Globals.ThisAddIn.ShapePresentation.MoveShapeToCategory(pres, currentSlide, shapeName, newCategoryName);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                File.Move(oriPath, destPath);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                RemoveCustomShape(shapeName);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ShapesLabUtils.SyncShapeRemove(this.GetAddIn(), shapeName, CurrentCategory);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ShapesLabUtils.SyncShapeAdd(this.GetAddIn(), shapeName, destPath, newCategoryName);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void AddCategory(string newCategoryName)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.GetAddIn().ShapePresentation.AddCategory(newCategoryName);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            _categoryBinding.Add(new CustomComboBoxItem(newCategoryName, null));"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            _contextMenuCategoryBinding.Add(new CustomMenuItem(newCategoryName, MoveShapeClick));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void RemoveCategory(int removedCategoryIndex)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            int categoryIndex \u003d categoryBox.SelectedIndex;"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            _categoryBinding.RemoveAt(categoryIndex);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            _contextMenuCategoryBinding.RemoveAt(categoryIndex);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (categoryIndex \u003d\u003d removedCategoryIndex)"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                categoryBox.SelectedIndex \u003d Math.Max(0, categoryIndex - 1);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void RenameCategory(int renameCategoryIndex, string newCategoryName)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            bool isCurrentCategoryRenamed \u003d renameCategoryIndex \u003d\u003d categoryBox.SelectedIndex;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomComboBoxItem item \u003d _categoryBinding[renameCategoryIndex] as CustomComboBoxItem;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (item \u003d\u003d null)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            item.actualName \u003d newCategoryName;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            _categoryBinding.RemoveAt(renameCategoryIndex);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            _categoryBinding.Insert(renameCategoryIndex, item);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            _contextMenuCategoryBinding.RemoveAt(renameCategoryIndex);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            _contextMenuCategoryBinding.Insert(renameCategoryIndex, new CustomMenuItem(newCategoryName, MoveShapeClick));"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (isCurrentCategoryRenamed)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                CurrentCategory \u003d newCategoryName;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                categoryBox.SelectedIndex \u003d renameCategoryIndex;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Test Interface"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public CustomShapePaneItem GetShape(string shapeName)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            int shapeIndex \u003d GetShapeItemIndex(shapeName);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (shapeIndex \u003d\u003d -1)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return (CustomShapePaneItem) shapeList.Items[shapeIndex];"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void ImportLibrary(string pathToLibrary)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ImportShapes(pathToLibrary, true);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void ImportShape(string pathToShape)"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ImportShapes(pathToShape, false);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public Presentation GetShapeGallery()"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return this.GetAddIn().ShapePresentation.Presentation;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void SaveSelectedShapes()"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Selection selection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            AddShapeFromSelection(selection);"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public System.Windows.Point GetShapeForClicking(string shapeName)"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            int shapeIndex \u003d GetShapeItemIndex(shapeName);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (shapeIndex \u003d\u003d -1)"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return new System.Windows.Point(0, 0);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePaneItem shape \u003d (CustomShapePaneItem)shapeList.Items[shapeIndex];"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shape.FinishNameEdit();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return shape.grid.PointToScreen(new System.Windows.Point(20, 20));"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Context Menu"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void ContextMenuStripAddCategoryClicked(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ShapesLabCategoryInfoDialogBox categoryInfoDialog \u003d new ShapesLabCategoryInfoDialogBox(string.Empty, false);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            categoryInfoDialog.DialogConfirmedHandler +\u003d (string newCategoryName) \u003d\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ShapesLabUtils.SyncAddCategory(this.GetAddIn(), newCategoryName);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                AddCategory(newCategoryName);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                categoryBox.SelectedIndex \u003d _categoryBinding.Count - 1;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            };"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            categoryInfoDialog.ShowDialog();"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shapeList.Focus();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void ContextMenuStripImportCategoryClicked(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            OpenFileDialog fileDialog \u003d new OpenFileDialog"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Filter \u003d ImportLibraryFileDialogFilter,"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Multiselect \u003d false,"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Title \u003d ShapesLabText.ImportLibraryFileDialogTitle"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            };"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            //flowlayoutContextMenuStrip.Hide();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (fileDialog.ShowDialog() \u003d\u003d DialogResult.Cancel)"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ImportShapes(fileDialog.FileName, true);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MessageBox.Show(ShapesLabText.SuccessImport);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void ContextMenuStripImportShapesClicked(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            OpenFileDialog fileDialog \u003d new OpenFileDialog"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Filter \u003d ImportShapesFileDialogFilter,"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Multiselect \u003d true,"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Title \u003d ShapesLabText.ImportShapeFileDialogTitle"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            };"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (fileDialog.ShowDialog() \u003d\u003d DialogResult.Cancel)"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            bool importSuccess \u003d fileDialog.FileNames.Aggregate(true,"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                                               (current, fileName) \u003d\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                                               ImportShapes(fileName, false) \u0026\u0026 current);"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!importSuccess)"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MessageBox.Show(ShapesLabText.SuccessImport);"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void ContextMenuStripRemoveCategoryClicked(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // remove the last category will not be entertained"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (_categoryBinding.Count \u003d\u003d 1)"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                MessageBox.Show(ShapesLabText.ErrorRemoveLastCategory);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            int categoryIndex \u003d categoryBox.SelectedIndex;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string categoryName \u003d (_categoryBinding[categoryIndex] as CustomComboBoxItem)?.actualName;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string categoryPath \u003d Path.Combine(ShapeRootFolderPath, categoryName);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            bool isDefaultCategory \u003d this.GetAddIn().ShapesLabConfig.DefaultCategory \u003d\u003d CurrentCategory;"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (isDefaultCategory)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                DialogResult result \u003d"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    MessageBox.Show(ShapesLabText.RemoveDefaultCategoryMessage,"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                    ShapesLabText.RemoveDefaultCategoryCaption,"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                    MessageBoxButtons.OKCancel);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (result \u003d\u003d DialogResult.Cancel)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // remove current category in shape gallery"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.GetAddIn().ShapePresentation.RemoveCategory();"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // remove category on the disk"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            FileDir.DeleteFolder(categoryPath);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ShapesLabUtils.SyncRemoveCategory(this.GetAddIn(), categoryIndex);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            RemoveCategory(categoryIndex);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (this.GetAddIn().ShapePresentation.DefaultCategory \u003d\u003d null)"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                this.GetAddIn().ShapePresentation.DefaultCategory \u003d CurrentCategory;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (isDefaultCategory)"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                CustomComboBoxItem item \u003d _categoryBinding[0] as CustomComboBoxItem;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                this.GetAddIn().ShapesLabConfig.DefaultCategory \u003d item?.actualName;"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                item?.SetNewDefaultCategory(this.GetAddIn().ShapesLabConfig.DefaultCategory);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                _categoryBinding.RemoveAt(0);"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                _categoryBinding.Insert(0, item);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                categoryBox.SelectedIndex \u003d 0;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void ContextMenuStripRenameCategoryClicked(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ShapesLabCategoryInfoDialogBox categoryInfoDialog \u003d new ShapesLabCategoryInfoDialogBox(string.Empty, false);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            categoryInfoDialog.DialogConfirmedHandler +\u003d (string newCategoryName) \u003d\u003e"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                // if current category is the default category, change ShapeConfig"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (this.GetAddIn().ShapesLabConfig.DefaultCategory \u003d\u003d CurrentCategory)"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    this.GetAddIn().ShapesLabConfig.DefaultCategory \u003d newCategoryName;"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                // rename the category in ShapeGallery"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                this.GetAddIn().ShapePresentation.RenameCategory(newCategoryName);"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                // rename the category on the disk"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                string newPath \u003d Path.Combine(ShapeRootFolderPath, newCategoryName);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                try"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    Directory.Move(CurrentShapeFolderPath, newPath);"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                catch (Exception)"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    // this may occur when the newCategoryName.tolower() \u003d\u003d oldCategoryName.tolower()"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                // rename the category in combo box"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                int categoryIndex \u003d categoryBox.SelectedIndex;"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ShapesLabUtils.SyncRenameCategory(this.GetAddIn(), categoryIndex, newCategoryName);"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                RenameCategory(categoryIndex, newCategoryName);"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            };"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            categoryInfoDialog.ShowDialog();"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shapeList.Focus();"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void ContextMenuStripSetAsDefaultCategoryClicked(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.GetAddIn().ShapesLabConfig.DefaultCategory \u003d CurrentCategory;"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MessageBox.Show(string.Format(ShapesLabText.SuccessSetAsDefaultCategory, CurrentCategory));"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            for (int index \u003d 0; index \u003c _categoryBinding.Count; index++)"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                CustomComboBoxItem category \u003d _categoryBinding[index] as CustomComboBoxItem;"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (category \u003d\u003d null || (!category.isDefaultCategory \u0026\u0026 category.actualName !\u003d CurrentCategory))"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                category.SetNewDefaultCategory(CurrentCategory);"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                _categoryBinding.RemoveAt(index);"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                _categoryBinding.Insert(index, category);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (category.actualName \u003d\u003d CurrentCategory)"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    categoryBox.SelectedIndex \u003d index;"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void ContextMenuStripSettingsClicked(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ShapesLabSettingsDialogBox settingsDialog \u003d new ShapesLabSettingsDialogBox(ShapeRootFolderPath);"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            settingsDialog.DialogConfirmedHandler +\u003d (string newSavePath) \u003d\u003e"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (!MigrateShapeFolder(ShapeRootFolderPath, newSavePath))"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ShapesLabSettings.SaveFolderPath \u003d newSavePath;"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                MessageBox.Show("
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    string.Format(ShapesLabText.SuccessSaveLocationChanged, newSavePath),"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    ShapesLabText.SuccessSaveLocationChangedTitle, MessageBoxButtons.OK,"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    MessageBoxIcon.Information);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            };"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            settingsDialog.ShowDialog();"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Helper Functions"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void SetupCategoryBoxItems()"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ObservableCollection\u003cCustomComboBoxItem\u003e categoryBoxItems \u003d new ObservableCollection\u003cCustomComboBoxItem\u003e();"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string defaultCategory \u003d this.GetAddIn().ShapePresentation.DefaultCategory;"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (string category in Categories)"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                categoryBoxItems.Add(new CustomComboBoxItem(category, defaultCategory));"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            _categoryBinding \u003d new BindingSource { DataSource \u003d categoryBoxItems };"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            categoryBox.ItemsSource \u003d _categoryBinding;"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            for (int i \u003d 0; i \u003c Categories.Count; i++)"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (Categories[i] \u003d\u003d CurrentCategory)"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    categoryBox.SelectedIndex \u003d i;"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void SetupMoveShapeContextMenu()"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            _contextMenuCategoryBinding \u003d new ObservableCollection\u003cMenuItem\u003e();"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (string category in Categories)"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                _contextMenuCategoryBinding.Add(new CustomMenuItem(category, MoveShapeClick));"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void DehighlightSelected()"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shapeList.UnselectAll();"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void DisableAddShapesButton()"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            addShapeButton.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "            addShapeImage.Source \u003d CommonUtil.CreateBitmapSource(Properties.Resources.AddToCustomShapesDisabled);"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void EnableAddShapesButton()"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            addShapeButton.IsEnabled \u003d true;"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "            addShapeImage.Source \u003d CommonUtil.CreateBitmapSource(Properties.Resources.AddToCustomShapes);"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private int GetShapeItemIndex(string shapeName)"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            for (int index \u003d 0; index \u003c shapeList.Items.Count; index++)"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if ((shapeList.Items[index] as CustomShapePaneItem).Text \u003d\u003d shapeName)"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    return index;"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// Returns the index at which the shape should be inserted lexicographically"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private int GetShapeInsertionIndex(string shapeName)"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            for (int index \u003d 0; index \u003c shapeList.Items.Count; index++)"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if ((shapeList.Items[index] as CustomShapePaneItem).Text.CompareTo(shapeName) \u003e\u003d 0)"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    return index;"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return shapeList.Items.Count;"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void PaneReload()"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // clear all and load shapes from folder"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shapeList.Items.Clear();"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            PrepareShapes();"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (shapeList.Items.IsEmpty)"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // scroll the view to show the first item"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shapeList.ScrollIntoView(shapeList.Items[0]);"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shapeList.Focus();"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private string GetShapePath(string shapeName)"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return CurrentShapeFolderPath + @\"\\\" + shapeName + \".png\";"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void RemoveShape(string shapeName)"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string shapePath \u003d GetShapePath(shapeName);"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!File.Exists(shapePath))"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // remove shape from disk and shape gallery"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            File.Delete(shapePath);"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // remove shape from shape gallery"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.GetAddIn().ShapePresentation.RemoveShape(shapeName);"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // sync shape removing among all task panes"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ShapesLabUtils.SyncShapeRemove(this.GetAddIn(), shapeName, CurrentCategory);"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            RemoveCustomShape(shapeName);"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Shape Storage"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private bool ImportShapes(string importFilePath, bool fromLibrary)"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            PowerPointShapeGalleryPresentation importShapeGallery \u003d PrepareImportGallery(importFilePath, fromLibrary);"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            try"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (!importShapeGallery.Open(withWindow: false, focus: false))"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    MessageBox.Show(ShapesLabText.ErrorImportFile);"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                else if (importShapeGallery.Slides.Count \u003d\u003d 0)"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    MessageBox.Show(ShapesLabText.ErrorImportNoSlide);"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                else"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    // if user tries to import shapes but the file contains multiple categories,"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    // stop processing and warn the user"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    if (!fromLibrary \u0026\u0026 importShapeGallery.Categories.Count \u003e 1)"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        MessageBox.Show("
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                            string.Format(ShapesLabText.ErrorImportSingleCategory,"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                          importShapeGallery.Name));"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        return false;"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    // copy all shapes in the import shape gallery to current shape gallery"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    if (fromLibrary)"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        ImportShapesFromLibrary(importShapeGallery);"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    else"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        ImportShapesFromSingleShape(importShapeGallery);"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ErrorDialogBox.ShowDialog(CommonText.ErrorTitle, e.Message, e);"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            finally"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                importShapeGallery.Close();"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                // delete the import file copy"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                FileDir.DeleteFile(Path.Combine(ShapeRootFolderPath, ImportFileNameNoExtension + \".pptlabsshapes\"));"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void ImportShapesFromLibrary(PowerPointShapeGalleryPresentation importShapeGallery)"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            PowerPointSlide currentSlide \u003d this.GetCurrentSlide();"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            PowerPointPresentation pres \u003d this.GetCurrentPresentation();"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ClipboardUtil.RestoreClipboardAfterAction(() \u003d\u003e"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                foreach (string importCategory in importShapeGallery.Categories)"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    importShapeGallery.CopyCategory(importCategory);"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    this.GetAddIn().ShapePresentation.AddCategory(importCategory, false, true);"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    _categoryBinding.Add(new CustomComboBoxItem(importCategory, null));"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    _contextMenuCategoryBinding.Add(new CustomMenuItem(importCategory, MoveShapeClick));"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return ClipboardUtil.ClipboardRestoreSuccess;"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }, pres, currentSlide);"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void ImportShapesFromSingleShape(PowerPointShapeGalleryPresentation importShapeGallery)"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ShapeRange shapeRange \u003d importShapeGallery.Slides[0].Shapes.Range();"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (shapeRange.Count \u003c 1)"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string shapeName \u003d shapeRange[1].Name;"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // Utilises deprecated classes as CustomShapePane does not utilise ActionFramework"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            PowerPointSlide currentSlide \u003d this.GetCurrentSlide();"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            PowerPointPresentation pres \u003d this.GetCurrentPresentation();"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ClipboardUtil.RestoreClipboardAfterAction(() \u003d\u003e"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                importShapeGallery.CopyShape(shapeName);"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                shapeName \u003d this.GetAddIn().ShapePresentation.AddShape(pres, currentSlide, null, shapeName, fromClipBoard: true);"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                string exportPath \u003d Path.Combine(CurrentShapeFolderPath, shapeName + \".png\");"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                GraphicsUtil.ExportShape(shapeRange, exportPath);"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return ClipboardUtil.ClipboardRestoreSuccess;"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }, pres, currentSlide);"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private bool MigrateShapeFolder(string oldPath, string newPath)"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            LoadingDialogBox loadingDialog \u003d new LoadingDialogBox(ShapesLabText.MigratingDialogTitle,"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                                    ShapesLabText.MigratingDialogContent);"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            loadingDialog.Show();"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // close the opening presentation"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (this.GetAddIn().ShapePresentation.Opened)"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                this.GetAddIn().ShapePresentation.Close();"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // migration only cares about if the folder has been copied to the new location entirely."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!FileDir.CopyFolder(oldPath, newPath))"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                loadingDialog.Close();"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                MessageBox.Show(ShapesLabText.ErrorMigration);"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // now we will try our best to delete the original folder, but this is not guaranteed"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // because some of the using files, such as some opening shapes, and the evil thumb.db"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!FileDir.DeleteFolder(oldPath))"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                MessageBox.Show(ShapesLabText.ErrorOriginalFolderDeletion);"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ShapeRootFolderPath \u003d newPath;"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // modify shape gallery presentation\u0027s path and name, then open it"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.GetAddIn().ShapePresentation.Path \u003d newPath;"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.GetAddIn().ShapePresentation.Open(withWindow: false, focus: false);"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.GetAddIn().ShapePresentation.DefaultCategory \u003d CurrentCategory;"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            loadingDialog.Close();"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void PrepareFolder()"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!Directory.Exists(CurrentShapeFolderPath))"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Directory.CreateDirectory(CurrentShapeFolderPath);"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private PowerPointShapeGalleryPresentation PrepareImportGallery(string importFilePath, bool fromCategory)"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string importFileCopyPath \u003d Path.Combine(ShapeRootFolderPath, ImportFileCopyName);"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // copy the file to the current shape root if the file is not under root "
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!File.Exists(importFileCopyPath))"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                File.Copy(importFilePath, importFileCopyPath);"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // init the file as an imported file"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            PowerPointShapeGalleryPresentation importShapeGallery \u003d new PowerPointShapeGalleryPresentation(ShapeRootFolderPath,"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                                                            ImportFileNameNoExtension)"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                IsImportedFile \u003d true,"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ImportToCategory \u003d fromCategory ? string.Empty : CurrentCategory"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            };"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return importShapeGallery;"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void PrepareShapes()"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            PrepareFolder();"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            IOrderedEnumerable\u003cstring\u003e shapes \u003d"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Directory.EnumerateFiles(CurrentShapeFolderPath, \"*.png\")"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                .OrderBy(item \u003d\u003e item, _stringComparer);"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (string shape in shapes)"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                string shapeName \u003d Path.GetFileNameWithoutExtension(shape);"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (shapeName \u003d\u003d null)"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    MessageBox.Show(ShapesLabText.ErrorFileNameInvalid);"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                AddCustomShape(shapeName, shape, false);"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            DehighlightSelected();"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Event Handlers"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void WrapPanelLoaded(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            wrapPanel \u003d sender as WrapPanel;"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void CategoryBoxSelectedIndexChanged(object sender, EventArgs e)"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            int selectedIndex \u003d categoryBox.SelectedIndex;"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (selectedIndex \u003d\u003d -1)"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string selectedCategory \u003d (_categoryBinding[selectedIndex] as CustomComboBoxItem)?.actualName;"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CurrentCategory \u003d selectedCategory;"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.GetAddIn().ShapePresentation.DefaultCategory \u003d selectedCategory;"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            PaneReload();"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void AddShapeButton_Click(object sender, EventArgs e)"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Selection selection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            AddShapeFromSelection(selection);"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void ClickOutsideShapeList(object sender, MouseButtonEventArgs e)"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            categoryBox.Focus();"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void Hyperlink_RequestNavigate(object sender, RequestNavigateEventArgs e)"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Process.Start(new ProcessStartInfo(e.Uri.AbsoluteUri));"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            e.Handled \u003d true;"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void MoveShapeClick(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomMenuItem item \u003d sender as CustomMenuItem;"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (item \u003d\u003d null)"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MoveShapes(item.actualName);"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 953,
      "-": 5
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ShapesLab/Views/ShapesLabCategoryInfoDialogBox.xaml.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Text.RegularExpressions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.ShapesLab.Views"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    /// Interaction logic for ShapesLabCategoryInfoDialogBox.xaml"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public partial class ShapesLabCategoryInfoDialogBox"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        public delegate void DialogConfirmedDelegate(string categoryName);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        public DialogConfirmedDelegate DialogConfirmedHandler { get; set; }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // for names, we do not allow name involves"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        // \u003c (less than)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        // \u003e (greater than)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // : (colon)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        // \" (double quote)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // / (forward slash)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // \\ (backslash)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // | (vertical bar or pipe)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // ? (question mark)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // * (asterisk)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // Windows reserved file names."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string InvalidCharsRegex \u003d \"^.*(?i)(CON|PRN|AUX|NUL|COM1|COM2|COM3|COM4|COM5|COM6|COM7|COM8|COM9|LPT1|LPT2|LPT3|LPT4|LPT5|LPT6|LPT7|LPT8|LPT9)(?-i).*$|[\u003c\u003e:\\\"/\\\\\\\\|?*]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private bool shouldUseExistingCategory;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        public ShapesLabCategoryInfoDialogBox()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            InitializeComponent();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public ShapesLabCategoryInfoDialogBox(string categoryName, bool shouldUseExistingCategory)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            : this()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!string.IsNullOrEmpty(categoryName))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                nameInput.Text \u003d categoryName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                nameInput.SelectAll();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.shouldUseExistingCategory \u003d shouldUseExistingCategory;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        private void OkButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string name \u003d nameInput.Text.Trim();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            if (VerifyName(name) \u0026\u0026 VerifyCategory(name))"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                DialogConfirmedHandler(name);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                Close();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Helper Functions"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool VerifyName(string name)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Utils.ShapeUtil.IsShapeNameOverMaximumLength(name))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(CommonText.ErrorNameTooLong);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            Regex invalidChars \u003d new Regex(InvalidCharsRegex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            if (string.IsNullOrWhiteSpace(name) || invalidChars.IsMatch(name))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(CommonText.ErrorInvalidCharacter);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool VerifyCategory(string name)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!shouldUseExistingCategory \u0026\u0026 this.GetAddIn().ShapePresentation.HasCategory(name))"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(ShapesLabText.ErrorDuplicateCategoryName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            else if (shouldUseExistingCategory \u0026\u0026 !this.GetAddIn().ShapePresentation.HasCategory(name))"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                MessageBox.Show(ShapesLabText.ErrorCategoryNameMissing);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        # endregion"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 10,
      "-": 86
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ShortcutsLab/ConvertToPicture.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Forms;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using Office \u003d Microsoft.Office.Core;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPoint \u003d Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.ShortcutsLab"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    internal static class ConvertToPicture"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "#pragma warning disable 0618"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void Convert(PowerPointPresentation pres, PowerPointSlide slide, PowerPoint.Selection selection)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ShapeUtil.IsSelectionShapeOrText(selection))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.Shape shape \u003d GetShapeFromSelection(selection);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                int originalZOrder \u003d shape.ZOrderPosition;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                // In case shape is corrupted"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                if (ShapeUtil.IsCorrupted(shape))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                    shape \u003d ShapeUtil.CorruptionCorrection(shape, slide);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                ConvertToPictureForShape(pres, slide, shape, originalZOrder);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(ShortcutsLabText.ErrorTypeNotSupported, ShortcutsLabText.ErrorWindowTitle);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool ConvertAndSave(ShapeRange selectedShapes, string fileName)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!ShapeUtil.IsShapeRangeShapeOrText(selectedShapes))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(ShortcutsLabText.ErrorTypeNotSupported, ShortcutsLabText.ErrorWindowTitle);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                GraphicsUtil.ExportShape(selectedShapes, fileName);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(\"Exception during export shapes: \" + e.Message, ShortcutsLabText.ErrorWindowTitle);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void ConvertToPictureForShape(PowerPointPresentation pres, PowerPointSlide slide, PowerPoint.Shape shape, int originalZOrder)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            float rotation \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                rotation \u003d shape.Rotation;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.Rotation \u003d 0;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(e, \"Chart cannot be rotated.\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            ClipboardUtil.RestoreClipboardAfterAction(() \u003d\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.Copy();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                float x \u003d shape.Left;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                float y \u003d shape.Top;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                float width \u003d shape.Width;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                float height \u003d shape.Height;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.Delete();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.Shape pic \u003d slide.Shapes.PasteSpecial(PowerPoint.PpPasteDataType.ppPastePNG)[1];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                pic.Left \u003d x + (width - pic.Width) / 2;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                pic.Top \u003d y + (height - pic.Height) / 2;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                pic.Rotation \u003d rotation;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                // move picture to original z-order"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                while (pic.ZOrderPosition \u003e originalZOrder)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                    pic.ZOrder(Office.MsoZOrderCmd.msoSendBackward);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                while (pic.ZOrderPosition \u003c originalZOrder)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                    pic.ZOrder(Office.MsoZOrderCmd.msoBringForward);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                pic.Select();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                return pic;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }, pres, slide);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        private static PowerPoint.Shape GetShapeFromSelection(PowerPoint.Selection selection)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return GetShapeFromSelection(selection.ShapeRange);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        private static PowerPoint.Shape GetShapeFromSelection(PowerPoint.ShapeRange shapeRange)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Shape result \u003d shapeRange.Count \u003e 1 ? shapeRange.Group() : shapeRange[1];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 1,
      "-": 108
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ShortcutsLab/ShortcutsLabConstants.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blewjy"
        },
        "content": "﻿"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace PowerPointLabs.ShortcutsLab"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blewjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    static class ShortcutsLabConstants"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public const string ExportSlideSaveFileDialogTitle \u003d \"Export Slide As Image\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public const string ExportSlideSaveFileDialogExtension \u003d \"png\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public const string ExportSlideSaveFileDialogFilter \u003d \"Images|*.png;*.bmp;*.jpg\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blewjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 10
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/ArtisticEffectFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * ArtisticEffects cannot be chained, despite the PictureEffect returning a collection of PictureEffect objects"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * It is not clear what a PictureEffect truly represents"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Users cannot manually select picture effects they wish to apply"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    class ArtisticEffectFormat: Format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                return formatShape.Fill.PictureEffects.Count \u003e 0;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            } "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            catch"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync ArtisticEffect Format\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap image \u003d GraphicsUtil.ShapeToBitmap(formatShape);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        public static List\u003cMsoPictureEffectType\u003e GetArtisticEffects(Shape shape)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cMsoPictureEffectType\u003e artisticEffects \u003d new List\u003cMsoPictureEffectType\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                PictureEffects effects \u003d shape.Fill.PictureEffects;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d effects.Count; i++)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    PictureEffect effect \u003d effects[i];"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                    artisticEffects.Add(effect.Type);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                // do nothing, shape does not support picture effect"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return artisticEffects;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void ClearArtisticEffects(Shape shape)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                PictureEffects dest \u003d shape.Fill.PictureEffects;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d dest.Count; i++)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.Delete(i);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                // ignore the exception, this shape is not compatible with ArtisticEffects."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void ApplyArtisticEffects(Shape shape, List\u003cMsoPictureEffectType\u003e effectTypes)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            // add new effects"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                PictureEffects dest \u003d shape.Fill.PictureEffects;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c effectTypes.Count; i++)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                    int index \u003d i + 1;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.Insert(effectTypes[i], index);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                // ignore the exception, this shape is not compatible with ArtisticEffects."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * Replace all existing artistic effects with those from the source shape"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                // access PictureEffects, just to make sure shapes are compatible with ArtisticEffect"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                // will throw an exception otherwise"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                PictureEffects dest \u003d newShape.Fill.PictureEffects;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                PictureEffects source \u003d formatShape.Fill.PictureEffects;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cMsoPictureEffectType\u003e effectTypes \u003d GetArtisticEffects(formatShape);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                // clear the existing artistic effects,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                // might experience unexpected behavior if they are left in the shape"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                ClearArtisticEffects(newShape);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                ApplyArtisticEffects(newShape, effectTypes);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync ArtisticEffectFormat\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 124
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/BevelBottomFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using Shapes \u003d Microsoft.Office.Interop.PowerPoint.Shapes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using ThreeDFormat \u003d Microsoft.Office.Interop.PowerPoint.ThreeDFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    class BevelBottomFormat: Format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync BevelBottom Format\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Shapes shapes \u003d SyncFormatUtil.GetTemplateShapes();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shape \u003d shapes.AddShape("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    MsoAutoShapeType.msoShapeRectangle, 0, 0, "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Width,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Height);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Line.Visible \u003d MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.Depth \u003d SyncFormatConstants.DisplayImageDepth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            // don\u0027t set type if type is TypeMixed, it throws an exception"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            if (formatShape.ThreeD.BevelBottomType !\u003d MsoBevelType.msoBevelTypeMixed)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                // paste the effect type on the top bevel to reuse the rotation constants"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.ThreeD.BevelTopType \u003d formatShape.ThreeD.BevelBottomType;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                // set depth \u0026 inset only if type is not none,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                // adjusting these 2 will automatically set type from None to Round"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shape.ThreeD.BevelTopType !\u003d MsoBevelType.msoBevelNone)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    shape.ThreeD.BevelTopDepth \u003d SyncFormatConstants.DisplayBevelHeight;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    shape.ThreeD.BevelTopInset \u003d SyncFormatConstants.DisplayBevelWidth;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.BevelBottomType \u003d MsoBevelType.msoBevelNone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.SetPresetCamera(MsoPresetCamera.msoCameraPerspectiveBelow);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.PresetLighting \u003d MsoLightRigType.msoLightRigBalanced;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap image \u003d new Bitmap(GraphicsUtil.ShapeToBitmap(shape));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Delete();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat source \u003d formatShape.ThreeD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat dest \u003d newShape.ThreeD;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                // bottom bevel"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                // don\u0027t set type if type is TypeMixed, it throws an exception"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                if (source.BevelBottomType !\u003d MsoBevelType.msoBevelTypeMixed)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.BevelBottomType \u003d source.BevelBottomType;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                    // set depth \u0026 inset only if type is not none,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    // adjusting these 2 will automatically set type from None to Round"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (source.BevelBottomType !\u003d MsoBevelType.msoBevelNone)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                        // set the settings anyway, setting the type alone is insufficient"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                        dest.BevelBottomDepth \u003d source.BevelBottomDepth;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                        dest.BevelBottomInset \u003d source.BevelBottomInset;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync BevelBottomFormat\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 92
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/BevelTopFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using Shapes \u003d Microsoft.Office.Interop.PowerPoint.Shapes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using ThreeDFormat \u003d Microsoft.Office.Interop.PowerPoint.ThreeDFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    class BevelTopFormat: Format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync BevelTop Format\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Shapes shapes \u003d SyncFormatUtil.GetTemplateShapes();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shape \u003d shapes.AddShape("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    MsoAutoShapeType.msoShapeRectangle, 0, 0, "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Width,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Height);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Line.Visible \u003d MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.Depth \u003d SyncFormatConstants.DisplayImageDepth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            // don\u0027t set type if type is TypeMixed, it throws an exception"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            if (formatShape.ThreeD.BevelTopType !\u003d MsoBevelType.msoBevelTypeMixed)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.ThreeD.BevelTopType \u003d formatShape.ThreeD.BevelTopType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                // set depth \u0026 inset only if type is not none,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                // adjusting these 2 will automatically set type from None to Round"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shape.ThreeD.BevelTopType !\u003d MsoBevelType.msoBevelNone)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    shape.ThreeD.BevelTopDepth \u003d SyncFormatConstants.DisplayBevelHeight;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    shape.ThreeD.BevelTopInset \u003d SyncFormatConstants.DisplayBevelWidth;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.BevelBottomType \u003d MsoBevelType.msoBevelNone;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.SetPresetCamera(MsoPresetCamera.msoCameraPerspectiveAbove);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.PresetLighting \u003d MsoLightRigType.msoLightRigBalanced;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap image \u003d new Bitmap(GraphicsUtil.ShapeToBitmap(shape));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Delete();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat source \u003d formatShape.ThreeD;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat dest \u003d newShape.ThreeD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                // don\u0027t set type if type is TypeMixed, it throws an exception"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                if (source.BevelTopType !\u003d MsoBevelType.msoBevelTypeMixed)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.BevelTopType \u003d source.BevelTopType;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                    // set depth \u0026 inset only if type is not none,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    // adjusting these 2 will automatically set type from None to Round"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (source.BevelTopType !\u003d MsoBevelType.msoBevelNone)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                        // set the settings anyway, setting the type alone is insufficient"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                        dest.BevelTopDepth \u003d source.BevelTopDepth;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                        dest.BevelTopInset \u003d source.BevelTopInset;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync BevelTopFormat\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 2,
      "-": 91
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/ContourColorFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using Shapes \u003d Microsoft.Office.Interop.PowerPoint.Shapes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using ThreeDFormat \u003d Microsoft.Office.Interop.PowerPoint.ThreeDFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    class ContourColorFormat: Format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync ContourColor Format\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Shapes shapes \u003d SyncFormatUtil.GetTemplateShapes();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shape \u003d shapes.AddShape("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    MsoAutoShapeType.msoShapeRectangle, 0, 0, "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Width,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Height);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Fill.ForeColor.RGB \u003d formatShape.ThreeD.ContourColor.RGB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Fill.ForeColor.TintAndShade \u003d formatShape.ThreeD.ContourColor.TintAndShade;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Line.Visible \u003d MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap image \u003d new Bitmap(GraphicsUtil.ShapeToBitmap(shape));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Delete();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat source \u003d formatShape.ThreeD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat dest \u003d newShape.ThreeD;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                // do not set SchemeColor, Brightness \u0026 ObjectThemeColor, setting them throws exceptions"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                dest.ContourColor.RGB \u003d source.ContourColor.RGB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                dest.ContourColor.TintAndShade \u003d source.ContourColor.TintAndShade;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync ContourColorFormat\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 4,
      "-": 65
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/ContourWidthFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using ThreeDFormat \u003d Microsoft.Office.Interop.PowerPoint.ThreeDFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    class ContourWidthFormat: Format"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync ContourWidth Format\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                $\"{Math.Round(formatShape.ThreeD.ContourWidth, 1)} {SyncFormatConstants.DisplaySizeUnit}\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageFont,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat source \u003d formatShape.ThreeD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat dest \u003d newShape.ThreeD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                dest.ContourWidth \u003d source.ContourWidth;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync ContourWidthFormat\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 2,
      "-": 53
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/DepthColorFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using Shapes \u003d Microsoft.Office.Interop.PowerPoint.Shapes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using ThreeDFormat \u003d Microsoft.Office.Interop.PowerPoint.ThreeDFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    class DepthColorFormat: Format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync DepthColor Format\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Shapes shapes \u003d SyncFormatUtil.GetTemplateShapes();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shape \u003d shapes.AddShape("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    MsoAutoShapeType.msoShapeRectangle, 0, 0, "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Width,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Height);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            // do not sync extrusion theme color with forecolor, it throws an exception"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Fill.ForeColor.RGB \u003d formatShape.ThreeD.ExtrusionColor.RGB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Fill.ForeColor.TintAndShade \u003d formatShape.ThreeD.ExtrusionColor.TintAndShade;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Line.Visible \u003d MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap image \u003d new Bitmap(GraphicsUtil.ShapeToBitmap(shape));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Delete();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat source \u003d formatShape.ThreeD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat dest \u003d newShape.ThreeD;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                // don\u0027t set type if type is TypeMixed, it throws an exception"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                if (source.ExtrusionColorType !\u003d MsoExtrusionColorType.msoExtrusionColorTypeMixed)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.ExtrusionColorType \u003d source.ExtrusionColorType;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                if (source.ExtrusionColorType !\u003d MsoExtrusionColorType.msoExtrusionColorAutomatic)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    // do not set SchemeColor \u0026 Brightness, setting them throws exceptions"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.ExtrusionColor.ObjectThemeColor \u003d source.ExtrusionColor.ObjectThemeColor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.ExtrusionColor.RGB \u003d source.ExtrusionColor.RGB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.ExtrusionColor.TintAndShade \u003d source.ExtrusionColor.TintAndShade;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync DepthColorFormat\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 2,
      "-": 76
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/DepthSizeFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using ThreeDFormat \u003d Microsoft.Office.Interop.PowerPoint.ThreeDFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    class DepthSizeFormat: Format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync DepthSize Format\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            float depth \u003d formatShape.ThreeD.Depth;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            if (HasErrorneousDepth(formatShape))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                depth \u003d 0f;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                $\"{Math.Round(depth, 1)} {SyncFormatConstants.DisplaySizeUnit}\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageFont,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat source \u003d formatShape.ThreeD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat dest \u003d newShape.ThreeD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                if (HasErrorneousDepth(formatShape) \u0026\u0026 HasErrorneousDepth(newShape))"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    // both have no 3d settings, do nothing"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    // setting depth here changes the color of the shape slightly for unknown reasons"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                    // we cannot revert this change"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                float depth \u003d source.Depth;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                if (HasErrorneousDepth(formatShape))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    // fresh shapes actually have 0 depth"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    depth \u003d 0f;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                dest.Depth \u003d depth;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync DepthSizeFormat\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "         * Checks if the shape gives the wrong depth"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "         * The API gives the wrong depth value at times (gives 36, when it should be 0)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool HasErrorneousDepth(Shape shape)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            // seems to happen PresetMaterial \u003d\u003d Mixed "
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            // the Mixed type seems to be reserved for shapes with untouched depth, material or contour"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return shape.ThreeD.PresetMaterial \u003d\u003d MsoPresetMaterial.msoPresetMaterialMixed;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 2,
      "-": 85
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/FillFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    class FillFormat: Format "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape duplicateShape \u003d formatShape.Duplicate()[1];"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            bool canCopy \u003d Sync(formatShape, duplicateShape);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            duplicateShape.Delete();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            return canCopy;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync Fill\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Shapes shapes \u003d SyncFormatUtil.GetTemplateShapes();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shape \u003d shapes.AddShape("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    Microsoft.Office.Core.MsoAutoShapeType.msoShapeRectangle, 0, 0, "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Width,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Height);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Line.Visible \u003d Microsoft.Office.Core.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            SyncFormat(formatShape, shape);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap image \u003d new Bitmap(GraphicsUtil.ShapeToBitmap(shape));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Delete();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                // force msoFillMixed to msoFillSolid"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                // freshly created textboxes have the msoFillMixed type "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                // otherwise, msoFillMixed only appears when multiple shapes are selected"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                // manual conversion is needed as msoFillMixed textboxes risk system forced conversions to msoFillSolid"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                // system forced conversions will set fill color to black"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                //"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                // lines also have the msoFillMixed type"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                // they have no fill, throwing an exception in the following if block"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                // this is desired behavior, disabling FillFormat for lines"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                if (formatShape.Fill.Type \u003d\u003d Microsoft.Office.Core.MsoFillType.msoFillMixed)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    int oldColor \u003d formatShape.Fill.ForeColor.RGB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    float oldTransparency \u003d formatShape.Fill.Transparency;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                    formatShape.Fill.Solid();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                    formatShape.Fill.ForeColor.RGB \u003d oldColor;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    formatShape.Fill.Transparency \u003d oldTransparency;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                switch (formatShape.Fill.Type)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    case Microsoft.Office.Core.MsoFillType.msoFillPatterned:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                        newShape.Fill.Patterned(formatShape.Fill.Pattern);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                        newShape.Fill.ForeColor.RGB \u003d formatShape.Fill.ForeColor.RGB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                        newShape.Fill.BackColor.RGB \u003d formatShape.Fill.BackColor.RGB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    case Microsoft.Office.Core.MsoFillType.msoFillBackground:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                        newShape.Fill.Background();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    case Microsoft.Office.Core.MsoFillType.msoFillSolid:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                        newShape.Fill.Solid();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                        newShape.Fill.ForeColor.RGB \u003d formatShape.Fill.ForeColor.RGB;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    case Microsoft.Office.Core.MsoFillType.msoFillGradient:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                        SyncGradient(formatShape, newShape);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    default:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync FillFormat\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void SyncGradient(Shape formatShape, Shape newShape) //should return bool?"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            Microsoft.Office.Core.MsoGradientColorType gradientColorType \u003d formatShape.Fill.GradientColorType;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            if (gradientColorType \u003d\u003d Microsoft.Office.Core.MsoGradientColorType.msoGradientOneColor)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.Fill.OneColorGradient(formatShape.Fill.GradientStyle, formatShape.Fill.GradientVariant, formatShape.Fill.GradientDegree);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncInitialGradientStops(formatShape, newShape);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            else if (gradientColorType \u003d\u003d Microsoft.Office.Core.MsoGradientColorType.msoGradientTwoColors)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.Fill.TwoColorGradient(formatShape.Fill.GradientStyle, formatShape.Fill.GradientVariant);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncInitialGradientStops(formatShape, newShape);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            else if (gradientColorType \u003d\u003d Microsoft.Office.Core.MsoGradientColorType.msoGradientPresetColors)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.Fill.PresetGradient(formatShape.Fill.GradientStyle, formatShape.Fill.GradientVariant, formatShape.Fill.PresetGradientType);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            else if (gradientColorType \u003d\u003d Microsoft.Office.Core.MsoGradientColorType.msoGradientMultiColor)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                int formatGradientVarient \u003d 1;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                try"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                    formatGradientVarient \u003d formatShape.Fill.GradientVariant;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                catch"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                    formatGradientVarient \u003d 1;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.Fill.OneColorGradient(formatShape.Fill.GradientStyle, formatGradientVarient, 0);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncInitialGradientStops(formatShape, newShape);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 3; i \u003c\u003d formatShape.Fill.GradientStops.Count; i++)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                    newShape.Fill.GradientStops.Insert(formatShape.Fill.GradientStops[i].Color.RGB,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                        formatShape.Fill.GradientStops[i].Position, formatShape.Fill.GradientStops[i].Transparency);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                try"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    newShape.Fill.GradientAngle \u003d formatShape.Fill.GradientAngle;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                catch (Exception)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                    //gradient has no angle"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void SyncInitialGradientStops(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            newShape.Fill.GradientStops[1].Color.RGB \u003d formatShape.Fill.GradientStops[1].Color.RGB;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            newShape.Fill.GradientStops[1].Position \u003d formatShape.Fill.GradientStops[1].Position;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            newShape.Fill.GradientStops[2].Color.RGB \u003d formatShape.Fill.GradientStops[2].Color.RGB;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            newShape.Fill.GradientStops[2].Position \u003d formatShape.Fill.GradientStops[2].Position;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            newShape.Fill.RotateWithObject \u003d formatShape.Fill.RotateWithObject;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 13,
      "-": 141
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/FillTransparencyFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    class FillTransparencyFormat: Format"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            return Sync(formatShape, formatShape);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync Fill Transparency\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                Math.Round(formatShape.Fill.Transparency*100).ToString() + \"%\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageFont,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.Fill.Transparency \u003d formatShape.Fill.Transparency;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync FillTransparencyFormat\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 44
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/FontColorFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using Shapes \u003d Microsoft.Office.Interop.PowerPoint.Shapes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    class FontColorFormat: Format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            return formatShape.HasTextFrame \u003d\u003d MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync Font Color\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            Shapes shapes \u003d SyncFormatUtil.GetTemplateShapes();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shape \u003d shapes.AddShape("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    Microsoft.Office.Core.MsoAutoShapeType.msoShapeRectangle, 0, 0,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Width,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Height);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Line.Visible \u003d Microsoft.Office.Core.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            int guessedColor \u003d ShapeUtil.GuessTextColor(formatShape);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Fill.ForeColor.RGB \u003d guessedColor;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Fill.BackColor.RGB \u003d guessedColor;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Fill.Solid();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap image \u003d GraphicsUtil.ShapeToBitmap(shape);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Delete();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                int guessedColor \u003d ShapeUtil.GuessTextColor(formatShape);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.TextFrame.TextRange.Font.Color.RGB \u003d guessedColor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync FontColorFormat\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 59
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/FontFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    class FontFormat: Format"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            return Sync(formatShape, formatShape);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync Font Format\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayFontString,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                new System.Drawing.Font(formatShape.TextEffect.FontName,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                                        SyncFormatConstants.DisplayImageFontSize),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.TextEffect.FontName \u003d formatShape.TextEffect.FontName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync FontFormat\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 45
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/FontSizeFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    class FontSizeFormat: Format"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            return Sync(formatShape, formatShape);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync Font Size\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                Math.Round(formatShape.TextEffect.FontSize).ToString(),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageFont,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.TextEffect.FontSize \u003d formatShape.TextEffect.FontSize;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync FontSizeFormat\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 44
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/FontStyleFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    class FontStyleFormat: Format"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            return Sync(formatShape, formatShape);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync Font Style\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            System.Drawing.Font font \u003d SyncFormatConstants.DisplayImageFont;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.Font formatFont \u003d formatShape.TextFrame.TextRange.Font;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FontStyle style \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            if (formatFont.Underline \u003d\u003d Microsoft.Office.Core.MsoTriState.msoTrue)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                style |\u003d FontStyle.Underline;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            if (formatFont.Bold \u003d\u003d Microsoft.Office.Core.MsoTriState.msoTrue)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                style |\u003d FontStyle.Bold;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            if (formatFont.Italic \u003d\u003d Microsoft.Office.Core.MsoTriState.msoTrue)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                style |\u003d FontStyle.Italic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            font \u003d new System.Drawing.Font(font.FontFamily, font.Size, style);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay(SyncFormatConstants.DisplayFontString, font,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                                                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncTextRange(formatShape.TextFrame.TextRange, newShape.TextFrame.TextRange);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync FontStyleFormat\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void SyncTextRange(TextRange formatTextRange, TextRange newTextRange)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            newTextRange.Font.Underline \u003d formatTextRange.Font.Underline;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            newTextRange.Font.Bold \u003d formatTextRange.Font.Bold;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            newTextRange.Font.Italic \u003d formatTextRange.Font.Italic;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 65
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/GlowColorFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using Shapes \u003d Microsoft.Office.Interop.PowerPoint.Shapes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    class GlowColorFormat: Format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            GlowFormat glow \u003d formatShape.Glow;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            return glow.Radius \u003e 0 \u0026\u0026 glow.Transparency \u003e 0.0f;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync GlowEffect Format\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Shapes shapes \u003d SyncFormatUtil.GetTemplateShapes();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shape \u003d shapes.AddShape("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    Microsoft.Office.Core.MsoAutoShapeType.msoShapeRectangle, 0, 0,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Width,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Height);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Line.Visible \u003d Microsoft.Office.Core.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Fill.ForeColor.RGB \u003d formatShape.Glow.Color.RGB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Fill.ForeColor.Brightness \u003d formatShape.Glow.Color.Brightness;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Fill.ForeColor.TintAndShade \u003d formatShape.Glow.Color.TintAndShade;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Fill.Solid();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap image \u003d GraphicsUtil.ShapeToBitmap(shape);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Delete();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                GlowFormat dest \u003d newShape.Glow;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                GlowFormat source \u003d formatShape.Glow;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                // Color.SchemeColor must be skipped, setting it sometimes throws an exception for unknown reasons."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                // Color.ObjectThemeColor must be set despite the unrelated description in documentation."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                // The color intensity of glow will not match otherwise"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                // syncing NotFavoriteColor throws an exception"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                if (source.Color.ObjectThemeColor !\u003d MsoThemeColorIndex.msoNotThemeColor)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.Color.ObjectThemeColor \u003d source.Color.ObjectThemeColor;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                "
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                dest.Color.RGB \u003d source.Color.RGB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                dest.Color.Brightness \u003d source.Color.Brightness;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                dest.Color.TintAndShade \u003d source.Color.TintAndShade;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync GlowColorFormat\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 4,
      "-": 74
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/GlowSizeFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    class GlowSizeFormat: Format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            GlowFormat glow \u003d formatShape.Glow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            return glow.Radius \u003e 0 \u0026\u0026 glow.Transparency \u003e 0.0f;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync GlowSize Format\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                Math.Round(formatShape.Glow.Radius).ToString(),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageFont,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                GlowFormat dest \u003d newShape.Glow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                GlowFormat source \u003d formatShape.Glow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                dest.Radius \u003d source.Radius;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync GlowSizeFormat\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 50
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/GlowTransparencyFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    class GlowTransparencyFormat: Format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            GlowFormat glow \u003d formatShape.Glow;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            return glow.Radius \u003e 0 \u0026\u0026 glow.Transparency \u003e 0.0f;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync GlowTransparency Format\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                Math.Round(formatShape.Glow.Transparency * 100).ToString() + \"%\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageFont,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                GlowFormat dest \u003d newShape.Glow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                GlowFormat source \u003d formatShape.Glow;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                dest.Transparency \u003d source.Transparency;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync GlowTransparencyFormat\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 50
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/LightingAngleFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using ThreeDFormat \u003d Microsoft.Office.Interop.PowerPoint.ThreeDFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    class LightingAngleFormat: Format"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync LightingEffect Format\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                $\"{formatShape.ThreeD.LightAngle}{SyncFormatConstants.DisplayDegreeSymbol}\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageFont,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat source \u003d formatShape.ThreeD;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat dest \u003d newShape.ThreeD;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                dest.LightAngle \u003d source.LightAngle;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync LightingAngleFormat\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 2,
      "-": 52
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/LightingEffectFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using Shapes \u003d Microsoft.Office.Interop.PowerPoint.Shapes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using ThreeDFormat \u003d Microsoft.Office.Interop.PowerPoint.ThreeDFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    class LightingEffectFormat: Format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync LightingEffect Format\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Shapes shapes \u003d SyncFormatUtil.GetTemplateShapes();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shape \u003d shapes.AddShape("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    MsoAutoShapeType.msoShapeRectangle, 0, 0, "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Width,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Height);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Line.Visible \u003d MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.Depth \u003d SyncFormatConstants.DisplayImageDepth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.BevelTopType \u003d SyncFormatConstants.DisplayBevelType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.BevelTopDepth \u003d SyncFormatConstants.DisplayBevelHeight;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.BevelTopInset \u003d SyncFormatConstants.DisplayBevelWidth;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.BevelBottomType \u003d SyncFormatConstants.DisplayBevelType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.BevelBottomDepth \u003d SyncFormatConstants.DisplayBevelHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.BevelBottomInset \u003d SyncFormatConstants.DisplayBevelWidth;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            // setting mixed throws an exception"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            if (formatShape.ThreeD.PresetLighting !\u003d MsoLightRigType.msoLightRigMixed)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.ThreeD.PresetLighting \u003d formatShape.ThreeD.PresetLighting;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.SetPresetCamera(SyncFormatConstants.DisplayCameraPreset);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap image \u003d new Bitmap(GraphicsUtil.ShapeToBitmap(shape));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Delete();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat source \u003d formatShape.ThreeD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat dest \u003d newShape.ThreeD;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                // set lighting manually if type Mixed, setting type to Mixed throws an exception"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                if (source.PresetLighting \u003d\u003d MsoLightRigType.msoLightRigMixed)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.PresetLightingDirection \u003d source.PresetLightingDirection;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.PresetLightingSoftness \u003d source.PresetLightingSoftness;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                    // set lighting preset if not type Mixed"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.PresetLighting \u003d source.PresetLighting;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync LightingEffectFormat\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 4,
      "-": 85
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/LineArrowFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    class LineArrowFormat: Format"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            return Sync(formatShape, formatShape);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync Line Arrow\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Shapes shapes \u003d SyncFormatUtil.GetTemplateShapes();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shape \u003d shapes.AddLine("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                0, SyncFormatConstants.DisplayImageSize.Height,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize.Width, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            SyncFormat(formatShape, shape);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap image \u003d GraphicsUtil.ShapeToBitmap(shape);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Delete();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.Line.BeginArrowheadLength \u003d formatShape.Line.BeginArrowheadLength;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.Line.BeginArrowheadStyle \u003d formatShape.Line.BeginArrowheadStyle;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.Line.BeginArrowheadWidth \u003d formatShape.Line.BeginArrowheadWidth;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.Line.EndArrowheadLength \u003d formatShape.Line.EndArrowheadLength;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.Line.EndArrowheadStyle \u003d formatShape.Line.EndArrowheadStyle;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.Line.EndArrowheadWidth \u003d formatShape.Line.EndArrowheadWidth;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync LineArrowFormat\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 2,
      "-": 56
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/LineCompoundTypeFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    class LineCompoundTypeFormat: Format"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            return Sync(formatShape, formatShape);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync Line Style\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Shapes shapes \u003d SyncFormatUtil.GetTemplateShapes();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shape \u003d shapes.AddLine("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                0, SyncFormatConstants.DisplayImageSize.Height,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize.Width, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            SyncFormat(formatShape, shape);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Line.ForeColor.RGB \u003d SyncFormatConstants.ColorBlack;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Line.Weight \u003d SyncFormatConstants.DisplayLineWeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap image \u003d GraphicsUtil.ShapeToBitmap(shape);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Delete();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.Line.Style \u003d formatShape.Line.Style;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync LineCompoundTypeFormat\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 51
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/LineDashTypeFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    class LineDashTypeFormat: Format"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            return Sync(formatShape, formatShape);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync Dash Style\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Shapes shapes \u003d SyncFormatUtil.GetTemplateShapes();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shape \u003d shapes.AddLine("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                0, SyncFormatConstants.DisplayImageSize.Height,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize.Width, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            SyncFormat(formatShape, shape);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Line.ForeColor.RGB \u003d SyncFormatConstants.ColorBlack;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Line.Weight \u003d SyncFormatConstants.DisplayLineWeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap image \u003d GraphicsUtil.ShapeToBitmap(shape);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Delete();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.Line.DashStyle \u003d formatShape.Line.DashStyle;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync LineDashTypeFormat\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 51
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/LineFillFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    class LineFillFormat: Format"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            return Sync(formatShape, formatShape);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync Line Fill\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            Shapes shapes \u003d SyncFormatUtil.GetTemplateShapes();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shape \u003d shapes.AddShape("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    Microsoft.Office.Core.MsoAutoShapeType.msoShapeRectangle, 0, 0,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Width,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Height);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Line.Visible \u003d Microsoft.Office.Core.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Fill.ForeColor \u003d formatShape.Line.ForeColor;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap image \u003d GraphicsUtil.ShapeToBitmap(shape);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Delete();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.Line.ForeColor.RGB \u003d formatShape.Line.ForeColor.RGB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.Line.BackColor.RGB \u003d formatShape.Line.BackColor.RGB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync LineFillFormat\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 52
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/LineTransparencyFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    class LineTransparencyFormat: Format"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            return Sync(formatShape, formatShape);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync Transparency\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                Math.Round(formatShape.Line.Transparency * 100).ToString() + \"%\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageFont,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.Line.Transparency \u003d formatShape.Line.Transparency;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync LineTransparencyFormat\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 44
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/LineWeightFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    class LineWeightFormat: Format"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            return Sync(formatShape, formatShape);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync Line Weight\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                Math.Max(formatShape.Line.Weight, 0).ToString(\".#\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageFont,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                newShape.Line.Weight \u003d formatShape.Line.Weight;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync LineWeightFormat\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 44
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/MaterialEffectFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using Shapes \u003d Microsoft.Office.Interop.PowerPoint.Shapes;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using ThreeDFormat \u003d Microsoft.Office.Interop.PowerPoint.ThreeDFormat;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    class MaterialEffectFormat: Format"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync MaterialEffect Format\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            Shapes shapes \u003d SyncFormatUtil.GetTemplateShapes();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shape \u003d shapes.AddShape("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                    MsoAutoShapeType.msoShapeRectangle, 0, 0, "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Width,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncFormatConstants.DisplayImageSize.Height);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Line.Visible \u003d MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.Depth \u003d SyncFormatConstants.DisplayImageDepth;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.BevelTopType \u003d SyncFormatConstants.DisplayBevelType;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.BevelTopDepth \u003d SyncFormatConstants.DisplayBevelHeight;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.BevelTopInset \u003d SyncFormatConstants.DisplayBevelWidth;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.BevelBottomType \u003d SyncFormatConstants.DisplayBevelType;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.BevelBottomDepth \u003d SyncFormatConstants.DisplayBevelHeight;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.BevelBottomInset \u003d SyncFormatConstants.DisplayBevelWidth;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            // setting mixed throws an exception"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            // show flat type instead, which looks very similar"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            if (formatShape.ThreeD.PresetMaterial \u003d\u003d MsoPresetMaterial.msoPresetMaterialMixed)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.ThreeD.PresetMaterial \u003d MsoPresetMaterial.msoMaterialFlat;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.ThreeD.PresetMaterial \u003d formatShape.ThreeD.PresetMaterial;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ThreeD.SetPresetCamera(SyncFormatConstants.DisplayCameraPreset);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap image \u003d new Bitmap(GraphicsUtil.ShapeToBitmap(shape));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Delete();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat source \u003d formatShape.ThreeD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat dest \u003d newShape.ThreeD;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                // setting Mixed throws an exception"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                // the user is unable to set Mixed type manually"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                // it seems to be reserved for shapes that have all 3d settings set to default"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                // show Flat type instead, which looks very similar"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                if (source.PresetMaterial \u003d\u003d MsoPresetMaterial.msoPresetMaterialMixed)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.PresetMaterial \u003d MsoPresetMaterial.msoMaterialFlat;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.PresetMaterial \u003d source.PresetMaterial;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync MaterialEffectFormat\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 4,
      "-": 89
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/ReflectionBlurFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    class ReflectionBlurFormat: Format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            return formatShape.Reflection.Type !\u003d MsoReflectionType.msoReflectionTypeNone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync ReflectionBlur format\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                Math.Round(formatShape.Reflection.Blur, 1).ToString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageFont,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ReflectionFormat srcFormat \u003d formatShape.Reflection;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ReflectionFormat destFormat \u003d newShape.Reflection;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                destFormat.Blur \u003d srcFormat.Blur;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync ReflectionBlurFormat\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 49
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/ReflectionDistanceFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    class ReflectionDistanceFormat: Format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            return formatShape.Reflection.Type !\u003d MsoReflectionType.msoReflectionTypeNone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync ReflectionDistance format\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                Math.Round(formatShape.Reflection.Offset, 1).ToString(),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageFont,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ReflectionFormat srcFormat \u003d formatShape.Reflection;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ReflectionFormat destFormat \u003d newShape.Reflection;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                destFormat.Offset \u003d srcFormat.Offset;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync ReflectionDistanceFormat\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 49
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/ReflectionSizeFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    class ReflectionSizeFormat: Format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            return formatShape.Reflection.Type !\u003d MsoReflectionType.msoReflectionTypeNone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync ReflectionSize format\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                Math.Round(formatShape.Reflection.Size, 1).ToString() + \"%\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageFont,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                ReflectionFormat srcFormat \u003d formatShape.Reflection;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ReflectionFormat destFormat \u003d newShape.Reflection;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                destFormat.Size \u003d srcFormat.Size;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync ReflectionSizeFormat\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 49
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/ReflectionTransparencyFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    class ReflectionTransparencyFormat: Format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            return formatShape.Reflection.Type !\u003d MsoReflectionType.msoReflectionTypeNone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync ReflectionTransparency format\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            // transparency is a float from 0-1, multiply by 100 to get percentage"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                Math.Round(formatShape.Reflection.Transparency * 100).ToString() + \"%\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageFont,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                ReflectionFormat srcFormat \u003d formatShape.Reflection;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                ReflectionFormat destFormat \u003d newShape.Reflection;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                destFormat.Transparency \u003d srcFormat.Transparency;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync ReflectionTransparencyFormat\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 50
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/SoftEdgeEffectFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    class SoftEdgeEffectFormat: Format"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            SoftEdgeFormat softEdge \u003d formatShape.SoftEdge;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            // do not check softEdge.Type, it can sometimes \u003d\u003d msoSoftEdgeTypeNone when there is a soft edge"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            return softEdge.Radius \u003e 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync SoftEdgeEffect Format\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                Math.Round(formatShape.SoftEdge.Radius, 1).ToString(),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageFont,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                SoftEdgeFormat dest \u003d newShape.SoftEdge;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                SoftEdgeFormat source \u003d formatShape.SoftEdge;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                // skip setting type, SoftEdgeFormat.Type is not reliable"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                dest.Radius \u003d source.Radius;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync SoftEdgeEffectFormat\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 52
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/TextHorizontalAlignmentFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class TextHorizontalAlignmentFormat : Format"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return Sync(formatShape, formatShape);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync Horizontal Text Alignment\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string alignmentArt \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \"\u003d\u003d\u003d\u003d\u003d\u003d\\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \"\u003d\u003d\u003d\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                alignmentArt,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                new System.Drawing.Font(formatShape.TextEffect.FontName,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                        SyncFormatConstants.DisplayImageFontSize,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                        FontStyle.Bold),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            try"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                newShape.TextFrame.HorizontalAnchor \u003d formatShape.TextFrame2.HorizontalAnchor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                newShape.TextFrame.TextRange.ParagraphFormat.Alignment \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    formatShape.TextFrame.TextRange.ParagraphFormat.Alignment;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync TextAlignmentFormat\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 54
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/TextLineSpacingFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class TextLineSpacingFormat : Format"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return Sync(formatShape, formatShape);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync Line Spacing\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string spacingArt \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \"--------\\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \"____\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                spacingArt,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                new System.Drawing.Font(formatShape.TextEffect.FontName,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                        SyncFormatConstants.DisplayImageFontSize,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                        FontStyle.Bold),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            try"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                newShape.TextFrame.TextRange.ParagraphFormat.SpaceAfter \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    formatShape.TextFrame2.TextRange.ParagraphFormat.SpaceAfter;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                newShape.TextFrame.TextRange.ParagraphFormat.SpaceBefore \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    formatShape.TextFrame2.TextRange.ParagraphFormat.SpaceBefore;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                newShape.TextFrame.TextRange.ParagraphFormat.SpaceWithin \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    formatShape.TextFrame2.TextRange.ParagraphFormat.SpaceWithin;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync TextLineSpacingFormat\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 57
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/TextOrientationFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class TextOrientationFormat : Format"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return Sync(formatShape, formatShape);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync Text Orientation\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Shapes shapes \u003d SyncFormatUtil.GetTemplateShapes();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Shape shape \u003d shapes.AddLine("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                0, SyncFormatConstants.DisplayImageSize.Height,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                SyncFormatConstants.DisplayImageSize.Width, 0);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            SyncFormat(formatShape, shape);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shape.Line.ForeColor.RGB \u003d SyncFormatConstants.ColorBlack;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shape.Line.Weight \u003d SyncFormatConstants.DisplayLineWeight;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Bitmap image \u003d GraphicsUtil.ShapeToBitmap(shape);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            shape.Delete();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            try"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                newShape.TextFrame.Orientation \u003d formatShape.TextFrame2.Orientation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync TextOrientationFormat\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 54
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/TextVerticalAlignmentFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class TextVerticalAlignmentFormat : Format"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return Sync(formatShape, formatShape);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync Vertical Text Alignment\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string alignmentArt \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \"||\\n\" +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \"||\\n\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return SyncFormatUtil.GetTextDisplay("
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                alignmentArt,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                new System.Drawing.Font(formatShape.TextEffect.FontName,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                        SyncFormatConstants.DisplayImageFontSize,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                        FontStyle.Bold),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                SyncFormatConstants.DisplayImageSize);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            try"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                newShape.TextFrame.VerticalAnchor \u003d formatShape.TextFrame2.VerticalAnchor;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync TextAlignmentFormat\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 52
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/ObjectFormats/ThreeDRotationEffectFormat.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using ThreeDFormat \u003d Microsoft.Office.Interop.PowerPoint.ThreeDFormat;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    class ThreeDRotationEffectFormat: Format"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        private static readonly float TOLERANCE \u003d Single.Epsilon;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public override bool CanCopy(Shape formatShape)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat threeD \u003d formatShape.ThreeD;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            // equality check for floating point numbers"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            return Math.Abs(threeD.RotationX) \u003e TOLERANCE"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                   || Math.Abs(threeD.RotationY) \u003e TOLERANCE"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                   || Math.Abs(threeD.RotationZ) \u003e TOLERANCE"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                   || Math.Abs(threeD.FieldOfView) \u003e TOLERANCE"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                   || threeD.Perspective \u003d\u003d MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public override void SyncFormat(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Sync(formatShape, newShape))"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.Log(newShape.Type + \" unable to sync 3DRotation Format\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        public override Bitmap DisplayImage(Shape formatShape)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap image \u003d GraphicsUtil.ShapeToBitmap(formatShape);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return image;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool Sync(Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat source \u003d formatShape.ThreeD;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreeDFormat dest \u003d newShape.ThreeD;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                if (source.PresetThreeDFormat \u003d\u003d MsoPresetThreeDFormat.msoPresetThreeDFormatMixed)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    // skip setting PresetCamera if Mixed. setting it throws an error"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (source.PresetCamera !\u003d MsoPresetCamera.msoPresetCameraMixed)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                        dest.SetPresetCamera(source.PresetCamera);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    // set FieldOfView anyway, PresetCamera doesn\u0027t seem to set it"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.FieldOfView \u003d source.FieldOfView;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.RotationX \u003d source.RotationX;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.RotationZ \u003d source.RotationZ;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.RotationY \u003d source.RotationY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    // set perspective only if it is different,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    // setting the same perspective applies an unknown change to the lighting of the shape"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                    // this change is visible to the eye, but we cannot undo it"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (dest.Perspective !\u003d source.Perspective)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                        dest.Perspective \u003d source.Perspective;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                    dest.SetThreeDFormat(source.PresetThreeDFormat);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                // ThreeDFormat.Z must be between -4000 \u0026 4000 exclusive."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                // when source.Z \u003e 4000 or source.Z \u003c - 4000, it actually means 0"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                float nearestZ \u003d source.Z;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                nearestZ \u003d nearestZ \u003e 4000 ? 0f : nearestZ;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                nearestZ \u003d nearestZ \u003c -4000 ? 0f : nearestZ;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                dest.Z \u003d nearestZ;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                "
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                dest.ProjectText \u003d source.ProjectText;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Logger.LogException(e, \"Sync ThreeDRotationEffectFormat\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 3,
      "-": 94
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/SyncFormatConstants.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System.Collections.Generic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.SyncLab.Views;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using Font \u003d System.Drawing.Font;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.ObjectFormats"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public class SyncFormatConstants"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        public static readonly Size DisplayImageSize \u003d new Size(30, 30);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // values for bevel display"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public static readonly float DisplayImageDepth \u003d 15;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        public static readonly float DisplayBevelWidth \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        public static readonly float DisplayBevelHeight \u003d 5;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        public static readonly MsoBevelType DisplayBevelType \u003d MsoBevelType.msoBevelCircle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        public static readonly MsoPresetCamera DisplayCameraPreset \u003d MsoPresetCamera.msoCameraIsometricOffAxis2Top;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        public static readonly string DisplaySizeUnit \u003d \"pt\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public static readonly string DisplayFontString \u003d \"Text\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        public static readonly string DisplayDegreeSymbol \u003d \"°\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        public static readonly int DisplayImageFontSize \u003d 12;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        public static readonly Font DisplayImageFont \u003d new Font(\"Arial\", DisplayImageFontSize);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public static readonly int ColorBlack \u003d 0;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        public static readonly int DisplayLineWeight \u003d 5;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static readonly string FormatNameSeparator \u003d \"\u003e\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        public static FormatTreeNode[] FormatCategories \u003d\u003e CreateFormatCategories();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        public static List\u003cFormat\u003e Formats"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cFormat\u003e list \u003d new List\u003cFormat\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                list.AddRange(GetFormatsFromFormatTreeNode(FormatCategories));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                return list;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cSummary\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Collect all format objects from an array of FormatTreeNodes"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/Summary\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"nodes\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003creturns\u003eCollected formats\u003c/returns\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        private static Format[] GetFormatsFromFormatTreeNode(FormatTreeNode[] nodes)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cFormat\u003e list \u003d new List\u003cFormat\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (FormatTreeNode node in nodes)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                if (node.IsFormatNode)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    list.Add(node.Format);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                else if (node.ChildrenNodes !\u003d null)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                    list.AddRange(GetFormatsFromFormatTreeNode(node.ChildrenNodes));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return list.ToArray();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        private static FormatTreeNode[] CreateFormatCategories()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            FormatTreeNode[] formats \u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    new FormatTreeNode("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                            \"Text\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Font\", new FontFormat()),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Font Size\", new FontSizeFormat()),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Font Color\", new FontColorFormat()),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                            new FormatTreeNode(\"Style\", new FontStyleFormat()),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                            new FormatTreeNode(\"Alignment\","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                new FormatTreeNode(\"Horizontal Alignment\", new TextHorizontalAlignmentFormat()),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                new FormatTreeNode(\"Vertical Alignment\", new TextVerticalAlignmentFormat())),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                            new FormatTreeNode(\"Line Spacing\", new TextLineSpacingFormat()),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                            new FormatTreeNode(\"Orientation\", new TextOrientationFormat())),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                    new FormatTreeNode("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                            \"Fill\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Color\", new FillFormat()),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Transparency\", new FillTransparencyFormat())),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                    new FormatTreeNode("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                            \"Line\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Width\", new LineWeightFormat()),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Compound Type\", new LineCompoundTypeFormat()),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Dash Type\", new LineDashTypeFormat()),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Arrow\", new LineArrowFormat()),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Color\", new LineFillFormat()),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Transparency\", new LineTransparencyFormat())),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    new FormatTreeNode("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                            \"Visual Effects\","
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Artistic Effect\", new ArtisticEffectFormat()),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Glow\", "
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                                new FormatTreeNode(\"Color\", new GlowColorFormat()),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                                new FormatTreeNode(\"Size\", new GlowSizeFormat()),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                                new FormatTreeNode(\"Transparency\", new GlowTransparencyFormat())),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Reflection\", "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                                new FormatTreeNode(\"Transparency\", new ReflectionTransparencyFormat()),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                                new FormatTreeNode(\"Size\", new ReflectionSizeFormat()),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                                new FormatTreeNode(\"Blur\", new ReflectionBlurFormat()),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                                new FormatTreeNode(\"Distance\", new ReflectionDistanceFormat())),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Shadow\", new ShadowEffectFormat()),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Soft Edge\", new SoftEdgeEffectFormat()),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"3D Effects\", "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                                new FormatTreeNode(\"Bevel Top\", new BevelTopFormat()),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                                new FormatTreeNode(\"Bevel Bottom\", new BevelBottomFormat()),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                                new FormatTreeNode(\"Contour\", "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                                    new FormatTreeNode(\"Color\", new ContourColorFormat()),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                                    new FormatTreeNode(\"Width\", new ContourWidthFormat())),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                                new FormatTreeNode(\"Depth\", "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                                    new FormatTreeNode(\"Color\", new DepthColorFormat()),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                                    new FormatTreeNode(\"Size\", new DepthSizeFormat())),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                                new FormatTreeNode(\"Lighting\", "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                                    new FormatTreeNode(\"Angle\", new LightingAngleFormat()),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                                    new FormatTreeNode(\"Preset Lighting\", new LightingEffectFormat())),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                                new FormatTreeNode(\"Material\", new MaterialEffectFormat())),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"3D Rotation\", new ThreeDRotationEffectFormat())),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    new FormatTreeNode("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                            \"Size/Position\","
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Width\", new PositionWidthFormat()),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Height\", new PositionHeightFormat()),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"X\", new PositionXFormat()),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                            new FormatTreeNode(\"Y\", new PositionYFormat()))"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                };"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            return formats;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 8,
      "-": 127
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/Views/SyncFormatPaneItem.xaml.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Text;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Controls;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Input;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Interop;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Media.Imaging;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.SyncLab.ObjectFormats;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.Views"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /// Interaction logic for SyncFormatPaneItem.xaml"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public partial class SyncFormatPaneItem : UserControl"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        private Bitmap image;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        private SyncPaneWPF parent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        private string shapeKey \u003d null;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        private SyncLabShapeStorage shapeStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        private FormatTreeNode[] formats \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Constructors"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        public SyncFormatPaneItem(SyncPaneWPF parent, string shapeKey,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncLabShapeStorage shapeStorage, FormatTreeNode[] formats)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            InitializeComponent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            this.parent \u003d parent;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            this.shapeKey \u003d shapeKey;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            this.shapeStorage \u003d shapeStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            this.formats \u003d formats;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            editImage.Source \u003d CommonUtil.CreateBitmapSource(Properties.Resources.SyncLabEditButton);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            pasteImage.Source \u003d CommonUtil.CreateBitmapSource(Properties.Resources.SyncLabPasteButton);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            deleteImage.Source \u003d CommonUtil.CreateBitmapSource(Properties.Resources.SyncLabDeleteButton);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            UpdateToolTipBody();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Getters and Setters"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        public string FormatShapeKey"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                return shapeKey;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        public FormatTreeNode[] Formats"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                return formats;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            set"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                formats \u003d value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        public Bitmap Image"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                return image;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            set"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                image \u003d value;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateImage();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool FormatShapeExists"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                return shapeStorage.GetShape(shapeKey) !\u003d null;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdateImage()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            // if image isn\u0027t set, fill the control with the label"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            if (image \u003d\u003d null)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                imageBox.Visibility \u003d Visibility.Hidden;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                col1.Width \u003d new GridLength(0);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                BitmapSource source \u003d CommonUtil.CreateBitmapSource(image);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                imageBox.Source \u003d source;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                imageBox.Visibility \u003d Visibility.Visible;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                col1.Width \u003d new GridLength(60);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public string Text"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return textBlock.Text;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            set"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                textBlock.Text \u003d value;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                toolTipName.Text \u003d value;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Helper Functions"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void UpdateToolTipBody()"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            StringBuilder toolTipBodyText \u003d new StringBuilder();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (FormatTreeNode format in formats)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                toolTipBodyText.Append(GetNamesOfCheckedNodes(format.Name, format));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            toolTipBody.Text \u003d toolTipBodyText.ToString().Trim(\"\\n\".ToCharArray());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private string GetNamesOfCheckedNodes(string rootName, FormatTreeNode node)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (node.IsChecked ?? false)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return (node.Name.Equals(rootName) ? \"\" : rootName +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    SyncFormatConstants.FormatNameSeparator) + node.Name + \"\\n\";"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            StringBuilder result \u003d new StringBuilder();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (FormatTreeNode child in node.ChildrenNodes ?? new FormatTreeNode[] { })"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                result.Append(GetNamesOfCheckedNodes(rootName, child));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return result.ToString();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void ApplyFormatToSelected()"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Shape formatShape \u003d shapeStorage.GetShape(shapeKey);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (formatShape \u003d\u003d null)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                MessageBox.Show(SyncLabText.ErrorShapeDeleted, SyncLabText.ErrorDialogTitle);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                parent.ClearInvalidFormats();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            this.StartNewUndoEntry();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            parent.ApplyFormats(formats, formatShape);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Event Handlers"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        private void PasteButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            ApplyFormatToSelected();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        private void EditButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shape \u003d shapeStorage.GetShape(shapeKey);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            parent.Dialog \u003d new SyncFormatDialog(shape, Text, formats);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            parent.Dialog.ObjectName \u003d this.Text;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            bool? result \u003d parent.Dialog.ShowDialog();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!result.HasValue || !(bool)result)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            this.formats \u003d parent.Dialog.Formats;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            this.Text \u003d parent.Dialog.ObjectName;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            parent.Dialog \u003d null;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            UpdateToolTipBody();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DeleteButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            parent.RemoveFormatItem(this);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        private void OnMouseDoubleClick(object sender, MouseButtonEventArgs e)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            ApplyFormatToSelected();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 64,
      "-": 140
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/Views/SyncFormatPanelItemStub.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using System.Drawing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.SyncLab.Views"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class SyncFormatPaneItemStub : SyncFormatPaneItem"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public SyncFormatPaneItemStub(FormatTreeNode[] formats) :"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            base(null, null, null, formats)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            "
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new public string FormatShapeKey \u003d null;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new public Bitmap Image \u003d null;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        new public bool FormatShapeExists \u003d false;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 18
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/Views/SyncPane.Designer.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.SyncLab.Views"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    partial class SyncPane"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e "
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Required designer variable."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        private System.ComponentModel.IContainer components \u003d null;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public void UpdateOnSelectionChange(Selection sel)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            this.SyncPaneWPF1.UpdateCopyButtonEnabledStatus(sel);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e "
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Clean up any resources being used."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"disposing\"\u003etrue if managed resources should be disposed; otherwise, false.\u003c/param\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        protected override void Dispose(bool disposing)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            if (disposing \u0026\u0026 (components !\u003d null))"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                components.Dispose();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            base.Dispose(disposing);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Component Designer generated code"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Required method for Designer support - do not modify "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /// the contents of this method with the code editor."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        private void InitializeComponent()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            this.elementHost1 \u003d new System.Windows.Forms.Integration.ElementHost();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            this.SyncPaneWPF1 \u003d new PowerPointLabs.SyncLab.Views.SyncPaneWPF();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            this.SuspendLayout();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            // "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            // elementHost1"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            // "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            this.elementHost1.Dock \u003d System.Windows.Forms.DockStyle.Fill;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            this.elementHost1.Location \u003d new System.Drawing.Point(0, 0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            this.elementHost1.Name \u003d \"elementHost1\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            this.elementHost1.Size \u003d new System.Drawing.Size(300, 833);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            this.elementHost1.TabIndex \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            this.elementHost1.Text \u003d \"elementHost1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            this.elementHost1.Child \u003d this.SyncPaneWPF1;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            // "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            // SyncPane"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            // "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            this.AutoScaleDimensions \u003d new System.Drawing.SizeF(6F, 13F);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            this.AutoScaleMode \u003d System.Windows.Forms.AutoScaleMode.Font;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            this.Controls.Add(this.elementHost1);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            this.Name \u003d \"SyncPane\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            this.Size \u003d new System.Drawing.Size(300, 833);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            this.ResumeLayout(false);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        private System.Windows.Forms.Integration.ElementHost elementHost1;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        public SyncPaneWPF SyncPaneWPF1 { get; private set; }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 8,
      "-": 60
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/SyncLab/Views/SyncPaneWPF.xaml.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Controls;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Media.Imaging;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.SyncLab.ObjectFormats;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "using ShapeRange \u003d Microsoft.Office.Interop.PowerPoint.ShapeRange;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.SyncLab.Views"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /// Interaction logic for SyncPaneWPF.xaml"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public partial class SyncPaneWPF : UserControl"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public SyncFormatDialog Dialog { get; set; }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        private readonly SyncLabShapeStorage shapeStorage;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        public SyncPaneWPF()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            InitializeComponent();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeStorage \u003d SyncLabShapeStorage.Instance;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            copyImage.Source \u003d CommonUtil.CreateBitmapSource(Properties.Resources.SyncLabCopyButton);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        public void SyncPaneWPF_Loaded(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            Microsoft.Office.Tools.CustomTaskPane syncLabPane \u003d this.GetAddIn().GetActivePane(typeof(SyncPane));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            if (syncLabPane \u003d\u003d null || !(syncLabPane.Control is SyncPane))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(TextCollection.SyncLabText.ErrorSyncPaneNotOpened);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            SyncPane syncLab \u003d syncLabPane.Control as SyncPane;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            UpdateCopyButtonEnabledStatus(this.GetCurrentSelection());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            syncLab.HandleDestroyed +\u003d SyncPane_Closing;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        public void SyncPane_Closing(Object sender, EventArgs e)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Dialog !\u003d null)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                Dialog.Close();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        #region GUI API"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        public int FormatCount"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            get"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                return formatListBox.Items.Count;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public void UpdateCopyButtonEnabledStatus(Selection selection)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if ((selection \u003d\u003d null) || (selection.Type \u003d\u003d PpSelectionType.ppSelectionNone) "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                || (selection.Type \u003d\u003d PpSelectionType.ppSelectionSlides))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                copyButton.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                toolTipTextBox.Text \u003d SyncLabText.DisabledToolTipText;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            else"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                copyButton.IsEnabled \u003d true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                toolTipTextBox.Text \u003d SyncLabText.EnabledToolTipText;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public bool GetCopyButtonEnabledStatus()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return copyButton.IsEnabled;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        public FormatTreeNode[] GetFormats(int index)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            return (formatListBox.Items[index] as SyncFormatPaneItem).Formats;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        public string GetFormatText(int index)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return (formatListBox.Items[index] as SyncFormatPaneItem).Text;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public void SetFormatText(int index, string text)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            (formatListBox.Items[index] as SyncFormatPaneItem).Text \u003d text;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Sync API"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public void RemoveFormatItem(Object format)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            while (index \u003c formatListBox.Items.Count)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                if (formatListBox.Items[index] \u003d\u003d format)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                    formatListBox.Items.RemoveAt(index);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                    index++;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void ClearInvalidFormats()"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            int index \u003d 0;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            while (index \u003c formatListBox.Items.Count)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncFormatPaneItem item \u003d formatListBox.Items[index] as SyncFormatPaneItem;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                if (item.FormatShapeExists)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                    index++;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    formatListBox.Items.RemoveAt(index);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Applies a set of formats from a source shape to shapes selected by the user "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"nodes\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"formatShape\"\u003esource shape\u003c/param\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        public void ApplyFormats(FormatTreeNode[] nodes, Shape formatShape)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange selectedShapes \u003d GetSelectedShapesForFormatting();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedShapes \u003d\u003d null)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(SyncLabText.ErrorPasteSelectionInvalid, SyncLabText.ErrorDialogTitle);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                Format[] formats \u003d GetFormatsToApply(nodes);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapeUtil.ApplyFormats(formats, formatShape, selectedShapes);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        private Format[] GetFormatsToApply(FormatTreeNode[] nodes)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cFormat\u003e list \u003d new List\u003cFormat\u003e();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (FormatTreeNode node in nodes)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                if (node.IsFormatNode \u0026\u0026 node.IsChecked.HasValue \u0026\u0026 node.IsChecked.Value)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                    list.Add(node.Format);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                else if (node.ChildrenNodes !\u003d null)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                    list.AddRange(GetFormatsToApply(node.ChildrenNodes));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return list.ToArray();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Get shapes selected by user"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003creturns\u003eShapeRange of selected shapes, or null."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Null is returned over an empty collection as selections may not contain ShapeRanges"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/returns\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        private ShapeRange GetSelectedShapesForFormatting()"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            Selection selection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if ((selection.Type !\u003d PpSelectionType.ppSelectionShapes \u0026\u0026"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                selection.Type !\u003d PpSelectionType.ppSelectionText) ||"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                selection.ShapeRange.Count \u003d\u003d 0)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange shapes \u003d selection.ShapeRange;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selection.HasChildShapeRange)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                shapes \u003d selection.ChildShapeRange;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return shapes;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AddFormatToList(Shape shape, string name, FormatTreeNode[] formats)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            string shapeKey \u003d CopyShape(shape, formats);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            if (shapeKey \u003d\u003d null)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(SyncLabText.ErrorCopy);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            SyncFormatPaneItem item \u003d new SyncFormatPaneItem(this, shapeKey, shapeStorage, formats);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            item.Text \u003d name;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            item.Image \u003d new System.Drawing.Bitmap(GraphicsUtil.ShapeToBitmap(shape));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            formatListBox.Items.Insert(0, item);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            formatListBox.SelectedIndex \u003d 0;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        #region GUI Handles"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        private void CopyButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            Selection selection \u003d this.GetCurrentSelection();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            if ((selection.Type !\u003d PpSelectionType.ppSelectionShapes \u0026\u0026"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "                selection.Type !\u003d PpSelectionType.ppSelectionText) ||"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                selection.ShapeRange.Count !\u003d 1)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(SyncLabText.ErrorCopySelectionInvalid, SyncLabText.ErrorDialogTitle);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shape \u003d selection.ShapeRange[1];"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            if (shape.Type \u003d\u003d MsoShapeType.msoSmartArt) "
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(SyncLabText.ErrorSmartArtUnsupported, SyncLabText.ErrorDialogTitle);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selection.HasChildShapeRange)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                if (selection.ChildShapeRange.Count !\u003d 1)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                    MessageBox.Show(SyncLabText.ErrorCopySelectionInvalid, SyncLabText.ErrorDialogTitle);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                shape \u003d selection.ChildShapeRange[1];"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            bool canSyncPlaceHolder \u003d"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.Type \u003d\u003d MsoShapeType.msoPlaceholder \u0026\u0026 "
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapeUtil.CanCopyMsoPlaceHolder(shape, SyncFormatUtil.GetTemplateShapes());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            if (shape.Type !\u003d MsoShapeType.msoAutoShape \u0026\u0026"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.Type !\u003d MsoShapeType.msoLine \u0026\u0026"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.Type !\u003d MsoShapeType.msoPicture \u0026\u0026"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.Type !\u003d MsoShapeType.msoTextBox \u0026\u0026"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                !canSyncPlaceHolder)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(SyncLabText.ErrorCopySelectionInvalid, SyncLabText.ErrorDialogTitle);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            Dialog \u003d new SyncFormatDialog(shape);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            Dialog.ObjectName \u003d shape.Name;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            bool? result \u003d Dialog.ShowDialog();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!result.HasValue || !(bool)result)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            AddFormatToList(shape, Dialog.ObjectName, Dialog.Formats);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            Dialog \u003d null;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Shape Saving"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        // Saves shape into another powerpoint file"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        // Returns a key to find the shape by,"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        // or null if the shape cannot be copied"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        private string CopyShape(Shape shape, FormatTreeNode[] nodes)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            return shapeStorage.CopyShape(shape, GetFormatsToApply(nodes));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 23,
      "-": 262
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/TextCollection/ColorsLabText.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿namespace PowerPointLabs.TextCollection"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    internal static class ColorsLabText"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Action Framework Tags"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string RibbonMenuId \u003d \"ColorsLabButton\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string RibbonMenuLabel \u003d \"Colors\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string RibbonMenuSupertip \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Use Colors Lab to add beautiful colors to your slide.\\n\\n\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Click this button to open the Colors Lab interface.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string PaneTag \u003d \"ColorsLab\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string TaskPanelTitle \u003d \"Colors Lab\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MainColorBoxTooltip \u003d \"Choose the main color: \" +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                   \"\\r\\nDrag the box to favorites palatte, \" +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                                   \"\\r\\nor click it to choose one from the Color dialog.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string FontColorButtonTooltip \u003d \"Change the font color of the selected shapes: \" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                                 \"\\r\\nDrag the button to pick a color.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string LineColorButtonTooltip \u003d \"Change the line color of the selected shapes: \" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                                 \"\\r\\nDrag the button to pick a color.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string FillColorButtonTooltip \u003d \"Change the fill color of the selected shapes: \" +"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                                 \"\\r\\nDrag the button to pick a color.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public const string EyeDropperButtonTooltip \u003d \"Choose the main color with eyedropper: \" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                                    \"\\r\\nDrag the button to pick a color.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string BrightnessSliderTooltip \u003d \"Move the slider to adjust the main color’s brightness.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string SaturationSliderTooltip \u003d \"Move the slider to adjust the main color’s saturation.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string SaveFavoriteColorsButtonTooltip \u003d \"Save the favorite color palette.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string LoadFavoriteColorsButtonTooltip \u003d \"Load an existing favorite color palette.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ResetFavoriteColorsButtonTooltip \u003d \"Reset the current favorite color palette to those last loaded.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string EmptyFavoriteColorsButtonTooltip \u003d \"Empty the favorite color palette.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ColorRectangleTooltip \u003d \"Click the color to select it as the main color. You can drag-and-drop these colors into the favorites palette.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public const string FavoriteColorRectangleTooltip \u003d \"Click the color to select it as the main color.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorDialogTitle \u003d \"Unable to execute action\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorNoSelection \u003d \"To use this feature, select at least one shape.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 6,
      "YuPeiHenry": 1,
      "-": 32
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/TextCollection/ShapesLabText.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿namespace PowerPointLabs.TextCollection"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    internal static class ShapesLabText"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Action Framework Tags"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string RibbonMenuId \u003d \"ShapesLabMenu\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string RibbonMenuSupertip \u003d \"Use Shapes Lab to manage your custom shapes.\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string RibbonMenuLabel \u003d \"Shapes\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ShapesLabButtonLabel \u003d \"Shapes Lab\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ShapesLabButtonSupertip \u003d \"Click this button to open the Shapes Lab interface.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string PaneTag \u003d \"ShapesLab\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string TaskPanelTitle \u003d \"Shapes Lab\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorDialogTitle \u003d \"Unable to execute action\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorAddSelectionInvalid \u003d \"Please select one shape to add.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorFileNameInvalid \u003d \"Invalid shape name.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public const string ErrorCategoryNameMissing \u003d \"Provided category does not exist.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorNoShapeTextFirstLine \u003d \"No shapes saved yet.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorNoShapeTextSecondLine \u003d \"Right-click any object on a slide to save it in this panel.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorNoPanelSelected \u003d \"No shape selected.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorViewTypeNotSupported \u003d \"Shapes Lab does not support the current view type.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string SuccessSaveLocationChanged \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Default saving path has been changed to \\n{0}\\nAll shapes have been moved to the new location.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string SuccessSaveLocationChangedTitle \u003d \"Success\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string SuccessSetAsDefaultCategory \u003d \"{0} has been set as default category.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorMigration \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \"The folder cannot be migrated entirely. Please check if your destination location forbids this action.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorOriginalFolderDeletion \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            \"The original folder could not be deleted because some of the files in folder is still in use. You could \" +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \"try to delete this folder manually when those files are closed.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MigratingDialogTitle \u003d \"Migrating...\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MigratingDialogContent \u003d \"Shapes are being migrated, please wait...\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorRemoveLastCategory \u003d \"Removing the last category is not allowed.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorDuplicateCategoryName \u003d \"The name has already been used.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string RemoveDefaultCategoryMessage \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            \"You are removing your default category. After removing this category, the first category will be made \" +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            \"as default category. Continue?\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string RemoveDefaultCategoryCaption \u003d \"Removing Default Category\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorImportFile \u003d \"Import File could not be opened.\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorImportNoSlide \u003d \"Import File is empty.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorImportAppendCategory \u003d \"Your computer does not support this feature.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorImportSingleCategory \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            \"{0} contains multiple categories. Try \\\"Import Category\\\" instead.\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public const string ErrorShapePaneNotOpened \u003d \"Error: Shapes Lab Pane not opened.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string SuccessImport \u003d \"Successfully imported.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ImportShapeFileDialogTitle \u003d \"Import Shapes\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ImportLibraryFileDialogTitle \u003d \"Import Library\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ShapeContextStripAddToSlide \u003d \"Add To Slide\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ShapeContextStripEditName \u003d \"Edit Name\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ShapeContextStripMoveShape \u003d \"Move Shape To\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ShapeContextStripRemoveShape \u003d \"Remove Shape\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ShapeContextStripCopyShape \u003d \"Copy Shape To\";"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string CategoryContextStripAddCategory \u003d \"Add Category\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string CategoryContextStripRemoveCategory \u003d \"Remove Category\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string CategoryContextStripRenameCategory \u003d \"Rename Category\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string CategoryContextStripImportCategory \u003d \"Import Library\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string CategoryContextStripImportShapes \u003d \"Import Shapes\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string CategoryContextStripSetAsDefaultCategory \u003d \"Set as Default Category\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string CategoryContextStripCategorySettings \u003d \"Shapes Lab Settings\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorSameShapeNameInDestination \u003d \"{0} exists in {1}. Please rename your shape before moving.\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorShapeCorrupted \u003d \"Some shapes in the Shapes Lab were corrupted, but some of the them are recovered.\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string FolderDialogDescription \u003d \"Select the directory that you want to use as the default.\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorFolderNonEmpty \u003d \"Please select an empty folder as default saving folder.\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string AddShapeToolTip \u003d \"Adds a shape to Shapes Lab.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string DisabledAddShapeToolTip \u003d AddShapeToolTip + \"\\nStart by selecting a shape.\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 1,
      "YuPeiHenry": 2,
      "-": 74
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/TextCollection/ShortcutsLabText.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿namespace PowerPointLabs.TextCollection"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    internal static class ShortcutsLabText"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Action Framework Tags"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuShape \u003d \"MenuShape\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuLine \u003d \"MenuLine\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuFreeform \u003d \"MenuFreeform\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuPicture \u003d \"MenuPicture\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuGroup \u003d \"MenuGroup\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuInk \u003d \"MenuInk\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuVideo \u003d \"MenuVideo\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuTextEdit \u003d \"MenuTextEdit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuChart \u003d \"MenuChart\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuTable \u003d \"MenuTable\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuTableCell \u003d \"MenuTableWhole\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuSlide \u003d \"MenuFrame\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuSmartArt \u003d \"MenuSmartArtBackground\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuEditSmartArtBase \u003d \"MenuSmartArtEdit\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuEditSmartArt \u003d MenuEditSmartArtBase + \"SmartArt\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuEditSmartArtText \u003d MenuEditSmartArtBase + \"Text\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuNotes \u003d \"MenuNotes\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public const string MenuThumbnail \u003d \"MenuThumbnail\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string MenuSeparator \u003d \"MenuSeparator\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string EditNameTag \u003d \"EditName\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ConvertToPictureTag \u003d \"ConvertToPicture\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string HideShapeTag \u003d \"HideShape\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string AddCustomShapeTag \u003d \"AddShape\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string AddIntoGroupTag \u003d \"AddIntoGroup\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string SpeakSelectedTag \u003d \"SpeakSelected\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string FillSlideTag \u003d \"FillSlide\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public const string ExportSlideAsImageTag \u003d \"ExportSlideAsImage\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        #region GUI Text"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string PowerPointLabsMenuLabel \u003d \"PowerPointLabs\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string PasteMenuLabel \u003d \"Paste Lab\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ShortcutsMenuLabel \u003d \"Shortcuts\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string EditNameLabel \u003d \"Edit Name\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ConvertToPictureLabel \u003d \"Convert To Picture\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string AddIntoGroup \u003d \"Add Into Group\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string AddCustomShapeLabel \u003d \"Add To Shapes Lab\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string HideSelectedShapeLabel \u003d \"Hide Shape\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ContextSpeakSelectedTextLabel \u003d \"Speak Selected Text\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string FillSlideLabel \u003d \"Fill Slide\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public const string ExportSlideAsImageLabel \u003d \"Export Slide As Image\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorTypeNotSupported \u003d \"Convert to Picture only supports Shapes and Charts.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorWindowTitle \u003d \"Convert to Picture: Unsupported Object\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string AddIntoGroupActionHandlerReminderText \u003d \"Please select more than one shape.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 3,
      "-": 54
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/TextCollection/SyncLabText.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿namespace PowerPointLabs.TextCollection"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    internal static class SyncLabText"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Action Framework Tags"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string RibbonMenuId \u003d \"SyncLabButton\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string RibbonMenuLabel \u003d \"Sync\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string RibbonMenuSupertip \u003d"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Use Sync Lab to make your slides look more consistent.\\n\\n\" +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Click this button to open the Sync Lab interface.\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string PaneTag \u003d \"SyncLab\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string TaskPanelTitle \u003d \"Sync Lab\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string StorageFileName \u003d \"Sync Lab - Do not edit\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string DefaultFormatName \u003d \"Format\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string EnabledToolTipText \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            \"Opens a dialog box that will allow you to copy formats\\n\" +"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            \"from the shape that is currently selected.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string DisabledToolTipText \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            EnabledToolTipText + \"\\nStart by selecting a shape.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorDialogTitle \u003d \"Unable to execute action\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorCopy \u003d \"Error: Unable to copy selected item.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorSmartArtUnsupported \u003d \"Error: SmartArt is currently not supported by SyncLab.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorCopySelectionInvalid \u003d \"Please select one shape to copy.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorPasteSelectionInvalid \u003d \"Please select at least one item to apply this format to.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorShapeDeleted \u003d \"Error in loading shape formats. Removing invalid formats from the list.\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorSyncPaneNotOpened \u003d \"Error: SyncPane not opened.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string WarningDialogTitle \u003d \"Warning\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string WarningSyncPerspectiveShadow \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \"PowerPointLabs is unable to differentiate between custom perspective shadows and custom outer shadows.\\n\\n\" +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Outer shadows will be applied when syncing.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 6,
      "-": 31
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/TextCollection/TooltipsLabText.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "﻿namespace PowerPointLabs.TextCollection"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    internal static class TooltipsLabText"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        #region Action Framework Tags"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string RibbonMenuId \u003d \"TooltipsLabMenu\";"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string CreateMenuTag \u003d \"CreateMenu\";"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string CreateTooltipTag \u003d \"CreateTooltip\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string CreateCalloutTag \u003d \"CreateCallout\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string CreateTriggerTag \u003d \"CreateTrigger\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string ConvertToTooltipTag \u003d \"ConvertToTooltip\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string AddTextboxTag \u003d \"AddTextbox\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string SettingsTag \u003d \"TooltipsLabSettings\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        #region GUI Text"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string RibbonMenuLabel \u003d \"Tooltips\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string CreateMenuLabel \u003d \"Create\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string CreateTooltipButtonLabel \u003d \"Create Tooltip\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string CreateCalloutButtonLabel \u003d \"Create Callout For Shape\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string CreateTriggerButtonLabel \u003d \"Create Trigger For Shape\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string ConvertToTooltipButtonLabel \u003d \"Convert Shapes to Tooltip\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string SettingsButtonLabel \u003d \"Settings\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string RibbonMenuSupertip \u003d \"Use Tooltips Lab to add Tooltips easily.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string CreateTooltipButtonSupertip \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            \"Create a trigger shape and a callout shape.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string CreateCalloutButtonSupertip \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            \"Create a callout with a specified trigger shape. \\n\\n\" +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            \"To perform this action, select your desired trigger shape. A callout will be generated for you.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string CreateTriggerButtonSupertip \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            \"Create a trigger shape with a specified callout shape. \\n\\n\" +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            \"To perform this action, select your desired callout. A trigger shape will be generated for you.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string ConvertToTooltipButtonSupertip \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            \"Attach a trigger animation to a group of shapes. \\n\\n\" +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            \"To perform this action, select a group of shapes, the first shape selected with the trigger shape.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string SettingsButtonSupertip \u003d \"Configure the settings for Tooltips Lab.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string ErrorTooltipsDialogTitle \u003d \"Unable to execute action\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string ErrorLessThanTwoShapesSelected \u003d \"Please select at least two shapes. The first shape will be the trigger shape.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string ErrorNoTriggerShapeSelected \u003d \"Please select 1 or more shapes as your trigger shape.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string ErrorNoCalloutShapeSelected \u003d \"Please select 1 or more shapes as your callout shape.\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 45
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ThisAddIn.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Diagnostics;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Globalization;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using System.IO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using System.IO.Compression;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Linq;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Runtime.ExceptionServices;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Runtime.InteropServices;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Runtime.Remoting;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Runtime.Remoting.Channels;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Runtime.Remoting.Channels.Ipc;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Text.RegularExpressions;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Forms;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Tools;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.AutoUpdate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.CaptionsLab;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ELearningLab.ELearningWorkspace.Views;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ELearningLab.Service;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ELearningLab.Views;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.FunctionalTestInterface.Impl;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.FunctionalTestInterface.Impl.Controller;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.PositionsLab;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ResizeLab;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.SaveLab;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ShapesLab;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.SyncLab.Views;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TimerLab;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Views;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "using PPExtraEventHelper;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "using MessageBox \u003d System.Windows.Forms.MessageBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "using Office \u003d Microsoft.Office.Core;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPoint \u003d Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public partial class ThisAddIn"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "#pragma warning disable 0618"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        public readonly int MaxCustomTaskPanes \u003d 2;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public readonly string OfficeVersion2013 \u003d \"15.0\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        public readonly string OfficeVersion2010 \u003d \"14.0\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        public static string AppDataFolder \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), \"PowerPointLabs\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        public Ribbon1 Ribbon;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        internal ShapesLabConfigSaveFile ShapesLabConfig;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        internal PowerPointShapeGalleryPresentation ShapePresentation;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        private delegate void SyncElearningItemsDelegate();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string AppLogName \u003d \"PowerPointLabs.log\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string SlideXmlSearchPattern \u003d @\"slide(\\d+)\\.xml\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string TempFolderNamePrefix \u003d @\"\\PowerPointLabs Temp\\\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string ShapeGalleryPptxName \u003d \"ShapeGallery\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const string SyncLabPptxName \u003d \"Sync Lab - Do not edit\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string TempZipName \u003d \"tempZip.zip\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        private string _deactivatedPresFullName;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        private string tempFolderName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private bool _pptLabsShouldTerminate;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool isResizePaneVisible;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        private readonly Dictionary\u003cPowerPoint.DocumentWindow,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cCustomTaskPane\u003e\u003e _documentPaneMapper \u003d new Dictionary\u003cPowerPoint.DocumentWindow, List\u003cCustomTaskPane\u003e\u003e();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        private readonly Dictionary\u003cPowerPoint.DocumentWindow,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            string\u003e _documentHashcodeMapper \u003d new Dictionary\u003cPowerPoint.DocumentWindow, string\u003e();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /// The channel for .NET Remoting calls."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        private IChannel _ftChannel;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        #region API"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool IsApplicationVersion2010()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return Application.Version \u003d\u003d OfficeVersion2010;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool IsApplicationVersion2013()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return Application.Version \u003d\u003d OfficeVersion2013;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public Control GetActiveControl(Type type)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            CustomTaskPane taskPane \u003d GetActivePane(type);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return taskPane \u003d\u003d null ? null : taskPane.Control;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public string GetTempFolderName()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return tempFolderName;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public CustomTaskPane GetActivePane(Type type)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.DocumentWindow activeWindow;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                activeWindow \u003d Application.ActiveWindow;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (COMException)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return GetPaneFromWindow(type, activeWindow);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        public Control GetControlFromWindow(Type type, PowerPoint.DocumentWindow window)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            CustomTaskPane taskPane \u003d GetPaneFromWindow(typeof(CustomShapePane), window);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return taskPane \u003d\u003d null ? null : taskPane.Control;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        public CustomTaskPane GetPaneFromWindow(Type type, PowerPoint.DocumentWindow window)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!_documentPaneMapper.ContainsKey(window))"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cCustomTaskPane\u003e panes \u003d _documentPaneMapper[window];"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (CustomTaskPane pane in panes)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                try"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                    UserControl control \u003d pane.Control;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (control.GetType() \u003d\u003d type)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                        return pane;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                catch (Exception)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                    return null;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public string GetActiveWindowTempName()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            return _documentHashcodeMapper[Application.ActiveWindow];"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public void InitializeShapeGallery()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            // achieves singleton ShapePresentation"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (ShapePresentation?.Opened ?? false)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            string shapeRootFolderPath \u003d ShapesLabSettings.SaveFolderPath;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapePresentation \u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                new PowerPointShapeGalleryPresentation(shapeRootFolderPath, ShapeGalleryPptxName);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!ShapePresentation.Open(withWindow: false, focus: false) \u0026\u0026"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                !ShapePresentation.Opened)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                // if the presentation gets some error during opening, and the error could not"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                // be resolved by consistency check, prompt the user about the error"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(CommonText.ErrorShapeGalleryInit);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ShapePresentation.HasCategory(ShapesLabConfig.DefaultCategory))"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapePresentation.DefaultCategory \u003d ShapesLabConfig.DefaultCategory;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            // if we do not have the default category, create and add it to ShapeGallery"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapePresentation.AddCategory(ShapesLabConfig.DefaultCategory);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapePresentation.Save();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        public void InitializeShapesLabConfig()"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            // if ShapesLabConfig has already been intialized, do nothing"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            if (ShapesLabConfig !\u003d null)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapesLabConfig \u003d new ShapesLabConfigSaveFile(AppDataFolder);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            // create a directory under specified location if the location does not exist"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Directory.Exists(ShapesLabSettings.SaveFolderPath))"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                Directory.CreateDirectory(ShapesLabSettings.SaveFolderPath);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public void PrepareMediaFiles(PowerPoint.Presentation pres, string tempPath)"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            string presFullName \u003d pres.FullName;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            string presName \u003d pres.Name;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            // in case of embedded slides, we need to regulate the file name and full name"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            RegulatePresentationName(pres, tempPath, ref presName, ref presFullName);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                if (IsEmptyFile(presFullName))"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                string zipFullPath \u003d tempPath + TempZipName;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                // before we do everything, check if there\u0027s an undelete old zip file"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                // due to some error"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                try"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                    FileDir.DeleteFile(zipFullPath);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                    FileDir.CopyFile(presFullName, zipFullPath);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                catch (Exception e)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                    ErrorDialogBox.ShowDialog(CommonText.ErrorAccessTempFolder, string.Empty, e);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                ExtractMediaFiles(zipFullPath, tempPath);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                ErrorDialogBox.ShowDialog(CommonText.ErrorPrepareMedia, \"Files cannot be linked.\", e);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        public string PrepareTempFolder(PowerPoint.Presentation pres)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            string presName \u003d pres.Name;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            string presFullName \u003d pres.FullName;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            // here presFullName makes no use, just to fit in the signature"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            RegulatePresentationName(pres, null, ref presName, ref presFullName);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            string tempPath \u003d GetPresentationTempFolder(presName);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            // if temp folder doesn\u0027t exist, create"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                if (Directory.Exists(tempPath))"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                    Directory.Delete(tempPath, true);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                ErrorDialogBox.ShowDialog(CommonText.ErrorCreateTempFolder, string.Empty, e);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            finally"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                Directory.CreateDirectory(tempPath);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            return tempPath;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        public void RegisterResizePane(PowerPoint.Presentation presentation)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            if (GetActivePane(typeof(ResizeLabPane)) !\u003d null)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.DocumentWindow activeWindow \u003d presentation.Application.ActiveWindow;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            RegisterTaskPane(new ResizeLabPane(), ResizeLabText.TaskPaneTitle, activeWindow,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "                ResizeTaskPaneVisibleValueChangedEventHandler, null);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        public void RegisterRecorderPane(PowerPoint.DocumentWindow activeWindow, string tempFullPath)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            if (GetActivePane(typeof(RecorderTaskPane)) !\u003d null)"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            RegisterTaskPane(new RecorderTaskPane(tempFullPath), NarrationsLabText.RecManagementPanelTitle, activeWindow,"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                TaskPaneVisibleValueChangedEventHandler, null);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        public void SyncShapeAdd(string shapeName, string shapeFullName, string category)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.DocumentWindow window in Globals.ThisAddIn.Application.Windows)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "                if (window \u003d\u003d Application.ActiveWindow)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "                CustomShapePane shapePaneControl \u003d GetControlFromWindow(typeof(CustomShapePane), window) as CustomShapePane;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (shapePaneControl?.CurrentCategory \u003d\u003d category)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapePaneControl.AddCustomShape(shapeName, shapeFullName, false);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        public void SyncShapeRemove(string shapeName, string category)"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.DocumentWindow window in Globals.ThisAddIn.Application.Windows)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "                if (window \u003d\u003d Application.ActiveWindow)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "                CustomShapePane shapePaneControl \u003d GetControlFromWindow(typeof(CustomShapePane), window) as CustomShapePane;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (shapePaneControl?.CurrentCategory \u003d\u003d category)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapePaneControl.RemoveCustomShape(shapeName);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        public void SyncShapeRename(string shapeOldName, string shapeNewName, string category)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.DocumentWindow window in Globals.ThisAddIn.Application.Windows)"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "                if (window \u003d\u003d Application.ActiveWindow)"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "                CustomShapePane shapePaneControl \u003d GetControlFromWindow(typeof(CustomShapePane), window) as CustomShapePane;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (shapePaneControl?.CurrentCategory \u003d\u003d category)"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapePaneControl.RenameCustomShape(shapeOldName, shapeNewName);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool VerifyOnLocal(PowerPoint.Presentation pres)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "            Regex invalidPathRegex \u003d new Regex(\"^[hH]ttps?:\");"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            return !invalidPathRegex.IsMatch(pres.Path);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        public bool VerifyVersion(PowerPoint.Presentation pres)"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "            return !pres.Name.EndsWith(\".ppt\");"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Helper Functions"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        public CustomTaskPane RegisterTaskPane(UserControl control, string title, PowerPoint.DocumentWindow wnd,"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    EventHandler visibleChangeEventHandler \u003d null,"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    EventHandler dockPositionChangeEventHandler \u003d null)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "            LoadingDialogBox loadingDialog \u003d new LoadingDialogBox();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "            loadingDialog.Show();"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "            // note down the control\u0027s width"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            int width \u003d control.Width;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "            // register the user control to the CustomTaskPanes collection and set it as"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "            // current active task pane;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "            CustomTaskPane taskPane \u003d CustomTaskPanes.Add(control, title, wnd);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "            // task pane UI setup"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "            taskPane.Visible \u003d false;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            taskPane.Width \u003d width + 20;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "            // map the current window with the task pane"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!_documentPaneMapper.ContainsKey(wnd))"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "                _documentPaneMapper[wnd] \u003d new List\u003cCustomTaskPane\u003e();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            _documentPaneMapper[wnd].Add(taskPane);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_documentPaneMapper[wnd].Count \u003e MaxCustomTaskPanes)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "                // remove the oldest task pane"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "                Type oldestPaneType \u003d _documentPaneMapper[wnd].First().Control.GetType();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "                RemoveTaskPane(wnd, oldestPaneType);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "                Trace.TraceInformation("
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "                    $\"Removed pane {oldestPaneType.ToString()} over limit: {MaxCustomTaskPanes.ToString()}\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "            Trace.TraceInformation("
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "                \"After Pane Width Change: \" +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "                string.Format(\"Pane Width \u003d {0}, Pane Height \u003d {1}, Control Width \u003d {2}, Control Height {3}\","
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskPane.Width, taskPane.Height, control.Width, control.Height));"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "            // event handlers register"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "            if (visibleChangeEventHandler !\u003d null)"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "                taskPane.VisibleChanged +\u003d visibleChangeEventHandler;"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "            if (dockPositionChangeEventHandler !\u003d null)"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "                taskPane.DockPositionChanged +\u003d dockPositionChangeEventHandler;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "            loadingDialog.Close();"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "            return taskPane;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        protected override Microsoft.Office.Core.IRibbonExtensibility CreateRibbonExtensibilityObject()"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon \u003d new Ribbon1();"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "            return Ribbon;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SetupLogger()"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "            // Check if folder exists and if not, create it"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Directory.Exists(AppDataFolder))"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "                Directory.CreateDirectory(AppDataFolder);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "            string fileName \u003d DateTime.Now.ToString(\"yyyy-MM-dd\") + AppLogName;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "            string logPath \u003d Path.Combine(AppDataFolder, fileName);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "            Trace.AutoFlush \u003d true;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "            Trace.Listeners.Add(new TextWriterTraceListener(logPath));"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ShutDownRecorderPane()"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "            RecorderTaskPane recorder \u003d GetActiveControl(typeof(RecorderTaskPane)) as RecorderTaskPane;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (recorder?.HasEvent() ?? false)"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "                recorder.ForceStopEvent();"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void ShutDownPictureSlidesLab()"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PictureSlidesLab.Views.PictureSlidesLabWindow pictureSlidesLabWindow \u003d Ribbon.PictureSlidesLabWindow;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (pictureSlidesLabWindow?.IsOpen ?? false)"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                pictureSlidesLabWindow.Close();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        private void RemoveTaskPanes(PowerPoint.DocumentWindow activeWindow)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!_documentPaneMapper.ContainsKey(activeWindow))"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cCustomTaskPane\u003e activePanes \u003d _documentPaneMapper[activeWindow];"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (CustomTaskPane pane in activePanes)"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "                CustomTaskPanes.Remove(pane);"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "            _documentPaneMapper.Remove(activeWindow);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "        private void RemoveTaskPane(PowerPoint.DocumentWindow window, Type paneType)"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!_documentPaneMapper.ContainsKey(window))"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cCustomTaskPane\u003e activePanes \u003d _documentPaneMapper[window];"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d activePanes.Count - 1; i \u003e\u003d 0; i--)"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "                CustomTaskPane pane \u003d activePanes[i];"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "                if (pane.Control.GetType() !\u003d paneType)"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "                CustomTaskPanes.Remove(pane);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "                activePanes.RemoveAt(i);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "        private void RegulatePresentationName(PowerPoint.Presentation pres, string tempPath, ref string presName,"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "            ref string presFullName)"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "            // this function is used to handle \"embed on other application\" issue. In this case,"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "            // all of presentation name, path and full name do not match the usual rule: name is"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "            // \"Untitled\", path is empty string and full name is \"slide in XX application\". We need"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "            // to regulate these fields properly."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!presName.Contains(\".pptx\"))"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "                presName +\u003d \".pptx\";"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tempPath !\u003d null)"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "                // every time when recorder pane is open,"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "                // save this presentation\u0027s copy, which will be used"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "                // to load audio files later"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "                pres.SaveCopyAs(tempPath + presName);"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "                presFullName \u003d tempPath + presName;"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TaskPaneVisibleValueChangedEventHandler(object sender, EventArgs e)"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "            CustomTaskPane recorderPane \u003d GetActivePane(typeof(RecorderTaskPane));"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "            if (recorderPane \u003d\u003d null)"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "            RecorderTaskPane recorder \u003d recorderPane.Control as RecorderTaskPane;"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "            // trigger close form event when closing hide the pane"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (!recorder?.Visible ?? false)"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "                recorder.RecorderPaneClosing();"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "                // remove recorder pane and force it to reload when next time open"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "                RemoveTaskPane(Application.ActiveWindow, typeof(RecorderTaskPane));"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ResizeTaskPaneVisibleValueChangedEventHandler(object sender, EventArgs e)"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "            CustomTaskPane resizePane \u003d GetActivePane(typeof(ResizeLabPane));"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "            if (resizePane \u003d\u003d null)"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "            isResizePaneVisible \u003d resizePane.Visible;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool SlidesInRangeHaveCaptions(PowerPoint.SlideRange sldRange)"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.Slide slide in sldRange)"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPointSlide pptSlide \u003d PowerPointSlide.FromSlideFactory(slide);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "                if (pptSlide.HasCaptions())"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool SlidesInRangeHaveAudio(PowerPoint.SlideRange sldRange)"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.Slide slide in sldRange)"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPointSlide pptSlide \u003d PowerPointSlide.FromSlideFactory(slide);"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "                if (pptSlide.HasAudio())"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SlideShowBeginHandler(PowerPoint.SlideShowWindow wn)"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "            _isInSlideShow \u003d true;"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "            AgendaLab.AgendaLabMain.SlideShowBeginHandler();"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SlideShowEndHandler(PowerPoint.Presentation presentation)"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "            _isInSlideShow \u003d false;"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "            RecorderTaskPane recorder \u003d GetActiveControl(typeof(RecorderTaskPane)) as RecorderTaskPane;"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "            if (recorder \u003d\u003d null)"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "                AgendaLab.AgendaLabMain.SlideShowEndHandler();"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "            // force recording session ends"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "            if (recorder.HasEvent())"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "                recorder.ForceStopEvent();"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "            // enable slide show button"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "            recorder.EnableSlideShow();"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "            // when leave the show, dispose the in-show control if we have one"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "            recorder.DisposeInSlideControlBox();"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "            // if audio buffer is not empty, render the effects"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "            if (recorder.AudioBuffer.Count !\u003d 0)"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cPowerPointSlide\u003e slides \u003d PowerPointPresentation.Current.Slides.ToList();"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c recorder.AudioBuffer.Count; i++)"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (recorder.AudioBuffer[i].Count \u003d\u003d 0)"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "                    foreach (Tuple\u003cAudioMisc.Audio, int\u003e audio in recorder.AudioBuffer[i])"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "                        audio.Item1.EmbedOnSlide(slides[i], audio.Item2);"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (ELearningLab.Service.ComputerVoiceRuntimeService.IsRemoveAudioEnabled)"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "                            continue;"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "                        ELearningLab.Service.ComputerVoiceRuntimeService.IsRemoveAudioEnabled \u003d true;"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "                        Ribbon.RefreshRibbonControl(\"RemoveNarrationsButton\");"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "            // clear the buffer after embed"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "            recorder.AudioBuffer.Clear();"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "            // change back the slide range settings"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "            Application.ActivePresentation.SlideShowSettings.RangeType \u003d PowerPoint.PpSlideShowRangeType.ppShowAll;"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "            AgendaLab.AgendaLabMain.SlideShowEndHandler();"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool IsEmptyFile(string filePath)"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!File.Exists(filePath))"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "            FileInfo fileInfo \u003d new FileInfo(filePath);"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "            return fileInfo.Length \u003d\u003d 0;"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdateRecorderPane(int count, int id)"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "            CustomTaskPane recorderPane \u003d GetActivePane(typeof(RecorderTaskPane));"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "            // if there\u0027s no active pane associated with the current window, return"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "            if (recorderPane \u003d\u003d null)"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "            RecorderTaskPane recorder \u003d recorderPane.Control as RecorderTaskPane;"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "            if (recorder \u003d\u003d null)"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "            // if the user has selected none or more than 1 slides, recorder pane should show nothing"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "            if (count !\u003d 1)"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "                if (recorderPane.Visible)"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "                    recorder.ClearDisplayLists();"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "                // initailize the current slide"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "                recorder.InitializeAudioAndScript(PowerPointCurrentPresentationInfo.CurrentSlide, null, false);"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "                // if the pane is shown, refresh the pane immediately"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "                if (recorderPane.Visible)"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "                    recorder.UpdateLists(id);"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdateTimerPane(bool isVisible)"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "            CustomTaskPane timerPane \u003d GetActivePane(typeof(TimerPane));"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "            if (timerPane !\u003d null)"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "                timerPane.Visible \u003d isVisible;"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdateELearningPane(int selectedSlidesCount)"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "            CustomTaskPane elearningLabPane \u003d GetActivePane(typeof(ELearningLabTaskpane));"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "            if (elearningLabPane \u003d\u003d null)"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "            ELearningLabTaskpane taskpane \u003d elearningLabPane.Control as ELearningLabTaskpane;"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "            taskpane.ELearningLabMainPanel.SyncElearningLabOnSlideSelectionChanged();"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "            if (elearningLabPane.Visible \u003d\u003d true)"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "                taskpane.ELearningLabMainPanel.ReloadELearningLabOnSlideSelectionChanged();"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "        private string GetPresentationTempFolder(string presName)"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "            string tempName \u003d presName.GetHashCode().ToString(CultureInfo.InvariantCulture);"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "            string tempPath \u003d Path.GetTempPath() + TempFolderNamePrefix + tempName + @\"\\\";"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "            return tempPath;"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "        private void CleanUp(PowerPoint.DocumentWindow associatedWindow)"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_documentHashcodeMapper.ContainsKey(associatedWindow))"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "                _documentHashcodeMapper.Remove(associatedWindow);"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "            // if there exists some task panes, remove them"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "            RemoveTaskPanes(associatedWindow);"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ExtractMediaFiles(string zipFullPath, string tempPath)"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "                ZipStorer zip \u003d ZipStorer.Open(zipFullPath, FileAccess.Read);"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cZipStorer.ZipFileEntry\u003e dir \u003d zip.ReadCentralDir();"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "                Regex regex \u003d new Regex(SlideXmlSearchPattern);"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "                foreach (ZipStorer.ZipFileEntry entry in dir)"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "                    string name \u003d Path.GetFileName(entry.FilenameInZip);"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (name \u003d\u003d null)"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "                        continue;"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (name.Contains(\".wav\") ||"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "                        regex.IsMatch(name))"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "                        zip.ExtractFile(entry, tempPath + name);"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "                zip.Close();"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "                FileDir.DeleteFile(zipFullPath);"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "                ErrorDialogBox.ShowDialog(CommonText.ErrorExtract, \"Archived files cannot be retrieved.\", e);"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "        private void BreakRecorderEvents()"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "            RecorderTaskPane recorder \u003d GetActiveControl(typeof(RecorderTaskPane)) as RecorderTaskPane;"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (recorder?.HasEvent() ?? false)"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "                recorder.ForceStopEvent();"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void ShutDownSyncLab()"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // If sync lab open, then close it."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PowerPoint.Presentation syncLabPpt \u003d GetOpenedSyncLabPresentation();"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (syncLabPpt !\u003d null)"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                syncLabPpt.Close();"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                Trace.TraceInformation(\"SyncLab terminated.\");"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private PowerPoint.Presentation GetOpenedSyncLabPresentation()"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            foreach (PowerPoint.Presentation presentation in Application.Presentations)"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                if (presentation.Name.Contains(SyncLabPptxName))"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    return presentation;"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void ShutDownShapesLab()"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (ShapePresentation?.Opened ?? false)"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                if (string.IsNullOrEmpty(ShapesLabConfig.DefaultCategory))"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    ShapesLabConfig.DefaultCategory \u003d ShapePresentation.Categories[0];"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                ShapePresentation.Close();"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                Trace.TraceInformation(\"ShapesLab terminated.\");"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "        # endregion"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "        # region Powerpoint Application Event Handlers"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ThisAddInStartup(object sender, EventArgs e)"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "            SetupLogger();"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "            Logger.Log(\"PowerPointLabs Started\");"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "            CultureUtil.SetDefaultCulture(CultureInfo.GetCultureInfo(\"en-US\"));"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "            new Updater().TryUpdate();"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "            SetupFunctionalTestChannels();"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "            PPMouse.Init(Application);"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "            PPKeyboard.Init(Application);"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "            PPCopy.Init(Application);"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "            UIThreadExecutor.Init();"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "            SetupDoubleClickHandler();"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "            SetupTabActivateHandler();"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "            SetupAfterCopyPasteHandler();"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "            SaveLabSettings.InitialiseLocalStorage();"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "            // According to MSDN, when more than 1 event are triggered, callback\u0027s invoking sequence"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "            // follows the defining order. I.e. the earlier you defined, the earlier it will be"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "            // executed."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "            // Here, we want the priority to be: Application action \u003e Window action \u003e Slide action"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "            // Priority High: Application Actions"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "            ((PowerPoint.EApplication_Event)Application).NewPresentation +\u003d ThisAddInNewPresentation;"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "            Application.AfterNewPresentation +\u003d ThisAddInAfterNewPresentation;"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "            Application.PresentationOpen +\u003d ThisAddInPresentationOpen;"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "            Application.PresentationClose +\u003d ThisAddInPresentationClose;"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "            // Priority Mid: Window Actions"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "            Application.WindowActivate +\u003d ThisAddInApplicationOnWindowActivate;"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "            Application.WindowDeactivate +\u003d ThisAddInApplicationOnWindowDeactivate;"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "            Application.WindowSelectionChange +\u003d ThisAddInSelectionChanged;"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "            Application.SlideShowBegin +\u003d SlideShowBeginHandler;"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "            Application.SlideShowEnd +\u003d SlideShowEndHandler;"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "            // Priority Low: Slide Actions"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "            Application.SlideSelectionChanged +\u003d ThisAddInSlideSelectionChanged;"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ThisAddInApplicationOnWindowDeactivate(PowerPoint.Presentation pres, PowerPoint.DocumentWindow wn)"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Trace.TraceInformation(pres.Name + \" (Presentation) and \" + wn.Caption + \" (Window) deactivated.\");"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "            _deactivatedPresFullName \u003d pres.FullName;"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ThisAddInApplicationOnWindowActivate(PowerPoint.Presentation pres, PowerPoint.DocumentWindow wn)"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (pres \u003d\u003d null)"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Trace.TraceInformation(pres.Name + \" (Presentation) and \" + wn.Caption + \" (Window) activated.\");"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "            CustomShapePane customShape \u003d GetActiveControl(typeof(CustomShapePane)) as CustomShapePane;"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "            // make sure ShapeGallery\u0027s default category is consistent with current presentation"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "            if (customShape !\u003d null)"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "                string currentCategory \u003d customShape.CurrentCategory;"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "                ShapePresentation.DefaultCategory \u003d currentCategory;"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // If a window was activated in any way, PptLabs should not terminate."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            _pptLabsShouldTerminate \u003d false;"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ThisAddInSlideSelectionChanged(PowerPoint.SlideRange sldRange)"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "            // TODO: doing range sweep to check these var may affect performance, consider initializing these"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "            // TODO: variables only at program starts"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "            NotesToCaptions.IsRemoveCaptionsEnabled \u003d SlidesInRangeHaveCaptions(sldRange);"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "            ComputerVoiceRuntimeService.IsRemoveAudioEnabled \u003d SlidesInRangeHaveAudio(sldRange);"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "            // update recorder pane"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "            if (sldRange.Count \u003e 0)"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "                int slideID;"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "                try"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "                    slideID \u003d sldRange[1].SlideID;"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "                catch (COMException)"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateRecorderPane(sldRange.Count, slideID);"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "                TimerLab.TimerLab.IsTimerEnabled \u003d true;"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                PictureSlidesLab.PictureSlidesLab.IsPictureSlidesEnabled \u003d true;"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateRecorderPane(sldRange.Count, -1);"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "                TimerLab.TimerLab.IsTimerEnabled \u003d false;"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateTimerPane(false);"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                PictureSlidesLab.PictureSlidesLab.IsPictureSlidesEnabled \u003d false;"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                ShutDownPictureSlidesLab();"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "            UpdateELearningPane(sldRange.Count);"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "            // in case the recorder is on event"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "            BreakRecorderEvents();"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "            // ribbon function init"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "            HighlightLab.HighlightBulletsText.IsHighlightPointsEnabled \u003d true;"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "            HighlightLab.HighlightBulletsBackground.IsHighlightBackgroundEnabled \u003d true;"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "            if (sldRange.Count !\u003d 1)"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "                HighlightLab.HighlightBulletsText.IsHighlightPointsEnabled \u003d false;"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "                HighlightLab.HighlightBulletsBackground.IsHighlightBackgroundEnabled \u003d false;"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.Slide tmp \u003d sldRange[1];"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.Presentation presentation \u003d PowerPointPresentation.Current.Presentation;"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "                int slideIndex \u003d tmp.SlideIndex;"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.Slide next \u003d tmp;"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.Slide prev \u003d tmp;"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "                if (slideIndex \u003c presentation.Slides.Count)"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "                    next \u003d presentation.Slides[slideIndex + 1];"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "                if (slideIndex \u003e 1)"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "                    prev \u003d presentation.Slides[slideIndex - 1];"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"PictureSlidesLabButton\");"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"TimerLabButton\");"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"HighlightPointsButton\");"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"HighlightBackgroundButton\");"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"RemoveCaptionsButton\");"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"RemoveNarrationsButton\");"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"ELearningTaskPaneButton\");"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "        // To handle AccessViolationException"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "        [HandleProcessCorruptedStateExceptions]"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ThisAddInSelectionChanged(PowerPoint.Selection sel)"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "            if (sel.Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionShapes)"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.Shape sh \u003d null;"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "                try"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "                    sh \u003d sel.ShapeRange[1];"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "                catch (AccessViolationException e)"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "                    Logger.LogException(e, \"ThisAddInSelectionChanged\");"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "                    Logger.Log(\"We do not have access to the ShapeRange now!\");"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "                if (isResizePaneVisible)"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "                    sel.ShapeRange.LockAspectRatio \u003d ResizeLabPaneWPF.IsAspectRatioLocked"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "                        ? Office.MsoTriState.msoTrue"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "                        : Office.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // When there is no selection on the slide, disable the add/copy buttons on"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // customshapepane and syncpane respectively"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            SyncPane syncPane \u003d GetActivePane(typeof(SyncPane))?.Control as SyncPane;"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            syncPane?.UpdateOnSelectionChange(sel);"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CustomShapePane customShapePane \u003d GetActivePane(typeof(CustomShapePane))?.Control as CustomShapePane;"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            customShapePane?.UpdateOnSelectionChange(sel);"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"AnimateInSlideButton\");"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"DrillDownButton\");"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"StepBackButton\");"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"AddSpotlightButton\");"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"AddZoomInButton\");"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"AddZoomOutButton\");"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"ZoomToAreaButton\");"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"ReplaceWithClipboardButton\");"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"PasteIntoGroupButton\");"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"ConvertToTooltipButton\");"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"CreateCalloutButton\");"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"CreateTriggerButton\");"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "            // To grey out the \"HighlightText\" button whenever non-text fragment or nothing has been selected"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(\"HighlightTextButton\");"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ThisAddInNewPresentation(PowerPoint.Presentation pres)"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.DocumentWindow activeWindow \u003d pres.Application.ActiveWindow;"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "            string tempName \u003d pres.Name.GetHashCode().ToString(CultureInfo.InvariantCulture);"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "            _documentHashcodeMapper[activeWindow] \u003d tempName;"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "            // Refresh ribbon to enable the menu buttons"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "            RefreshRibbonMenuButtons();"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Initialise the \"Maintain Tab Focus\" and \"Compress Images\" checkbox"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.InitialiseVisibilityCheckbox();"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Ribbon.InitialiseCompressImagesCheckbox();"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "        // solve new un-modified unsave problem"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ThisAddInAfterNewPresentation(PowerPoint.Presentation pres)"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "            //Access the BuiltInDocumentProperties so that the property storage does get created."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "            object o \u003d pres.BuiltInDocumentProperties;"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "            pres.Saved \u003d Microsoft.Office.Core.MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ThisAddInPresentationOpen(PowerPoint.Presentation pres)"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "            // Windows count could be zero if presentation is opened as preview of template slides"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "            if (pres.Application.Windows.Count \u003e 0)"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.DocumentWindow activeWindow \u003d pres.Application.ActiveWindow;"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "                tempFolderName \u003d pres.Name.GetHashCode().ToString(CultureInfo.InvariantCulture);"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "                // if we opened a new window, register the window with its name"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!_documentHashcodeMapper.ContainsKey(activeWindow))"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "                    _documentHashcodeMapper[activeWindow] \u003d tempFolderName;"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "                // Refresh ribbon to enable the menu buttons if there are now at least one window"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "                RefreshRibbonMenuButtons();"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                // Initialise the \"Maintain Tab Focus\" and \"Compress Images\" checkbox"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "                Ribbon.InitialiseVisibilityCheckbox();"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                Ribbon.InitialiseCompressImagesCheckbox();"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ThisAddInPresentationClose(PowerPoint.Presentation pres)"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Trace.TraceInformation(\"Closing \" + pres.Name + \"...\");"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // We need to check if there is only one window AND the active window\u0027s presentation "
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // has the same name as the one we are closing because it is possible for background "
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // presentation (those without windows) to close and trigger this event as well."
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // We only want to shut down PPTLabs if we are closing the main presentation."
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (Application.Windows.Count \u003d\u003d 1 \u0026\u0026"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                Application.ActiveWindow.Presentation.FullName \u003d\u003d pres.FullName)"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                // If this current window we are closing is the last window, then PptLabs should terminate."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                _pptLabsShouldTerminate \u003d true;"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // special case: if we are closing \u0027ShapeGallery.pptx\u0027 or \u0027Sync Lab - Do not edit.pptx\u0027, no other action will be done"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (pres.Name.Contains(ShapeGalleryPptxName) || pres.Name.Contains(SyncLabPptxName))"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (_pptLabsShouldTerminate)"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                ShutDownSyncLab();"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                ShutDownShapesLab();"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                ShutDownPictureSlidesLab();"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "            ShutDownRecorderPane();"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "            // find the document that holds the presentation with pres.Name"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "            // special case will be embedded slide. in this case pres.Windows return exception"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.DocumentWindow associatedWindow;"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                Trace.TraceInformation(\"Total windows of closing presentation \u003d \" + pres.Windows.Count);"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "                Trace.TraceInformation(\"Windows are: \");"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "                foreach (PowerPoint.DocumentWindow window in pres.Windows)"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    Trace.TraceInformation(\"\\t\" + window.Caption);"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "                associatedWindow \u003d pres.Windows[1];"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception)"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                Trace.TraceInformation(\"Closing presentation - \" + pres.FullName + \" - has no window.\");"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "            // for Functional Test to close presentation"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "            if (PowerPointLabsFT.IsFunctionalTestOn)"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "                IntPtr handle \u003d Native.FindWindow(\"PPTFrameClass\", pres.Name + \" - Microsoft PowerPoint\");"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "                Native.SetForegroundWindow(handle);"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "                SendKeys.Send(\"N\");"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "            Trace.TraceInformation(\"Closing associated window...\");"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "            CleanUp(associatedWindow);"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "            // Refresh ribbon to grey out the menu / buttons if there are no windows open"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "            RefreshRibbonMenuButtons();"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "        private void RefreshRibbonMenuButtons()"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(AnimationLabText.RibbonMenuId);"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(ZoomLabText.RibbonMenuId);"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(NarrationsLabText.RibbonMenuId);"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(CaptionsLabText.RibbonMenuId);"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(HighlightLabText.RibbonMenuId);"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(EffectsLabText.RibbonMenuId);"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(PositionsLabText.RibbonMenuId);"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(ResizeLabText.RibbonMenuId);"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(ColorsLabText.RibbonMenuId);"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(SaveLabText.RibbonMenuId);"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(SyncLabText.RibbonMenuId);"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(ShapesLabText.RibbonMenuId);"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(CropLabText.RibbonMenuId);"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(PasteLabText.RibbonMenuId);"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(TimerLabText.RibbonMenuId);"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(AgendaLabText.RibbonMenuId);"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "            Ribbon.RefreshRibbonControl(PictureSlidesLabText.RibbonMenuId);"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ThisAddInShutdown(object sender, EventArgs e)"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "            PPMouse.StopHook();"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "            PPKeyboard.StopHook();"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "            PPCopy.StopHook();"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "            PositionsPaneWpf.ClearAllEventHandlers();"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "            UIThreadExecutor.TearDown();"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "            Trace.TraceInformation(DateTime.Now.ToString(\"yyyyMMddHHmmss\") + \": PowerPointLabs Exiting\");"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "            Trace.Close();"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_ftChannel !\u003d null)"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "                ChannelServices.UnregisterChannel(_ftChannel);"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "        # region Copy paste handlers"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "        private PowerPoint.DocumentWindow _copyFromWnd;"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "        private readonly Regex _shapeNamePattern \u003d new Regex(@\"^[^\\[]\\D+\\s\\d+$\");"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "        private HashSet\u003cString\u003e _isShapeMatchedAlready;"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AfterPasteEventHandler(PowerPoint.Selection selection)"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.Slide currentSlide \u003d Application.ActiveWindow.View.Slide as PowerPoint.Slide;"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "                string pptName \u003d Application.ActivePresentation.Name;"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "                if (selection.Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionShapes"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    \u0026\u0026 currentSlide?.SlideID !\u003d _previousSlideForCopyEvent.SlideID"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 pptName \u003d\u003d _previousPptName)"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "                    PowerPoint.ShapeRange pastedShapes \u003d selection.ShapeRange;"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "                    List\u003cstring\u003e nameListForPastedShapes \u003d new List\u003cstring\u003e();"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "                    Dictionary\u003cstring, string\u003e nameDictForPastedShapes \u003d new Dictionary\u003cstring, string\u003e();"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "                    List\u003cstring\u003e nameListForCopiedShapes \u003d new List\u003cstring\u003e();"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "                    List\u003cPowerPoint.Shape\u003e corruptedShapes \u003d new List\u003cPowerPoint.Shape\u003e();"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "                    foreach (PowerPoint.Shape shape in _copiedShapes)"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "                        try"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "                            nameListForCopiedShapes.Add(shape.Name);"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "                        catch"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "                            //handling corrupted shapes"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "                            shape.Copy();"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "                            PowerPoint.Shape fixedShape \u003d _previousSlideForCopyEvent.Shapes.Paste()[1];"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "                            fixedShape.Left \u003d shape.Left;"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "                            fixedShape.Top \u003d shape.Top;"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "                            while (fixedShape.ZOrderPosition \u003e shape.ZOrderPosition)"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "                            {"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "                                fixedShape.ZOrder(Office.MsoZOrderCmd.msoSendBackward);"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "                            }"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "                            corruptedShapes.Add(shape);"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "                            nameListForCopiedShapes.Add(fixedShape.Name);"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "                    foreach (PowerPoint.Shape shape in corruptedShapes)"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "                        shape.Delete();"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "                    _isShapeMatchedAlready \u003d new HashSet\u003cstring\u003e();"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "                    for (int i \u003d 1; i \u003c\u003d pastedShapes.Count; i++)"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "                        PowerPoint.Shape shape \u003d pastedShapes[i];"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "                        int matchedShapeIndex \u003d FindMatchedShape(shape);"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "                        string uniqueName \u003d Guid.NewGuid().ToString();"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "                        nameDictForPastedShapes[uniqueName] \u003d nameListForCopiedShapes[matchedShapeIndex];"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "                        shape.Name \u003d uniqueName;"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "                        nameListForPastedShapes.Add(shape.Name);"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "                    //Re-select pasted shapes"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "                    PowerPoint.ShapeRange range \u003d currentSlide.Shapes.Range(nameListForPastedShapes.ToArray());"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "                    foreach (PowerPoint.Shape shape in range)"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "                        shape.Name \u003d nameDictForPastedShapes[shape.Name];"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "                    range.Select();"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "                else if (selection.Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionSlides)"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "                    List\u003cPowerPoint.Slide\u003e pastedSlides \u003d selection.SlideRange.Cast\u003cPowerPoint.Slide\u003e().OrderBy(x \u003d\u003e x.SlideIndex).ToList();"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "                    for (int i \u003d 0; i \u003c pastedSlides.Count; i++)"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "                        if (AgendaLab.AgendaSlide.IsReferenceslide(_copiedSlides[i]))"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "                        {"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "                            pastedSlides[i].Name \u003d _copiedSlides[i].Name;"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "                            pastedSlides[i].Design \u003d _copiedSlides[i].Design;"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "            catch"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "                //TODO: log in ThisAddIn.cs"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "        private int FindMatchedShape(PowerPoint.Shape shape)"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "            //Strong matching:"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c _copiedShapes.Count; i++)"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "                if (IsSimilarShape(shape, _copiedShapes[i])"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 IsSimilarName(shape.Name, _copiedShapes[i].Name)"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 Math.Abs(shape.Left - _copiedShapes[i].Left) \u003c float.Epsilon"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 Math.Abs(shape.Height - _copiedShapes[i].Height) \u003c float.Epsilon"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 !_isShapeMatchedAlready.Contains(_copiedShapes[i].Id.ToString(CultureInfo.InvariantCulture)))"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "                    _isShapeMatchedAlready.Add(_copiedShapes[i].Id.ToString(CultureInfo.InvariantCulture));"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "                    return i;"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "            //Blur matching:"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c _copiedShapes.Count; i++)"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "                if (IsSimilarShape(shape, _copiedShapes[i])"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 IsSimilarName(shape.Name, _copiedShapes[i].Name)"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 !_isShapeMatchedAlready.Contains(_copiedShapes[i].Id.ToString(CultureInfo.InvariantCulture)))"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "                    _isShapeMatchedAlready.Add(_copiedShapes[i].Id.ToString(CultureInfo.InvariantCulture));"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "                    return i;"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "            return -1;"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool IsSimilarShape(PowerPoint.Shape shape, PowerPoint.Shape shape2)"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "            return Math.Abs(shape.Width - shape2.Width) \u003c float.Epsilon"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u0026\u0026 Math.Abs(shape.Height - shape2.Height) \u003c float.Epsilon"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u0026\u0026 shape.Type \u003d\u003d shape2.Type"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u0026\u0026 (shape.Type !\u003d Office.MsoShapeType.msoAutoShape"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "                       || shape.AutoShapeType \u003d\u003d shape2.AutoShapeType);"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Similar name defi:"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "        /// 1. if they\u0027re not default shape name, they must be the exact same"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "        /// 2. if they\u0027re default shape name, the shape type in the name must be the exact same"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "        /// 3. otherwise not similar"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"name1\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"name2\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003creturns\u003e\u003c/returns\u003e"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool IsSimilarName(string name1, string name2)"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "            //remove enclosing brackets for name2"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "            Regex nameEnclosedInBrackets \u003d new Regex(@\"^\\[\\D+\\s\\d+\\]$\");"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!nameEnclosedInBrackets.IsMatch(name1)"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 nameEnclosedInBrackets.IsMatch(name2)"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 name2.Length \u003e 2)"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "                name2 \u003d name2.Substring(1, name2.Length - 2);"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!_shapeNamePattern.IsMatch(name1)"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 !_shapeNamePattern.IsMatch(name2))"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "                return name1.Equals(name2);"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "            if (_shapeNamePattern.IsMatch(name1)"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 _shapeNamePattern.IsMatch(name2))"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "                Regex shapeTypeInName \u003d new Regex(@\"^[^\\[]\\D+\\s(?\u003d\\d+$)\");"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "                string shapeTypeForName1 \u003d shapeTypeInName.Match(name1).ToString();"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "                string shapeTypeForName2 \u003d shapeTypeInName.Match(name2).ToString();"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "                return shapeTypeForName1.Equals(shapeTypeForName2);"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AfterPasteRecorderEventHandler(PowerPoint.Selection selection)"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selection.Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionSlides)"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "                // invalid paste event triggered because of system message loss"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "                if (_copiedSlides.Count \u003c 1)"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "                // if we copied from a presentation without recorder pane or pasted to a"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "                // presentation without recorder pane, paste event will not be entertained"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!_documentPaneMapper.ContainsKey(_copyFromWnd) ||"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": "                    _documentPaneMapper[_copyFromWnd] \u003d\u003d null ||"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "                    GetActivePane(typeof(RecorderTaskPane)) \u003d\u003d null)"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "                RecorderTaskPane copyFromRecorderPane \u003d"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "                    GetPaneFromWindow(typeof(RecorderTaskPane), _copyFromWnd).Control as RecorderTaskPane;"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "                RecorderTaskPane activeRecorderPane \u003d GetActivePane(typeof(RecorderTaskPane)).Control as RecorderTaskPane;"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "                if (activeRecorderPane \u003d\u003d null ||"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "                    copyFromRecorderPane \u003d\u003d null)"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.SlideRange slideRange \u003d selection.SlideRange;"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "                int oriSlide \u003d 0;"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "                foreach (object sld in slideRange)"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "                    PowerPointSlide oldSlide \u003d PowerPointSlide.FromSlideFactory(_copiedSlides[oriSlide]);"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "                    PowerPointSlide newSlide \u003d PowerPointSlide.FromSlideFactory(sld as PowerPoint.Slide);"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "                    activeRecorderPane.PasteSlideAudioAndScript(newSlide,"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                copyFromRecorderPane.CopySlideAudioAndScript(oldSlide));"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "                    oriSlide++;"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "                // update the lists when all done"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateRecorderPane(slideRange.Count, slideRange[1].SlideID);"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AfterCopyEventHandler(PowerPoint.Selection selection)"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "                _copyFromWnd \u003d Application.ActiveWindow;"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "                if (selection.Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionSlides)"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "                    _copiedSlides.Clear();"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "                    foreach (object sld in selection.SlideRange)"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "                        PowerPoint.Slide slide \u003d sld as PowerPoint.Slide;"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "                        _copiedSlides.Add(slide);"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "                    _copiedSlides.Sort((x, y) \u003d\u003e (x.SlideIndex - y.SlideIndex));"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": "                else if (selection.Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionShapes)"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "                    _copiedShapes.Clear();"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "                    _previousSlideForCopyEvent \u003d Application.ActiveWindow.View.Slide as PowerPoint.Slide;"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "                    _previousPptName \u003d Application.ActivePresentation.Name;"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "                    foreach (object sh in selection.ShapeRange)"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "                        PowerPoint.Shape shape \u003d sh as PowerPoint.Shape;"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "                        _copiedShapes.Add(shape);"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "                    _copiedShapes.Sort((x, y) \u003d\u003e (x.Id - y.Id));"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "                Ribbon.RefreshRibbonControl(\"PasteToFillSlideButton\");"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "                Ribbon.RefreshRibbonControl(\"PasteToFitSlideButton\");"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "                Ribbon.RefreshRibbonControl(\"PasteAtOriginalPositionButton\");"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "                Ribbon.RefreshRibbonControl(\"ReplaceWithClipboardButton\");"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "                Ribbon.RefreshRibbonControl(\"PasteIntoGroupButton\");"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "            catch"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "                //TODO: log in ThisAddIn.cs"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "        # endregion"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Tab Activate"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SetupTabActivateHandler()"
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "            _tabActivate +\u003d TabActivateEventHandler;"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "        private Native.WinEventDelegate _tabActivate;"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "        private IntPtr _eventHook \u003d IntPtr.Zero;"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "        //This handler is used to check, whether Home tab is enabled or not"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "        //After Shortcut (Alt + H + O) is sent to PowerPoint by method OpenPropertyWindowForOffice10,"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "        //if unsuccessful (Home tab is not enabled), EVENT_SYSTEM_MENUEND will be received"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "        //if successful   (Property window is open), EVENT_OBJECT_CREATE will be received"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "        //To check the events occurred, use AccEvent32.exe"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "        //Refer to MSAA - Event Constants:"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": "        //http://msdn.microsoft.com/en-us/library/windows/desktop/dd318066(v\u003dvs.85).aspx"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": "        void TabActivateEventHandler(IntPtr hook, uint eventType,"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": "        IntPtr hwnd, int idObject, int child, uint thread, uint time)"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": "            if (eventType \u003d\u003d (uint)Native.Event.EVENT_SYSTEM_MENUEND"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "                || eventType \u003d\u003d (uint)Native.Event.EVENT_OBJECT_CREATE)"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": "                Native.UnhookWinEvent(_eventHook);"
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": "                _eventHook \u003d IntPtr.Zero;"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": "            if (eventType \u003d\u003d (uint)Native.Event.EVENT_SYSTEM_MENUEND)"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBox.Show(CommonText.ErrorTabActivate, CommonText.ErrorTabActivateTitle);"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Double Click to Open Property Window"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string ShortcutAltHO \u003d \"%h%o\";"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int CommandOpenBackgroundFormat \u003d 0x8F;"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool _isInSlideShow;"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SetupAfterCopyPasteHandler()"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "            PPCopy.AfterCopy +\u003d AfterCopyEventHandler;"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": "            PPCopy.AfterPaste +\u003d AfterPasteRecorderEventHandler;"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": "            PPCopy.AfterPaste +\u003d AfterPasteEventHandler;"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": "        private readonly List\u003cPowerPoint.Shape\u003e _copiedShapes \u003d new List\u003cPowerPoint.Shape\u003e();"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": "        private readonly List\u003cPowerPoint.Slide\u003e _copiedSlides \u003d new List\u003cPowerPoint.Slide\u003e();"
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "        private PowerPoint.Slide _previousSlideForCopyEvent;"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": "        private string _previousPptName;"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SetupDoubleClickHandler()"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": "            PPMouse.DoubleClick +\u003d DoubleClickEventHandler;"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DoubleClickEventHandler(PowerPoint.Selection selection)"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "                if (selection.Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionNone)"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "                    TrySelectTransparentShape();"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "                if (selection.Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionShapes)"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (IsApplicationVersion2010())"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "                        OpenPropertyWindowForOffice10();"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "                    else"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "                        OpenPropertyWindowForOffice13OrHigher(selection);"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (COMException e)"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": "                string logText \u003d \"DoubleClickEventHandler\" + \": \" + e.Message + \": \" + e.StackTrace;"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": "                Trace.TraceError(DateTime.Now.ToString(\"yyyyMMddHHmmss\") + \": \" + logText);"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TrySelectTransparentShape()"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": "            if (PowerPointCurrentPresentationInfo.CurrentSlide \u003d\u003d null)"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Shape overlappingShape \u003d null;"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "            int overlappingShapeZIndex \u003d -1;"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Shapes shapesInCurrentSlide \u003d PowerPointCurrentPresentationInfo.CurrentSlide.Shapes;"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.Shape shape in shapesInCurrentSlide)"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "                if (IsMouseWithinShape(shape)"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 shape.ZOrderPosition \u003e overlappingShapeZIndex)"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "                    overlappingShape \u003d shape;"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "                    overlappingShapeZIndex \u003d shape.ZOrderPosition;"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (overlappingShape?.Visible \u003d\u003d Office.MsoTriState.msoTrue)"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": "                overlappingShape.Select();"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool IsMouseWithinShape(PowerPoint.Shape sh)"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "            float x \u003d Cursor.Position.X;"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "            float y \u003d Cursor.Position.Y;"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": "            int left \u003d Application.ActiveWindow.PointsToScreenPixelsX(sh.Left);"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": "            int top \u003d Application.ActiveWindow.PointsToScreenPixelsY(sh.Top);"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "            int right \u003d Application.ActiveWindow.PointsToScreenPixelsX(sh.Left + sh.Width);"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "            int bottom \u003d Application.ActiveWindow.PointsToScreenPixelsY(sh.Top + sh.Height);"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "            return x \u003e left"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 x \u003c right"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 y \u003e top"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 y \u003c bottom;"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": "        //For office 2013 or Higher version:"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "        //Open Background Format window, then selecting the shape will"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": "        //convert the window to Property window"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": "        private void OpenPropertyWindowForOffice13OrHigher(PowerPoint.Selection selection)"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!_isInSlideShow)"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.ShapeRange selectedShapes \u003d selection.ShapeRange;"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": "                Native.SendMessage("
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "                    Process.GetCurrentProcess().MainWindowHandle,"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "                    (uint)Native.Message.WM_COMMAND,"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "                    new IntPtr(CommandOpenBackgroundFormat),"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "                    IntPtr.Zero);"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedShapes.Select();"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "        //For office 2010 (in office 2013, this method has bad user exp)"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "        //Use hotkey (Alt - H - O) to activate Property window"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "        private void OpenPropertyWindowForOffice10()"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!_isInSlideShow)"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (_eventHook \u003d\u003d IntPtr.Zero)"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": "                        //Check whether Home tab is enabled or not"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": "                        _eventHook \u003d Native.SetWinEventHook("
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": "                            (uint)Native.Event.EVENT_SYSTEM_MENUEND,"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": "                            (uint)Native.Event.EVENT_OBJECT_CREATE,"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "                            IntPtr.Zero,"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": "                            _tabActivate,"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": "                            (uint)Process.GetCurrentProcess().Id,"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": "                            0,"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": "                            0);"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "                    SendKeys.Send(ShortcutAltHO);"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (InvalidOperationException)"
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "                // ignore exception"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SetupFunctionalTestChannels()"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "            _ftChannel \u003d new IpcChannel(\"PowerPointLabsFT\");"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": "            ChannelServices.RegisterChannel(_ftChannel, false);"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "            RemotingConfiguration.RegisterWellKnownServiceType(typeof(PowerPointLabsFT),"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": "                \"PowerPointLabsFT\", WellKnownObjectMode.Singleton);"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": "        #region VSTO generated code"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Required method for Designer support - do not modify"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": "        /// the contents of this method with the code editor."
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": "        private void InternalStartup()"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": "            Startup +\u003d ThisAddInStartup;"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": "            Shutdown +\u003d ThisAddInShutdown;"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 13,
      "blewjy": 77,
      "YuPeiHenry": 19,
      "-": 1529
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/TimerLab/TimerLabConstants.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.TimerLab"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    static class TimerLabConstants"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        public const double DefaultDisplayDuration \u003d 1.00;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        public const int DefaultDenomination \u003d 10;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public const bool DefaultCountdownSetting \u003d false;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        public const int SizeStringLimit \u003d 3;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        public const float DefaultTimerWidth \u003d 600;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        public const float MinTimerWidth \u003d 100;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        public const float MaxTimerWidth \u003d 1000;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public const float DefaultTimerHeight \u003d 50;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public const float MinTimerHeight \u003d 10;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        public const float MaxTimerHeight \u003d 600;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        public const float DefaultMinutesLineMarkerWidth \u003d 4;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        public const float DefaultSecondsLineMarkerWidth \u003d 2;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        public const float DefaultTimeMarkerHeight \u003d 30;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        public const float DefaultTimeMarkerWidth \u003d 1;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        public const float DefaultSliderBodyWidth \u003d 4;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        public const float DefaultSliderHeadSize \u003d 20;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const int TransparencyTransparent \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        public const int Rotate180Degrees \u003d 180;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        public const float ColorChangeDuration \u003d 0.001f;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        public const int SecondsInMinute \u003d 60;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        public const int StartTime \u003d 0;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        public const double FractionalDecrementOffset \u003d 0.60;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        public const double FractionalDecrementLowerBound \u003d 0.00;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        public const double FractionalIncrementOffset \u003d 0.99;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        public const double FractionalIncrementUpperBound \u003d 0.59;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string ProgressBarId \u003d \"ProgressBar\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ShapeId \u003d \"TimerLabShapeId\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string TimerBodyId \u003d \"TimerBody\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string TimerLineMarkerId \u003d \"TimerLineMarker\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string TimerLineMarkerGroupId \u003d \"TimerLineMarkerGroup\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string TimerTimeMarkerId \u003d \"TimerTimeMarker\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string TimerTimeMarkerGroupId \u003d \"TimerTimeMarkerGroup\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string TimerSliderHeadId \u003d \"TimerSliderHead\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string TimerSliderBodyId \u003d \"TimerSliderBody\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        public const string ErrorMessageOneTimerOnly \u003d \"Only one timer allowed per slide.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 2,
      "blewjy": 2,
      "-": 50
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/TimerLab/TimerLabPaneWPF.xaml.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Text.RegularExpressions;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Controls;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Input;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Extension;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPoint \u003d Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.TimerLab"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /// Interaction logic for TimerLabPaneWPF.xaml"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public partial class TimerLabPaneWPF : UserControl"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Shape timerBody \u003d null;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Shape lineMarkerGroup \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Shape timeMarkerGroup \u003d null;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Shape sliderHead \u003d null;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Shape sliderBody \u003d null;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        Shape progressBar \u003d null;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        bool isProgressBar \u003d false;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        public TimerLabPaneWPF()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            InitializeComponent();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Timer Properties"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        private int Duration()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            int duration \u003d TimerLabConstants.SecondsInMinute;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            if (DurationTextBox.Value !\u003d null)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                double value \u003d Math.Round(DurationTextBox.Value.Value, 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                int minutes \u003d (int)value;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                int seconds \u003d (int)(Math.Round(value - minutes, 2) * 100);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                duration \u003d (minutes * TimerLabConstants.SecondsInMinute) + seconds;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return duration;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private bool Countdown()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            bool isCountdown \u003d TimerLabConstants.DefaultCountdownSetting;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (CountdownCheckBox.IsChecked.HasValue)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                isCountdown \u003d CountdownCheckBox.IsChecked.Value;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return isCountdown;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private bool ProgressBar()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (ProgressBarCheckBox.IsChecked.HasValue)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                isProgressBar \u003d ProgressBarCheckBox.IsChecked.Value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return isProgressBar;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        private float TimerWidth()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            float width \u003d (float)WidthSlider.Value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return width;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        private float TimerHeight()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            float height \u003d (float)HeightSlider.Value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return height;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        private float DefaultTimerLeft(float slideWidth, float timerWidth)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return (slideWidth - timerWidth) / 2;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        private float DefaultTimerTop(float slideHeight, float timerHeight)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return (slideHeight - timerHeight) / 2;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private int TimerBodyColor()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return GraphicsUtil.PackRgbInt(68, 84, 106);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private int ProgressBarTimerBodyColor()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return GraphicsUtil.PackRgbInt(247, 150, 70);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        private int SliderColor()"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return GraphicsUtil.PackRgbInt(247, 150, 70);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        private int TimeMarkerColor()"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return GraphicsUtil.PackRgbInt(90, 90, 90);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        private int LineMarkerColor()"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return GraphicsUtil.PackRgbInt(68, 114, 196);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Timer Creation"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void CreateBlocksTimer(int duration, float timerWidth, float timerHeight, float timerLeft,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            float timerTop, bool isCountdown, bool isProgressBar)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (isProgressBar)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                AddTimerBody(timerWidth, timerHeight, timerLeft, timerTop, ProgressBarTimerBodyColor());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                AddProgressBar(duration, timerWidth, timerHeight, TimerBodyColor(), SlideWidth());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            else"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                AddTimerBody(timerWidth, timerHeight, timerLeft, timerTop, TimerBodyColor());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                AddSlider(duration, timerWidth, timerHeight, SliderColor(), SlideWidth());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AddMarkers(duration, timerWidth, timerHeight, TimeMarkerColor(), LineMarkerColor(), isCountdown);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Body"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AddTimerBody(float timerWidth, float timerHeight, float timerLeft, float timerTop, int timerBodyColor)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            timerBody \u003d this.GetCurrentSlide().Shapes.AddShape(Microsoft.Office.Core.MsoAutoShapeType.msoShapeRectangle,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                timerLeft, timerTop, timerWidth, timerHeight);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            timerBody.Name \u003d TimerLabConstants.TimerBodyId;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            timerBody.Tags.Add(TimerLabConstants.ShapeId, TimerLabConstants.TimerBodyId);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            timerBody.Fill.ForeColor.RGB \u003d timerBodyColor;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            timerBody.Line.ForeColor.RGB \u003d timerBodyColor;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Markers"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void AddMarkers(int duration, float timerWidth, float timerHeight, int timeMarkerColor, int lineMarkerColor, bool isCountdown)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            if (duration \u003c\u003d TimerLabConstants.SecondsInMinute)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                AddSecondsMarker(duration, TimerLabConstants.DefaultDenomination, timerWidth, timerHeight, "
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                                TimerLabConstants.DefaultMinutesLineMarkerWidth, "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                                TimerLabConstants.DefaultTimeMarkerWidth, TimerLabConstants.DefaultTimeMarkerHeight,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                timeMarkerColor, lineMarkerColor, isCountdown);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                AddMinutesMarker(duration, TimerLabConstants.DefaultDenomination, timerWidth, timerHeight,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                                TimerLabConstants.DefaultMinutesLineMarkerWidth,"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                                TimerLabConstants.DefaultTimeMarkerWidth, TimerLabConstants.DefaultTimeMarkerHeight,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                timeMarkerColor, lineMarkerColor, isCountdown);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            UpdateMarkerPosition();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AddSecondsMarker(int duration, int denomination, float timerWidth, float timerHeight, "
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                                    float lineMarkerWidth, float timeMarkerWidth, float timeMarkerHeight,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                    int timeMarkerColor, int lineMarkerColor, bool isCountdown)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cShape\u003e lineMarkers \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cShape\u003e timeMarkers \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            float widthPerSec \u003d timerWidth / duration;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            int currentMarker \u003d TimerLabConstants.StartTime;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            while (currentMarker \u003c\u003d duration) "
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                // Get the marker text to be printed"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                String markerText \u003d isCountdown ? (duration - currentMarker).ToString() : currentMarker.ToString();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                // Add time marker"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                Shape timeMarker \u003d AddTimeMarker(currentMarker, widthPerSec, timerHeight, timeMarkerWidth, timeMarkerHeight, timeMarkerColor, markerText);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                timeMarkers.Add(timeMarker);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                // Add line marker if it is not the start or end"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                if (currentMarker !\u003d TimerLabConstants.StartTime \u0026\u0026 currentMarker !\u003d duration)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                    Shape lineMarker \u003d AddLineMarker(currentMarker, widthPerSec, timerHeight, "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                                                    TimerLabConstants.DefaultSecondsLineMarkerWidth, lineMarkerColor);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                    lineMarkers.Add(lineMarker);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                if (currentMarker \u003e\u003d duration)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                currentMarker \u003d GetNextMarkerPosition(currentMarker, duration, denomination, isCountdown);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            lineMarkerGroup \u003d null;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            if (lineMarkers.Count \u003d\u003d 1)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                lineMarkerGroup \u003d lineMarkers[0];"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            else if (lineMarkers.Count \u003e 1)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                lineMarkerGroup \u003d GroupShapes(TimerLabConstants.TimerLineMarkerId, TimerLabConstants.TimerLineMarkerGroupId);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            timeMarkerGroup \u003d GroupShapes(TimerLabConstants.TimerTimeMarkerId, TimerLabConstants.TimerTimeMarkerGroupId);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AddMinutesMarker(int duration, int denomination, float timerWidth, float timerHeight, "
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                                    float lineMarkerWidth, float timeMarkerWidth, float timeMarkerHeight, "
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                    int timeMarkerColor, int lineMarkerColor, bool isCountdown)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cShape\u003e lineMarkers \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cShape\u003e timeMarkers \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            float widthPerSec \u003d timerWidth / duration;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            int currentMarker \u003d TimerLabConstants.StartTime;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "            while (currentMarker \u003c\u003d duration)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                bool isStart \u003d currentMarker \u003d\u003d 0;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                bool isMinuteMark \u003d isCountdown ? (duration - currentMarker) % TimerLabConstants.SecondsInMinute \u003d\u003d 0 : currentMarker % TimerLabConstants.SecondsInMinute \u003d\u003d 0;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                bool isEnd \u003d currentMarker \u003d\u003d duration;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                // Add time markers for start, every minute, and end"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                if (isStart || isMinuteMark || isEnd)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                    // Add time marker"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    Shape timeMarker \u003d AddMinuteTimeMarker(duration, currentMarker, widthPerSec, timerHeight, timeMarkerWidth, timeMarkerHeight, timeMarkerColor, isCountdown);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                    timeMarkers.Add(timeMarker);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                // Add line marker if it is not the start or end"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                if (currentMarker !\u003d TimerLabConstants.StartTime \u0026\u0026 currentMarker !\u003d duration)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                    // Thicken the line if it is a minute marker"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    Shape lineMarker \u003d AddMinuteLineMarker(duration, currentMarker, widthPerSec, timerHeight, lineMarkerColor, isCountdown);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                    lineMarkers.Add(lineMarker);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                if (currentMarker \u003e\u003d duration)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                currentMarker \u003d GetNextMarkerPosition(currentMarker, duration, denomination, isCountdown);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            lineMarkerGroup \u003d GroupShapes(TimerLabConstants.TimerLineMarkerId, TimerLabConstants.TimerLineMarkerGroupId);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            timeMarkerGroup \u003d GroupShapes(TimerLabConstants.TimerTimeMarkerId, TimerLabConstants.TimerTimeMarkerGroupId);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private int GetNextMarkerPosition(int currentMarker, int duration, int denomination, bool isCountdown)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // If it\u0027s Countdown Timer and we are at the start, take into account specified durations that are not multiple of denomination"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (isCountdown \u0026\u0026 currentMarker \u003d\u003d 0 \u0026\u0026 duration % denomination !\u003d 0)"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return duration % denomination;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            else"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return Math.Min(currentMarker + denomination, duration);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private Shape AddMinuteTimeMarker(int duration, int currentMarker, float widthPerSec, float timerHeight,"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                    float timeMarkerWidth, float timeMarkerHeight, int timeMarkerColor, bool isCountdown)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Get the marker text to be printed"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            int remainingDuration \u003d duration - currentMarker;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            String markerText \u003d isCountdown ? remainingDuration.ToString() : currentMarker.ToString();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Shape timeMarker \u003d AddTimeMarker(currentMarker, widthPerSec, timerHeight, timeMarkerWidth, timeMarkerHeight, timeMarkerColor, markerText);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (!isCountdown)"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                int remainingSeconds \u003d currentMarker % TimerLabConstants.SecondsInMinute;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                if (currentMarker \u003d\u003d duration \u0026\u0026 remainingSeconds !\u003d 0)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    timeMarker.TextFrame.TextRange.Text \u003d (currentMarker / TimerLabConstants.SecondsInMinute).ToString() +"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                                            \".\" + remainingSeconds.ToString(\"D2\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                else"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    timeMarker.TextFrame.TextRange.Text \u003d (currentMarker / TimerLabConstants.SecondsInMinute).ToString();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            else"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                int leftoverSeconds \u003d remainingDuration % TimerLabConstants.SecondsInMinute;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                if (currentMarker \u003d\u003d 0 \u0026\u0026 leftoverSeconds !\u003d 0)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    timeMarker.TextFrame.TextRange.Text \u003d (remainingDuration / TimerLabConstants.SecondsInMinute).ToString() +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                                            \".\" + leftoverSeconds.ToString(\"D2\");"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                else"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    timeMarker.TextFrame.TextRange.Text \u003d (remainingDuration / TimerLabConstants.SecondsInMinute).ToString();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return timeMarker;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private Shape AddMinuteLineMarker(int duration, int currentMarker, float widthPerSec, float timerHeight, "
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                          int lineMarkerColor, bool isCountdown)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            bool isMinuteMarker \u003d isCountdown ? ((duration - currentMarker) % TimerLabConstants.SecondsInMinute \u003d\u003d 0) :"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                                         (currentMarker % TimerLabConstants.SecondsInMinute \u003d\u003d 0);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            float markerLineWeight \u003d isMinuteMarker ? TimerLabConstants.DefaultMinutesLineMarkerWidth :"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                                        TimerLabConstants.DefaultSecondsLineMarkerWidth;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Shape lineMarker \u003d AddLineMarker(currentMarker, widthPerSec, timerHeight, markerLineWeight, lineMarkerColor);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return lineMarker;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        private Shape AddTimeMarker(int currentMarker, float widthPerSec, float timerHeight, "
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                    float timeMarkerWidth, float timeMarkerHeight, int timeMarkerColor, string markerText)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape timeMarker \u003d this.GetCurrentSlide().Shapes.AddShape(Microsoft.Office.Core.MsoAutoShapeType.msoShapeRectangle,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                    currentMarker * widthPerSec, 0, "
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                    timeMarkerWidth, timeMarkerHeight);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            timeMarker.Name \u003d TimerLabConstants.TimerTimeMarkerId + markerText;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            timeMarker.Tags.Add(TimerLabConstants.ShapeId, TimerLabConstants.TimerTimeMarkerId);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            timeMarker.TextFrame.WordWrap \u003d Microsoft.Office.Core.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timeMarker.Fill.Transparency \u003d TimerLabConstants.TransparencyTransparent;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timeMarker.Line.Transparency \u003d TimerLabConstants.TransparencyTransparent;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "            timeMarker.TextFrame.TextRange.Font.Color.RGB \u003d timeMarkerColor;"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            timeMarker.TextFrame.TextRange.Text \u003d markerText;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            return timeMarker;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        private Shape AddLineMarker(int currentMarker, float widthPerSec, float timerHeight, float lineWeight, int lineMarkerColor)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            string markerText \u003d currentMarker.ToString();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            float beginX \u003d currentMarker * widthPerSec;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            float beginY \u003d 0;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            float endX \u003d currentMarker * widthPerSec;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            float endY \u003d timerHeight;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape lineMarker \u003d this.GetCurrentSlide().Shapes.AddLine(beginX, beginY, endX, endY);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            lineMarker.Name \u003d TimerLabConstants.TimerLineMarkerId + markerText;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "            lineMarker.Tags.Add(TimerLabConstants.ShapeId, TimerLabConstants.TimerLineMarkerId);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "            lineMarker.Line.Weight \u003d lineWeight;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "            lineMarker.Line.ForeColor.RGB \u003d lineMarkerColor;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "            return lineMarker;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        #region Progress Bar"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void AddProgressBar(int duration, float timerWidth, float timerHeight, int sliderColor, float slideWidth)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            CreateProgressBarShape(timerWidth, timerHeight, sliderColor);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // Positioning Progress Bar onto the timer"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            UpdateProgressBarPosition();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // Add effect"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AddProgressBarAnimation(duration);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void AddProgressBarAnimation(int duration)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PowerPoint.Effect progressBarMotionEffect \u003d this.GetCurrentSlide().TimeLine.MainSequence.AddEffect("
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    progressBar,"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    PowerPoint.MsoAnimEffect.msoAnimEffectGrowShrink,"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    PowerPoint.MsoAnimateByLevel.msoAnimateLevelNone,"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    PowerPoint.MsoAnimTriggerType.msoAnimTriggerOnPageClick);"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            progressBarMotionEffect.Timing.Duration \u003d duration;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            progressBarMotionEffect.Timing.SmoothStart \u003d Microsoft.Office.Core.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            progressBarMotionEffect.Timing.SmoothEnd \u003d Microsoft.Office.Core.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PowerPoint.AnimationBehavior shrinkBehavior \u003d progressBarMotionEffect.Behaviors[1];"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // Shrink width to 0"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            shrinkBehavior.ScaleEffect.ByX \u003d 0f;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            shrinkBehavior.ScaleEffect.ByY \u003d 100f;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Slider"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AddSlider(int duration, float timerWidth, float timerHeight, int sliderColor, float slideWidth)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            CreateSliderHeadAndBodyShape(timerHeight, sliderColor);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            UpdateSliderPosition();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "            // Add slider animations"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AddSliderAnimations(duration, timerWidth, slideWidth);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void AddSliderAnimations(int duration, float timerWidth, float slideWidth)"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            AddSliderMotionEffect(sliderHead, duration, timerWidth, slideWidth, PowerPoint.MsoAnimTriggerType.msoAnimTriggerOnPageClick);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "            AddSliderMotionEffect(sliderBody, duration, timerWidth, slideWidth, PowerPoint.MsoAnimTriggerType.msoAnimTriggerWithPrevious);"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "            AddSliderEndEffect(sliderHead, PowerPoint.MsoAnimTriggerType.msoAnimTriggerAfterPrevious);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "            AddSliderEndEffect(sliderBody, PowerPoint.MsoAnimTriggerType.msoAnimTriggerWithPrevious);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AddSliderMotionEffect(Shape shape, int duration, float timerWidth, float slideWidth, PowerPoint.MsoAnimTriggerType trigger)"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Effect sliderMotionEffect \u003d this.GetCurrentSlide().TimeLine.MainSequence.AddEffect("
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "                    shape,"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "                    PowerPoint.MsoAnimEffect.msoAnimEffectPathRight, "
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "                    PowerPoint.MsoAnimateByLevel.msoAnimateLevelNone, "
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "                    trigger);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.AnimationBehavior motion \u003d sliderMotionEffect.Behaviors[1];"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "            float end \u003d timerWidth / slideWidth;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "            motion.MotionEffect.Path \u003d \"M 0 0 L \" + end + \" 0 E\";"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "            sliderMotionEffect.Timing.Duration \u003d duration;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "            sliderMotionEffect.Timing.SmoothStart \u003d Microsoft.Office.Core.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "            sliderMotionEffect.Timing.SmoothEnd \u003d Microsoft.Office.Core.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AddSliderEndEffect(Shape shape, PowerPoint.MsoAnimTriggerType trigger)"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Effect sliderEndEffect \u003d this.GetCurrentSlide().TimeLine.MainSequence.AddEffect("
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "                    shape,"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "                    PowerPoint.MsoAnimEffect.msoAnimEffectDarken, "
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "                    PowerPoint.MsoAnimateByLevel.msoAnimateLevelNone,"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "                    trigger);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "            sliderEndEffect.Timing.Duration \u003d TimerLabConstants.ColorChangeDuration;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Controls"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Create Button"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        private void CreateButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "            // check if timer is already created"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "            if (FindTimer())"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "                ReformMissingComponents();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateMarkerPosition();"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                if (isProgressBar)"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    UpdateProgressBarPosition();"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                else"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "                    UpdateSliderPosition();"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "                WidthTextBox.Text \u003d Math.Round(timerBody.Width).ToString();"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "                HeightTextBox.Text \u003d Math.Round(timerBody.Height).ToString();"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "                ShowErrorMessageBox(TimerLabConstants.ErrorMessageOneTimerOnly);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "                // Properties"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "                int duration \u003d Duration();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                bool isCountdown \u003d Countdown();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                bool isProgressBar \u003d ProgressBar();"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "                float timerWidth \u003d TimerWidth();"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "                float timerHeight \u003d TimerHeight();"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "                // Position"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "                float timerLeft \u003d DefaultTimerLeft(SlideWidth(), timerWidth);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "                float timerTop \u003d DefaultTimerTop(SlideHeight(), timerHeight);"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                CreateBlocksTimer(duration, timerWidth, timerHeight, timerLeft, timerTop, isCountdown, isProgressBar);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Duration Control"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DurationTextBox_ValueDecremented(object sender, "
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "            MahApps.Metro.Controls.NumericUpDownChangedRoutedEventArgs args)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "            if (DurationTextBox.Value \u003d\u003d null)"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "                DurationTextBox.Value \u003d TimerLabConstants.DefaultDisplayDuration;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "            double value \u003d Math.Round(DurationTextBox.Value.Value, 2);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "            int integerPart \u003d (int)value;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "            double fractionalPart \u003d value - integerPart;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Math.Round(fractionalPart, 2) \u003d\u003d TimerLabConstants.FractionalDecrementLowerBound)"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "                DurationTextBox.Value \u003d (integerPart - 1) + TimerLabConstants.FractionalDecrementOffset;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DurationTextBox_ValueIncremented(object sender, "
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "            MahApps.Metro.Controls.NumericUpDownChangedRoutedEventArgs args)"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "            if (DurationTextBox.Value \u003d\u003d null)"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "                DurationTextBox.Value \u003d TimerLabConstants.DefaultDisplayDuration;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "            double value \u003d Math.Round(DurationTextBox.Value.Value, 2);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "            int integerPart \u003d (int)value;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "            double fractionalPart \u003d value - integerPart;"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Math.Round(fractionalPart, 2) \u003d\u003d TimerLabConstants.FractionalIncrementUpperBound)"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "                DurationTextBox.Value \u003d integerPart + TimerLabConstants.FractionalIncrementOffset;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DurationTextBox_LostFocus(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "            if (DurationTextBox.Value \u003d\u003d null)"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "            double value \u003d Math.Round(DurationTextBox.Value.Value, 2);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "            int integerPart \u003d (int)value;"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "            double fractionalPart \u003d value - integerPart;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "            if (Math.Round(fractionalPart, 2) \u003e TimerLabConstants.FractionalIncrementUpperBound)"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "                DurationTextBox.Value \u003d integerPart + 1;"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (!FindTimer())"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "            ReformMissingComponents();"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "            RecreateMarkers();"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "            AdjustZOrder();"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (isProgressBar)"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                UpdateProgressBarPosition();"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                UpdateProgressBarAnimationDuration();"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            else"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateSliderPosition();"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateSliderAnimationDuration();"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Countdown Control"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void CountdownCheckBox_StateChanged(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // CountdownCheckBox.isChecked can return null if checkbox is in indeterminate state in a 3-state checkbox (checked, unchecked, indeterminate)"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // In this application, the checkbox is only 2-state, but we guard against this because IsChecked returns a nullable boolean (bool?)"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (CountdownCheckBox.IsChecked \u003d\u003d null)"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (!FindTimer())"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ReformMissingComponents();"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            RecreateMarkers();"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            AdjustZOrder();"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (isProgressBar)"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                UpdateProgressBarPosition();"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                UpdateProgressBarPosition();"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            else"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateSliderPosition();"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateSliderAnimationDuration();"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }  "
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void ProgressBarCheckBox_StateChanged(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // ProgressBarCheckBox.isChecked can return null if checkbox is in indeterminate state in a 3-state checkbox (checked, unchecked, indeterminate)"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // In this application, the checkbox is only 2-state, but we guard against this because IsChecked returns a nullable boolean (bool?)"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (ProgressBarCheckBox.IsChecked \u003d\u003d null)"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ProgressBar();"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (!FindTimer())"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ReformMissingComponents();"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            RecreateMarkers();"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (isProgressBar)"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                RemoveSlider();"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                ChangeTimerBodyColor(SliderColor());"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            else"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                RemoveProgressBar();"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                ChangeTimerBodyColor(TimerBodyColor());"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                RecreateSlider();"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AdjustZOrder();"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Width Control"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "        private void WidthSlider_Loaded(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "            WidthSlider.Minimum \u003d TimerLabConstants.MinTimerWidth;"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "            WidthSlider.Maximum \u003d SlideWidth();"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "            WidthSlider.Value \u003d TimerLabConstants.DefaultTimerWidth;   "
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "        private void WidthSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs\u003cdouble\u003e e)"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "            // update text box value"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "            float value \u003d (float)WidthSlider.Value;"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "            WidthTextBox.Text \u003d ((int)value).ToString();"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (!FindTimer()) "
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // update timer dimensions"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "            ReformMissingComponents();"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "                "
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "            float increment \u003d value - timerBody.Width;"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "            timerBody.Left \u003d NewPosition(timerBody.Left, increment);"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "            timerBody.Width \u003d timerBody.Width + increment;"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (isProgressBar)"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                progressBar.Left \u003d timerBody.Left;"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                progressBar.Width \u003d timerBody.Width * 2;"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                UpdateProgressBarPositionX();"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            } "
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            else"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {                    "
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateSliderPositionX();"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            UpdateMarkerPositionX();"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "        private void WidthTextBox_Loaded(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "            WidthTextBox.Text \u003d TimerLabConstants.DefaultTimerWidth.ToString();"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "        private void WidthTextBox_PreviewTextInput(object sender, TextCompositionEventArgs e)"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "            e.Handled \u003d !IsNumbersOnly(e.Text);"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "        private void WidthTextBox_TextBoxPasting(object sender, DataObjectPastingEventArgs e)"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "            if (e.DataObject.GetDataPresent(typeof(String)))"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "                String text \u003d (String)e.DataObject.GetData(typeof(String));"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!IsNumbersOnly(text))"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "                    e.CancelCommand();"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "                e.CancelCommand();"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "        private void WidthTextBox_LostFocus(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "            if (string.IsNullOrEmpty(WidthTextBox.Text))"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "                WidthTextBox.Text \u003d ((int)WidthSlider.Value).ToString();"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Convert.ToInt32(WidthTextBox.Text);"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "            value \u003d Math.Max(value, (int)TimerLabConstants.MinTimerWidth);"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "            value \u003d Math.Min(value, (int)SlideWidth());"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "            WidthTextBox.Text \u003d value.ToString();"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "            WidthSlider.Value \u003d value;"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "            // update timer dimensions"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "            if (FindTimer())"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "                ReformMissingComponents();"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Height Control"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "        private void HeightSlider_Loaded(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "            HeightSlider.Minimum \u003d TimerLabConstants.MinTimerHeight;"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "            HeightSlider.Maximum \u003d SlideHeight();"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "            HeightSlider.Value \u003d TimerLabConstants.DefaultTimerHeight;"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "        private void HeightSlider_ValueChanged(object sender, RoutedPropertyChangedEventArgs\u003cdouble\u003e e)"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "            // update text box value"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "            float value \u003d (float)HeightSlider.Value;"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "            HeightTextBox.Text \u003d ((int)value).ToString();"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (!FindTimer())"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // update timer dimensions"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "            ReformMissingComponents();"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "            float increment \u003d value - timerBody.Height;"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "            timerBody.Top \u003d NewPosition(timerBody.Top, increment);"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "            timerBody.Height \u003d timerBody.Height + increment;"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (isProgressBar)"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                progressBar.Top \u003d timerBody.Top;"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                progressBar.Height \u003d timerBody.Height;"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                UpdateProgressBarPositionX();"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            else"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "                UpdateSliderPositionY();"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            UpdateMarkerPositionY();"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "        private void HeightTextBox_Loaded(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "            HeightTextBox.Text \u003d TimerLabConstants.DefaultTimerHeight.ToString();"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "        private void HeightTextBox_PreviewTextInput(object sender, TextCompositionEventArgs e)"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "            e.Handled \u003d !IsNumbersOnly(e.Text);"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "        private void HeightTextBox_TextBoxPasting(object sender, DataObjectPastingEventArgs e)"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "            if (e.DataObject.GetDataPresent(typeof(String)))"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "                String text \u003d (String)e.DataObject.GetData(typeof(String));"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!IsNumbersOnly(text))"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "                    e.CancelCommand();"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "                e.CancelCommand();"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "        private void HeightTextBox_LostFocus(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "            if (string.IsNullOrEmpty(HeightTextBox.Text))"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "                HeightTextBox.Text \u003d ((int)HeightSlider.Value).ToString();"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Convert.ToInt32(HeightTextBox.Text);"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "            value \u003d Math.Max(value, (int)TimerLabConstants.MinTimerHeight);"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "            value \u003d Math.Min(value, (int)SlideHeight());"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "            HeightTextBox.Text \u003d value.ToString();"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "            HeightSlider.Value \u003d value;"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "            // update timer dimensions"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "            if (FindTimer())"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "                ReformMissingComponents();"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Timer Helper"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void ChangeTimerBodyColor(int timerBodyColor)"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerBody.Fill.ForeColor.RGB \u003d timerBodyColor;"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerBody.Line.ForeColor.RGB \u003d timerBodyColor;"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void CreateProgressBarShape(float timerWidth, float timerHeight, int sliderColor)"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // Creation of progress bar"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Shape visibleProgressBar \u003d this.GetCurrentSlide().Shapes.AddShape(Microsoft.Office.Core.MsoAutoShapeType.msoShapeRectangle,"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                                                                       0, 0, timerWidth, timerHeight);"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            visibleProgressBar.Fill.ForeColor.RGB \u003d sliderColor;"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            visibleProgressBar.Line.ForeColor.RGB \u003d sliderColor;"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            float rightOfProgressBar \u003d visibleProgressBar.Left + visibleProgressBar.Width;"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            float topOfProgressBar \u003d visibleProgressBar.Top;"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            "
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // Position invisible progress bar to the right of the visible one"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Shape invisibleProgressBar \u003d this.GetCurrentSlide().Shapes.AddShape(Microsoft.Office.Core.MsoAutoShapeType.msoShapeRectangle,"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                                                                       rightOfProgressBar, topOfProgressBar, timerWidth, timerHeight);"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            invisibleProgressBar.Fill.Transparency \u003d TimerLabConstants.TransparencyTransparent;"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            invisibleProgressBar.Line.Transparency \u003d TimerLabConstants.TransparencyTransparent;"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            "
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // Grouping the shapes together"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            string[] progressBarNames \u003d new string[] { visibleProgressBar.Name, invisibleProgressBar.Name };"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            progressBar \u003d this.GetCurrentSlide().Shapes.Range(progressBarNames).Group();"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            progressBar.Name \u003d TimerLabConstants.ProgressBarId;"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            progressBar.Tags.Add(TimerLabConstants.ShapeId, TimerLabConstants.ProgressBarId);"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void CreateSliderHeadAndBodyShape(float timerHeight, int sliderColor)"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            sliderHead \u003d this.GetCurrentSlide().Shapes.AddShape(Microsoft.Office.Core.MsoAutoShapeType.msoShapeIsoscelesTriangle,"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                                                                0, 0,"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                                                                TimerLabConstants.DefaultSliderHeadSize,"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                                                                TimerLabConstants.DefaultSliderHeadSize);"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            sliderHead.Name \u003d TimerLabConstants.TimerSliderHeadId;"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            sliderHead.Tags.Add(TimerLabConstants.ShapeId, TimerLabConstants.TimerSliderHeadId);"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            sliderHead.Rotation \u003d TimerLabConstants.Rotate180Degrees;"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            sliderHead.Fill.ForeColor.RGB \u003d sliderColor;"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            sliderHead.Line.Transparency \u003d TimerLabConstants.TransparencyTransparent;"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            sliderBody \u003d this.GetCurrentSlide().Shapes.AddShape(Microsoft.Office.Core.MsoAutoShapeType.msoShapeRectangle,"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                                                                0, 0,"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                                                                TimerLabConstants.DefaultSliderBodyWidth,"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                                                                timerHeight);"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            sliderBody.Name \u003d TimerLabConstants.TimerSliderBodyId;"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            sliderBody.Tags.Add(TimerLabConstants.ShapeId, TimerLabConstants.TimerSliderBodyId);"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            sliderBody.Fill.ForeColor.RGB \u003d sliderColor;"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            sliderBody.Line.Transparency \u003d TimerLabConstants.TransparencyTransparent;"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ReformMissingComponents()"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "            bool isTimerBodyRecreated \u003d ReformTimerBodyIfMissing();"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "            bool isMarkersRecreated \u003d ReformMarkersIfMissing();"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            bool isTimerComponentRecreated \u003d ReformTimerComponentIfMissing();"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (isTimerBodyRecreated || isMarkersRecreated || isTimerComponentRecreated)"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "                AdjustZOrder();"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool ReformTimerBodyIfMissing()"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "            if (timerBody \u003d\u003d null)"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                int timerBodyColor;"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                if (isProgressBar)"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                {"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    timerBodyColor \u003d SliderColor();"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                else"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                {"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    timerBodyColor \u003d TimerBodyColor();"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "                AddTimerBody(TimerWidth(), TimerHeight(), "
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "                            DefaultTimerLeft(SlideWidth(), TimerWidth()),"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "                            DefaultTimerTop(SlideHeight(), TimerHeight()), "
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                            timerBodyColor);"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "            timerBody.Rotation \u003d 0;"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool ReformMarkersIfMissing()"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "            if (lineMarkerGroup \u003d\u003d null || timeMarkerGroup \u003d\u003d null)"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "                RecreateMarkers();"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private bool ReformTimerComponentIfMissing()"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (isProgressBar)"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                if (progressBar \u003d\u003d null)"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                {"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    RecreateProgressBar();"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            else"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "                if (sliderHead \u003d\u003d null || sliderBody \u003d\u003d null)"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "                    RecreateSlider();"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "        private void RecreateMarkers()"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "            // remove current markers"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "            int timeMarkerColor \u003d TimeMarkerColor();"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "            if (timeMarkerGroup !\u003d null)"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "                timeMarkerColor \u003d timeMarkerGroup.TextFrame.TextRange.Font.Color.RGB;"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "                timeMarkerGroup.Delete();"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "            int lineMarkerColor \u003d LineMarkerColor();"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "            if (lineMarkerGroup !\u003d null)"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "                lineMarkerColor \u003d lineMarkerGroup.Line.ForeColor.RGB;"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "                lineMarkerGroup.Delete();"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "            // add new markers"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            AddMarkers(Duration(), timerBody.Width, timerBody.Height, timeMarkerColor, lineMarkerColor, Countdown());"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "            timeMarkerGroup.TextFrame.TextRange.Font.Color.RGB \u003d timeMarkerColor;"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void RemoveSlider()"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            sliderHead \u003d GetShapeByName(TimerLabConstants.TimerSliderHeadId);"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            sliderBody \u003d GetShapeByName(TimerLabConstants.TimerSliderBodyId);"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            sliderHead.Delete();"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            sliderBody.Delete();"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "        private void RecreateSlider()"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "            int sliderColor \u003d SliderColor();"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "            // remove current Slider"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "            if (sliderHead !\u003d null)"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "                sliderColor \u003d sliderHead.Fill.ForeColor.RGB;"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "                sliderHead.Delete();"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "            if (sliderBody !\u003d null)"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "                sliderColor \u003d sliderBody.Fill.ForeColor.RGB;"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "                sliderBody.Delete();"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "            AddSlider(Duration(), timerBody.Width, timerBody.Height, sliderColor, SlideWidth());"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void RemoveProgressBar()"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            progressBar \u003d GetShapeByName(TimerLabConstants.ProgressBarId);"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            progressBar.Delete();"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void RecreateProgressBar()"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            int progressBarColor \u003d TimerBodyColor();"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AddProgressBar(Duration(), timerBody.Width, timerBody.Height, progressBarColor, SlideWidth());"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdateMarkerPosition()"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "            UpdateMarkerPositionX();"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "            UpdateMarkerPositionY();"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdateMarkerPositionX()"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "            if (lineMarkerGroup !\u003d null)"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "                float widthPerSec \u003d timerBody.Width / Duration();"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "                float lineSpacing \u003d TimerLabConstants.DefaultDenomination * widthPerSec;"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "                int numOfLineMarkers \u003d (int)(Math.Ceiling((double)Duration() / TimerLabConstants.DefaultDenomination)) - 2;"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "                lineMarkerGroup.Left \u003d timerBody.Left + lineSpacing;"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "                lineMarkerGroup.Width \u003d numOfLineMarkers * lineSpacing;"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                // Countdown timers have inconsistent starting points, espeically when duration of the timer is not a multiple of the denomination (10 sec)"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                // So we need to take this into account by calculating the required space and resetting the lineMarkerGroup"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                // This is unlike the default timer where the starting offset is always the same (1 lineSpacing from left)"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                if (Countdown())"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    float requiredSpaceFromLeft \u003d timerBody.Width - lineSpacing - lineMarkerGroup.Width;"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    lineMarkerGroup.Left \u003d timerBody.Left + requiredSpaceFromLeft;"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "            timeMarkerGroup.Left \u003d timerBody.Left;"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "            timeMarkerGroup.Width \u003d timerBody.Width;"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdateMarkerPositionY()"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "            if (lineMarkerGroup !\u003d null)"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "                lineMarkerGroup.Top \u003d timerBody.Top;"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "                lineMarkerGroup.Height \u003d timerBody.Height;"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "            timeMarkerGroup.Top \u003d timerBody.Top + timerBody.Height;"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdateSliderPosition()"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "            UpdateSliderPositionX();"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "            UpdateSliderPositionY();"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdateSliderPositionX()"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "            sliderHead.Left \u003d timerBody.Left - (TimerLabConstants.DefaultSliderHeadSize / 2);"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "            sliderBody.Left \u003d timerBody.Left - (TimerLabConstants.DefaultSliderBodyWidth / 2);"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "            UpdateSliderAnimationPath();"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdateSliderPositionY()"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "            sliderHead.Top \u003d timerBody.Top - (TimerLabConstants.DefaultSliderHeadSize / 2);"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "            sliderBody.Top \u003d timerBody.Top;"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "            sliderBody.Height \u003d timerBody.Height;"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void UpdateProgressBarPosition()"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            UpdateProgressBarPositionX();"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            UpdateProgressBarPositionY();"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void UpdateProgressBarPositionX()"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            progressBar.Left \u003d timerBody.Left;"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void UpdateProgressBarPositionY()"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            progressBar.Top \u003d timerBody.Top;"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdateSliderAnimationDuration()"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.Effect effect in this.GetCurrentSlide().TimeLine.MainSequence)"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "                if (effect.EffectType \u003d\u003d PowerPoint.MsoAnimEffect.msoAnimEffectPathRight)"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (effect.Shape.Tags[TimerLabConstants.ShapeId].Equals(TimerLabConstants.TimerSliderBodyId) ||"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "                        effect.Shape.Tags[TimerLabConstants.ShapeId].Equals(TimerLabConstants.TimerSliderHeadId))"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "                        effect.Timing.Duration \u003d Duration();"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void UpdateProgressBarAnimationDuration()"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            foreach (PowerPoint.Effect effect in this.GetCurrentSlide().TimeLine.MainSequence)"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                if (effect.EffectType \u003d\u003d PowerPoint.MsoAnimEffect.msoAnimEffectGrowShrink)"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    if (effect.Shape.Tags[TimerLabConstants.ShapeId].Equals(TimerLabConstants.ProgressBarId))"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                        effect.Timing.Duration \u003d Duration();"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "        private void UpdateSliderAnimationPath()"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.Effect effect in this.GetCurrentSlide().TimeLine.MainSequence)"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "                if (effect.EffectType \u003d\u003d PowerPoint.MsoAnimEffect.msoAnimEffectPathRight)"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (effect.Shape.Tags[TimerLabConstants.ShapeId].Equals(TimerLabConstants.TimerSliderBodyId) ||"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "                        effect.Shape.Tags[TimerLabConstants.ShapeId].Equals(TimerLabConstants.TimerSliderHeadId))"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "                        float end \u003d timerBody.Width / SlideWidth();"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "                        effect.Behaviors[1].MotionEffect.Path \u003d \"M 0 0 L \" + end + \" 0 E\";"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AdjustZOrder()"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "            //Adjust z-order"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (isProgressBar)"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                progressBar.ZOrder(Microsoft.Office.Core.MsoZOrderCmd.msoBringToFront);"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                timeMarkerGroup.ZOrder(Microsoft.Office.Core.MsoZOrderCmd.msoBringToFront);"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                if (lineMarkerGroup !\u003d null)"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    lineMarkerGroup.ZOrder(Microsoft.Office.Core.MsoZOrderCmd.msoBringToFront);"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            else"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "                if (lineMarkerGroup !\u003d null)"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "                    lineMarkerGroup.ZOrder(Microsoft.Office.Core.MsoZOrderCmd.msoBringToFront);"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "                timeMarkerGroup.ZOrder(Microsoft.Office.Core.MsoZOrderCmd.msoBringToFront);"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "                sliderHead.ZOrder(Microsoft.Office.Core.MsoZOrderCmd.msoBringToFront);"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "                sliderBody.ZOrder(Microsoft.Office.Core.MsoZOrderCmd.msoBringToFront);"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Shape Helper"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "        private float NewPosition(float originalPosition, float objectSize)"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "            return originalPosition - objectSize / 2;"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "        private Shape GetLineMarkerGroup()"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape result \u003d GetShapeByName(TimerLabConstants.TimerLineMarkerGroupId);"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "            if (result \u003d\u003d null)"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "                result \u003d GetShapeByName(TimerLabConstants.TimerLineMarkerId);"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "        private Shape GetShapeByName(string name)"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "            return GetShapeByName(name, this.GetCurrentSlide().Shapes);"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Shape GetShapeByName(string name, dynamic shapes)"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape shape in shapes)"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shape.Tags[TimerLabConstants.ShapeId].Equals(name))"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "                    return shape;"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "        private Shape GroupShapes(string shapeName, string groupName)"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "            bool firstInGroup \u003d true;"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape shape in this.GetCurrentSlide().Shapes)"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shape.Tags[TimerLabConstants.ShapeId].Equals(shapeName))"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (firstInGroup)"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "                        shape.Select();"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "                        firstInGroup \u003d false;"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "                    else"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "                        shape.Select(Microsoft.Office.Core.MsoTriState.msoFalse);"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape group \u003d this.GetCurrentSelection().ShapeRange.Group();"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "            group.Name \u003d groupName;"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "            group.Tags.Add(TimerLabConstants.ShapeId, groupName);"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "            return group;"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Validation Helper"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool FindTimer()"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "            timerBody \u003d GetShapeByName(TimerLabConstants.TimerBodyId);"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "            lineMarkerGroup \u003d GetLineMarkerGroup();"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "            timeMarkerGroup \u003d GetShapeByName(TimerLabConstants.TimerTimeMarkerGroupId);"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "            sliderHead \u003d GetShapeByName(TimerLabConstants.TimerSliderHeadId);"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "            sliderBody \u003d GetShapeByName(TimerLabConstants.TimerSliderBodyId);"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            progressBar \u003d GetShapeByName(TimerLabConstants.ProgressBarId);"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if ((timerBody \u003d\u003d null) \u0026\u0026 (progressBar \u003d\u003d null) \u0026\u0026 (lineMarkerGroup \u003d\u003d null) \u0026\u0026 "
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "                (timeMarkerGroup \u003d\u003d null) \u0026\u0026 (sliderHead \u003d\u003d null) \u0026\u0026 (sliderBody \u003d\u003d null))"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "        private bool IsNumbersOnly(string text)"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "            Regex regex \u003d new Regex(\"[0-9]+\");"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "            return regex.IsMatch(text);"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Slide Dimensions"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "        private float SlideWidth()"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.GetCurrentPresentation().SlideWidth;"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "        private float SlideHeight()"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.GetCurrentPresentation().SlideHeight;"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Error Handling"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "        private void ShowErrorMessageBox(string content)"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "            MessageBox.Show(content, TextCollection.CommonText.ErrorTitle);"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 292,
      "blewjy": 124,
      "-": 801
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/TooltipsLab/ConvertToTooltip.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System.Collections.Generic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using System.Windows.Forms;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.TooltipsLab"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    /// Assigns tooltip to shapes, follows the convention that the first shape is the trigger shape, the rest"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    /// of the shapes will be the callouts. All callout shapes will appear on first click of the trigger shape,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    /// and all will disappear on second click of the trigger shape."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    internal static class ConvertToTooltip"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static bool AddTriggerAnimation(PowerPointSlide currentSlide, ShapeRange selectedShapes)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            if (selectedShapes.Count \u003c 2)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                MessageBox.Show(TooltipsLabText.ErrorLessThanTwoShapesSelected,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    TooltipsLabText.ErrorTooltipsDialogTitle);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Shape triggerShape \u003d selectedShapes[1];"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            List\u003cShape\u003e shapesToAnimate \u003d GetShapesToAnimate(selectedShapes);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AddTriggerAnimation(currentSlide, triggerShape, shapesToAnimate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public static void AddTriggerAnimation(PowerPointSlide currentSlide, Shape triggerShape, Shape calloutShape)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            List\u003cShape\u003e calloutShapeList \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            calloutShapeList.Add(calloutShape);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AddTriggerAnimation(currentSlide, triggerShape, calloutShapeList);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private static void AddTriggerAnimation(PowerPointSlide currentSlide, Shape triggerShape, List\u003cShape\u003e newShapesToAnimate)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            TimeLine timeline \u003d currentSlide.TimeLine;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // Get the shapes that are already associated with trigger shape"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            List\u003cShape\u003e shapesToAnimate \u003d GetShapesInInteractiveSequenceWithAnimationsRemoved(currentSlide, triggerShape, newShapesToAnimate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Sequence sequence \u003d timeline.InteractiveSequences.Add();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            AddTriggerEffect(triggerShape, shapesToAnimate, TooltipsLabSettings.AnimationType, sequence);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private static void AddTriggerEffect(Shape triggerShape, List\u003cShape\u003e shapesToAnimate, MsoAnimEffect effect, Sequence sequence)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // Add Entrance Effect"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            for (int i \u003d 0; i \u003c shapesToAnimate.Count; i++)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                Shape animationShape \u003d shapesToAnimate[i];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                MsoAnimTriggerType triggerType;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                // The first shape will be triggered by the click to appear"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                if (i \u003d\u003d 0)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    triggerType \u003d MsoAnimTriggerType.msoAnimTriggerOnShapeClick;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    sequence.AddTriggerEffect(animationShape, effect, triggerType, triggerShape);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                // Rest of the shapes will appear with the first shape"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                else"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    triggerType \u003d MsoAnimTriggerType.msoAnimTriggerWithPrevious;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    sequence.AddEffect(shapesToAnimate[i], effect,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                        MsoAnimateByLevel.msoAnimateLevelNone, MsoAnimTriggerType.msoAnimTriggerWithPrevious);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // Add Exit Effect to Shapes"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            for (int i \u003d 0; i \u003c shapesToAnimate.Count; i++)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                Shape animationShape \u003d shapesToAnimate[i];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                MsoAnimTriggerType triggerType;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                Effect effectInSequence;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                // The first shape will be triggered by the click to disappear"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                if (i \u003d\u003d 0)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    triggerType \u003d MsoAnimTriggerType.msoAnimTriggerOnShapeClick;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    effectInSequence \u003d sequence.AddTriggerEffect(animationShape, effect, triggerType, triggerShape);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                // Rest of the shapes will disappear with the first shape"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                else"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    triggerType \u003d MsoAnimTriggerType.msoAnimTriggerWithPrevious;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    effectInSequence \u003d sequence.AddEffect(shapesToAnimate[i], effect, "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                        MsoAnimateByLevel.msoAnimateLevelNone, MsoAnimTriggerType.msoAnimTriggerWithPrevious);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                effectInSequence.Exit \u003d Microsoft.Office.Core.MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private static List\u003cShape\u003e GetShapesInInteractiveSequenceWithAnimationsRemoved(PowerPointSlide currentSlide, Shape triggerShape, List\u003cShape\u003e shapesToAnimate)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Sequences sequences \u003d currentSlide.TimeLine.InteractiveSequences;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // A set is used here so no duplicate shapes will be added"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ISet\u003cShape\u003e shapesToAnimateSet \u003d new HashSet\u003cShape\u003e(shapesToAnimate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // Find the existing sequence that has the triggerShape"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d sequences.Count; i++)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                Sequence sequence \u003d sequences[i];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                // Iterate from the back because of deletion"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                for (int j \u003d sequence.Count; j \u003e\u003d 1; j--)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    Effect effect \u003d sequence[j];"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    // A sequence is attached to a trigger shape. However we can only use the effect to find out"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    // what is the trigger shape, thus we break when the first effect\u0027s trigger shape is not "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    // what we are looking for and delete all effects from the sequence otherwise."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    if (effect.Timing.TriggerShape \u003d\u003d triggerShape)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                        shapesToAnimateSet.Add(effect.Shape);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                        effect.Delete();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    else"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return new List\u003cShape\u003e(shapesToAnimateSet);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private static List\u003cShape\u003e GetShapesToAnimate(ShapeRange selectedShapes)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            List\u003cShape\u003e animatedShapes \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            for (int i \u003d 2; i \u003c\u003d selectedShapes.Count; i++)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                animatedShapes.Add(selectedShapes[i]);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return animatedShapes;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 139,
      "YuPeiHenry": 2,
      "-": 3
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/TooltipsLab/CreateTooltip.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "using PowerPoint \u003d Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.TooltipsLab"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    internal static class CreateTooltip"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        // Generate a trigger shape directly in the center bottom position of the specified callout shape."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public static PowerPoint.Shape GenerateTriggerShapeWithReferenceCallout(PowerPointSlide currentSlide, PowerPoint.Shape callout)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            float left \u003d ShapeUtil.GetCenterPoint(callout).X - TooltipsLabConstants.TriggerShapeDefaultWidth / 2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            float top \u003d ShapeUtil.GetBottom(callout) + TooltipsLabConstants.TriggerShapeAndCalloutSpacing;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PowerPoint.Shape triggerShape \u003d currentSlide.Shapes.AddShape("
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                TooltipsLabConstants.TriggerShape, "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                left, "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                top, "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                TooltipsLabConstants.TriggerShapeDefaultWidth, "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                TooltipsLabConstants.TriggerShapeDefaultHeight);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ShapeUtil.FormatTriggerShapeToDefaultStyle(triggerShape);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return triggerShape;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public static PowerPoint.Shape GenerateCalloutWithReferenceTriggerShape(PowerPointSlide currentSlide, PowerPoint.Shape triggerShape)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            float midpointX \u003d ShapeUtil.GetMidpointX(triggerShape);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PowerPoint.Shape callout \u003d currentSlide.Shapes.AddShape("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                TooltipsLabSettings.ShapeType,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                midpointX - TooltipsLabConstants.CalloutShapeDefaultWidth/2 + (float)(TooltipsLabConstants.CalloutArrowheadHorizontalAdjustment * TooltipsLabConstants.CalloutShapeDefaultWidth),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                triggerShape.Top - (float)(TooltipsLabConstants.CalloutArrowheadVerticalAdjustment * TooltipsLabConstants.CalloutShapeDefaultHeight) - TooltipsLabConstants.TriggerShapeAndCalloutSpacing,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                TooltipsLabConstants.CalloutShapeDefaultWidth,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                TooltipsLabConstants.CalloutShapeDefaultHeight);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ShapeUtil.FormatCalloutToDefaultStyle(callout);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            callout.TextFrame2.AutoSize \u003d MsoAutoSize.msoAutoSizeTextToFitShape;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            callout.TextEffect.Alignment \u003d MsoTextEffectAlignment.msoTextEffectAlignmentCentered;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return callout;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public static PowerPoint.Shape GenerateTriggerShape(PowerPointSlide currentSlide)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PowerPoint.Shape triggerShape \u003d currentSlide.Shapes.AddShape("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                Microsoft.Office.Core.MsoAutoShapeType.msoShapeOval, "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                TooltipsLabConstants.TriggerShapeDefaultLeft, "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                TooltipsLabConstants.TriggerShapeDefaultTop, "
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                TooltipsLabConstants.TriggerShapeDefaultWidth, "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "                TooltipsLabConstants.TriggerShapeDefaultHeight);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ShapeUtil.FormatTriggerShapeToDefaultStyle(triggerShape);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            return triggerShape;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 52,
      "blewjy": 3,
      "YuPeiHenry": 5,
      "-": 2
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/TooltipsLab/TooltipsLabConstants.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "namespace PowerPointLabs.TooltipsLab"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    static class TooltipsLabConstants"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static readonly Size DisplayImageSize \u003d new Size(30, 30);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public const MsoAutoShapeType TriggerShape \u003d MsoAutoShapeType.msoShapeOval;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public const string ShapeNameHeader \u003d \"msoShape\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public const string AnimationNameHeader \u003d \"msoAnimEffect\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public const string CalloutNameSubstring \u003d \"Callout\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static readonly MsoAnimEffect[] AnimationEffects \u003d new MsoAnimEffect[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MsoAnimEffect.msoAnimEffectAppear,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MsoAnimEffect.msoAnimEffectBounce,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MsoAnimEffect.msoAnimEffectFade,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MsoAnimEffect.msoAnimEffectFloat,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MsoAnimEffect.msoAnimEffectFly,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MsoAnimEffect.msoAnimEffectGrowAndTurn,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MsoAnimEffect.msoAnimEffectRandomBars,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MsoAnimEffect.msoAnimEffectPlus,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MsoAnimEffect.msoAnimEffectSplit,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MsoAnimEffect.msoAnimEffectSwivel,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MsoAnimEffect.msoAnimEffectWheel,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MsoAnimEffect.msoAnimEffectWipe,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MsoAnimEffect.msoAnimEffectZoom"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static readonly Bitmap[] AnimationImages \u003d new Bitmap[]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Properties.Resources.Animation_Appear,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Properties.Resources.Animation_Bounce,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Properties.Resources.Animation_Fade,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Properties.Resources.Animation_Float_In,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Properties.Resources.Animation_Fly_In,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Properties.Resources.Animation_Grow___Turn,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Properties.Resources.Animation_Random_Bars,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Properties.Resources.Animation_Shape,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Properties.Resources.Animation_Split,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Properties.Resources.Animation_Swivel,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Properties.Resources.Animation_Wheel,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Properties.Resources.Animation_Wipe,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Properties.Resources.Animation_Zoom"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        };"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const float TriggerShapeDefaultLeft \u003d 200;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const float TriggerShapeDefaultTop \u003d 200;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const float TriggerShapeDefaultHeight \u003d 25;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const float TriggerShapeDefaultWidth \u003d 25;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const float TriggerShapeAndCalloutSpacing \u003d 10;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const float CalloutShapeDefaultHeight \u003d 100;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const float CalloutShapeDefaultWidth \u003d 150;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        // Explanation for the choice of constants:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        // - 0.20833 is the horizontal percentage adjustment of the arrowhead of the callout."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        //   We position the callout with middle alignment to the trigger shape, then shift it"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        //   back to the right by 20.833% of the callout\u0027s width to align the arrowhead with the trigger shape."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        // - 1.125 is the vertical percentage adjustment of the arrowhead of the callout."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        //   Same explanation as the horizontal adjustment, just that this is for the height."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const double CalloutArrowheadHorizontalAdjustment \u003d 0.20833;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const double CalloutArrowheadVerticalAdjustment \u003d 1.125;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        public const string AnimationPaneName \u003d \"AnimationCustom\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 27,
      "YuPeiHenry": 44
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/TooltipsLab/TooltipsLabSettings.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.TooltipsLab.Views;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using MsoAutoShapeType \u003d Microsoft.Office.Core.MsoAutoShapeType;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.TooltipsLab"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    internal static class TooltipsLabSettings"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static MsoAutoShapeType ShapeType \u003d MsoAutoShapeType.msoShapeRoundedRectangularCallout;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static MsoAnimEffect AnimationType \u003d MsoAnimEffect.msoAnimEffectFade;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static void ShowSettingsDialog()"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            TooltipsLabSettingsDialogBox dialog \u003d new TooltipsLabSettingsDialogBox(ShapeType, AnimationType);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            dialog.DialogConfirmedHandler +\u003d OnSettingsDialogConfirmed;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            dialog.ShowDialog();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private static void OnSettingsDialogConfirmed(MsoAutoShapeType newShapeType, MsoAnimEffect newAnimationType)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ShapeType \u003d newShapeType;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            AnimationType \u003d newAnimationType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 26,
      "-": 1
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/TooltipsLab/Views/TooltipsLabSettingsAnimationEntry.xaml.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Text;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows.Controls;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.TooltipsLab.Views"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /// Interaction logic for TooltipsLabSettingsAnimationEntry.xaml"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public partial class TooltipsLabSettingsAnimationEntry : UserControl"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private MsoAnimEffect selectedEffectType;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Constructors"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public TooltipsLabSettingsAnimationEntry(MsoAnimEffect defaultEffectType, Bitmap image)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            InitializeComponent();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Type \u003d defaultEffectType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            imageBox.Source \u003d CommonUtil.CreateBitmapSource(image);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Properties"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public MsoAnimEffect Type"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return selectedEffectType;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            set"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                selectedEffectType \u003d value;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                string nameForDisplay \u003d RawNameToDisplayName(value.ToString());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                textBlock.Text \u003d nameForDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ToolTip \u003d nameForDisplay;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Helper functions"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void RemoveImage()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            imageBox.IsEnabled \u003d false;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            imageBox.Height \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Height \u003d 20;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            textBlock.Margin \u003d new Thickness(0, 5, 0, 5);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private string RawNameToDisplayName(string name)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string trimmed \u003d name.Replace(TooltipsLabConstants.AnimationNameHeader, \"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (string.IsNullOrWhiteSpace(trimmed))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return string.Empty;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            StringBuilder newText \u003d new StringBuilder(trimmed.Length * 2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            newText.Append(trimmed[0]);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            for (int i \u003d 1; i \u003c trimmed.Length; i++)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (char.IsUpper(trimmed[i]))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    newText.Append(\u0027 \u0027);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                newText.Append(trimmed[i]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return newText.ToString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 79,
      "-": 5
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/TooltipsLab/Views/TooltipsLabSettingsDialogBox.xaml.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.SyncLab;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Shapes \u003d Microsoft.Office.Interop.PowerPoint.Shapes;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.TooltipsLab.Views"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /// Interaction logic for TooltipsLabSettingsDialogBox.xaml"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public partial class TooltipsLabSettingsDialogBox"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public delegate void DialogConfirmedDelegate(MsoAutoShapeType newShapeType, MsoAnimEffect newAnimationType);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public DialogConfirmedDelegate DialogConfirmedHandler { get; set; }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private MsoAutoShapeType lastSelectedShapeType;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private MsoAnimEffect lastSelectedAnimType;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public TooltipsLabSettingsDialogBox(MsoAutoShapeType selectedShapeType, MsoAnimEffect selectedAnimType)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            lastSelectedShapeType \u003d selectedShapeType;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            lastSelectedAnimType \u003d selectedAnimType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            InitializeComponent();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Initialize();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void Initialize()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Array shapeTypes \u003d Enum.GetValues(typeof(MsoAutoShapeType));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Bitmap[] shapeBitmaps \u003d ShapeTypesToBitmaps(shapeTypes, TooltipsLabConstants.CalloutNameSubstring);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            for (int i \u003d 0; i \u003c shapeTypes.Length; i++)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (shapeBitmaps[i] \u003d\u003d null)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                TooltipsLabSettingsShapeEntry newEntry \u003d new TooltipsLabSettingsShapeEntry("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    (MsoAutoShapeType)shapeTypes.GetValue(i), shapeBitmaps[i]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                shapeList.Items.Add(newEntry);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (newEntry.Type \u003d\u003d lastSelectedShapeType)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    shapeList.SelectedItem \u003d newEntry;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    shapeList.ScrollIntoView(newEntry);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            for (int i \u003d 0; i \u003c TooltipsLabConstants.AnimationEffects.Length; i++)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                TooltipsLabSettingsAnimationEntry newEntry \u003d new TooltipsLabSettingsAnimationEntry("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    TooltipsLabConstants.AnimationEffects[i],"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    TooltipsLabConstants.AnimationImages[i]);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                animationList.Items.Add(newEntry);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (newEntry.Type \u003d\u003d lastSelectedAnimType)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    animationList.SelectedItem \u003d newEntry;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    animationList.ScrollIntoView(newEntry);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private Bitmap[] ShapeTypesToBitmaps(Array types, string shapeType)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Shapes shapes \u003d SyncFormatUtil.GetTemplateShapes();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Bitmap[] bitmaps \u003d new Bitmap[types.Length];"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            for (int i \u003d 0; i \u003c types.Length; i++)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (!((MsoAutoShapeType)types.GetValue(i)).ToString().Contains(shapeType))"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                try"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    Shape shape \u003d shapes.AddShape("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        (MsoAutoShapeType)types.GetValue(i), 0, 0,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        TooltipsLabConstants.DisplayImageSize.Width,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        TooltipsLabConstants.DisplayImageSize.Height);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    ShapeUtil.FormatCalloutToDefaultStyle(shape);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    bitmaps[i] \u003d new Bitmap(GraphicsUtil.ShapeToBitmap(shape));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    shape.Delete();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                catch"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return bitmaps;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region EventHandlers"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void OkButton_Click(object sender, RoutedEventArgs e)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            TooltipsLabSettingsShapeEntry shapeItem \u003d shapeList.SelectedItem as TooltipsLabSettingsShapeEntry;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            TooltipsLabSettingsAnimationEntry animationItem \u003d"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                animationList.SelectedItem as TooltipsLabSettingsAnimationEntry;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (shapeItem !\u003d null \u0026\u0026 animationItem !\u003d null)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                DialogConfirmedHandler(shapeItem.Type, animationItem.Type);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Close();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 112,
      "-": 2
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/TooltipsLab/Views/TooltipsLabSettingsShapeEntry.xaml.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System.Drawing;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows.Controls;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace PowerPointLabs.TooltipsLab.Views"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /// \u003csummary\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /// Interaction logic for TooltipsLabSettingsShapeEntry.xaml"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public partial class TooltipsLabSettingsShapeEntry : UserControl"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private MsoAutoShapeType type;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Constructors"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public TooltipsLabSettingsShapeEntry(MsoAutoShapeType type, Bitmap image)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            InitializeComponent();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Type \u003d type;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            imageBox.Source \u003d CommonUtil.CreateBitmapSource(image);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #region Properties"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public MsoAutoShapeType Type"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            get"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                return type;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            set"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                type \u003d value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                string nameForDisplay \u003d value.ToString().Replace("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    TooltipsLabConstants.ShapeNameHeader, \"\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                textBlock.Text \u003d nameForDisplay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                ToolTip \u003d nameForDisplay;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 43,
      "-": 5
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/Utils/FileDir.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.IO;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Linq;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.Utils"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class FileDir"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string FolderThumbnailFile \u003d \"Thumbs.db\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        # region Folder Operations"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool CopyFolder(string oldPath, string newPath)"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            bool copySuccess \u003d true;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            // create subfolder during recursions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!Directory.Exists(newPath))"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                Directory.CreateDirectory(newPath);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            // copy files in a folder first"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            string[] files \u003d Directory.GetFiles(oldPath);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (string file in files)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                string name \u003d Path.GetFileName(file);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                // ignore thumb.db"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                if (name \u003d\u003d null ||"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                    name \u003d\u003d FolderThumbnailFile)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                string dest \u003d Path.Combine(newPath, name);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                try"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    FileAttributes fileAttribute \u003d File.GetAttributes(file);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                    "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    try"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                        File.SetAttributes(file, FileAttributes.Normal);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    catch (Exception)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    "
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    CopyFile(file, dest, fileAttribute);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                catch (Exception)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                    copySuccess \u003d false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            // then recursively copy contents in subfolders"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            string[] folders \u003d Directory.GetDirectories(oldPath);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (string folder in folders)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                string name \u003d Path.GetFileName(folder);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                if (name \u003d\u003d null)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                string dest \u003d Path.Combine(newPath, name);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                copySuccess \u003d copySuccess \u0026\u0026 CopyFolder(folder, dest);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return copySuccess;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool DeleteFolder(string path)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            bool deleteSuccess \u003d true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            // copy files in a folder first"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            string[] files \u003d Directory.GetFiles(path);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (string file in files)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                string name \u003d Path.GetFileName(file);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                if (name \u003d\u003d null)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                try"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    DeleteFile(file);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                catch (Exception)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                    deleteSuccess \u003d false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            string[] folders \u003d Directory.GetDirectories(path);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (string folder in folders)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                string name \u003d Path.GetFileName(folder);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                if (name \u003d\u003d null)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                deleteSuccess \u003d deleteSuccess \u0026\u0026 DeleteFolder(folder);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            if (deleteSuccess)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                try"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                    Directory.Delete(path);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                catch (Exception)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                    deleteSuccess \u003d false;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return deleteSuccess;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsDirectoryEmpty(string path)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return !Directory.EnumerateFileSystemEntries(path).Any();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool MoveFolder(string oldPath, string newPath)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            return CopyFolder(oldPath, newPath) \u0026\u0026 DeleteFolder(oldPath);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public static string GetTemporaryPngFilePath()"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            string tempDirectory \u003d Path.GetTempPath();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Directory.CreateDirectory(tempDirectory);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            string randomFileName \u003d \"pptlabs_\" + Path.GetRandomFileName();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            string randomFilePath \u003d Path.Combine(tempDirectory, randomFileName);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return Path.ChangeExtension(randomFilePath, \"png\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /// This function sets attribute of all files in a folder and its sub-folder "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /// to normal."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"path\"\u003eThe folder\u0027s location.\u003c/param\u003e"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void NormalizeFolder(string path)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            // copy files in a folder first"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            string[] files \u003d Directory.GetFiles(path);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (string file in files)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                File.SetAttributes(file, FileAttributes.Normal);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            // then recursively copy contents in subfolders"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            string[] folders \u003d Directory.GetDirectories(path);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (string folder in folders)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                NormalizeFolder(folder);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        # endregion"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        # region File Operations"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /// This function is an integration of copy-without-attribute and copy-with-attribute."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        /// If fileAttribute is not set explicitly, the file is copying without attribute, else"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /// the specified attribute will be set after the file has been copied."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"sourcePath\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"destPath\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"fileAttribute\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void CopyFile(string sourcePath, string destPath,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                                        FileAttributes fileAttribute \u003d FileAttributes.Normal)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!File.Exists(sourcePath))"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            File.Copy(sourcePath, destPath);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            File.SetAttributes(destPath, fileAttribute);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void DeleteFile(string filePath)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!File.Exists(filePath))"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            File.SetAttributes(filePath, FileAttributes.Normal);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            File.Delete(filePath);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        # endregion"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 10,
      "-": 200
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/Utils/GraphicsUtil.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Diagnostics.CodeAnalysis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing.Drawing2D;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing.Imaging;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using System.IO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Forms;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Media;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Windows.Media.Imaging;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "using PPExtraEventHelper;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "using Drawing \u003d System.Drawing;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "using ShapeRange \u003d Microsoft.Office.Interop.PowerPoint.ShapeRange;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.Utils"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    [SuppressMessage(\"Microsoft.StyleCop.CSharp.OrderingRules\", \"SA1202:ElementsMustBeOrderedByAccess\", Justification \u003d \"To refactor to partials\")]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    internal static class GraphicsUtil"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "#pragma warning disable 0618"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Constants"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        private static readonly Object FileLock \u003d new object();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public static float PictureExportingRatio \u003d 330.0f / 72.0f;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const float targetDpi \u003d 96.0f;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        private static float dpiScale \u003d 1.0f;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        // Picture exporting ratios"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const float pictureExportingRatioHigh \u003d 330.0f / 72.0f;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const float pictureExportingRatioCompressed \u003d 96.0f / 72.0f;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // Heuristics for image compression obtained through testing"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private const long targetCompression \u003d 75L;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        private const long fileSizeLimit \u003d 40000L;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // Static initializer to retrieve dpi scale once"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        static GraphicsUtil()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            using (Graphics g \u003d Graphics.FromHwnd(IntPtr.Zero))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                dpiScale \u003d g.DpiX / targetDpi;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        #region API"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Shape"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void ExportShape(Shape shape, string exportPath)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            int slideWidth \u003d 0;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            int slideHeight \u003d 0;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                slideWidth \u003d (int)PowerPointPresentation.Current.SlideWidth;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                slideHeight \u003d (int)PowerPointPresentation.Current.SlideHeight;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (NullReferenceException)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                // Getting Presentation.Current may throw NullReferenceException during unit testing"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.Export(exportPath, PpShapeFormat.ppShapeFormatPNG, ExportMode: PpExportMode.ppScaleToFit);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Export(exportPath, PpShapeFormat.ppShapeFormatPNG, slideWidth,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                         slideHeight, PpExportMode.ppScaleToFit);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void ExportShape(ShapeRange shapeRange, string exportPath)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            int slideWidth \u003d (int)PowerPointPresentation.Current.SlideWidth;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            int slideHeight \u003d (int)PowerPointPresentation.Current.SlideHeight;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeRange.Export(exportPath, PpShapeFormat.ppShapeFormatPNG, slideWidth,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                              slideHeight, PpExportMode.ppScaleToFit);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Bitmap ShapeToBitmap(Shape shape)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            // we need a lock here to prevent race conditions on the temporary file"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            lock (FileLock)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                string fileName \u003d CommonText.TemporaryImageStorageFileName;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                string tempPicPath \u003d Path.Combine(Path.GetTempPath(), fileName);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                ExportShape(shape, tempPicPath);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                Image image \u003d Image.FromFile(tempPicPath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                Bitmap bitmap \u003d new Bitmap(image);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                // free up the original file to be deleted"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                image.Dispose();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                FileInfo file \u003d new FileInfo(Path.GetTempPath() + fileName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                if (file.Exists)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                    file.Delete();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                return bitmap;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Shape CompressImageInShape(Shape targetShape, PowerPointSlide currentSlide)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            // Specify the temp location to be saved. Must be cleared before each new access to that location"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            string fileName \u003d CommonText.TemporaryCompressedImageStorageFileName;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            string tempFileStoragePath \u003d Path.Combine(Path.GetTempPath(), fileName);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            // Export the shape to extract the image within it"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            targetShape.Export(tempFileStoragePath, PpShapeFormat.ppShapeFormatJPG);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            // Check if the image is acceptable in terms of size"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            FileInfo tempFile \u003d new FileInfo(tempFileStoragePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            tempFile.Refresh();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            long fileLength \u003d tempFile.Length;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            if (fileLength \u003c fileSizeLimit)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                // Delete the file as it is not needed anymore"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteSpecificFilePath(tempFileStoragePath);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                // Return the original shape"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                return targetShape;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            // Create a new bitmap from the image representing the exported shape"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            Image img \u003d Image.FromFile(tempFileStoragePath);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap imgBitMap \u003d new Bitmap(img);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            // Releases resources held by image object and delete temp file"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            img.Dispose();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteSpecificFilePath(tempFileStoragePath);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            // Compresses and save the bitmap based on the specified level of compression (0 -\u003e lowest quality, 100 -\u003e highest quality)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            SaveJpg(imgBitMap, tempFileStoragePath, targetCompression);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            // Retrieve the compressed image and return a shape representing the image"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape compressedImgShape \u003d currentSlide.Shapes.AddPicture(tempFileStoragePath,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                    Microsoft.Office.Core.MsoTriState.msoFalse,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                    Microsoft.Office.Core.MsoTriState.msoTrue,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                    targetShape.Left,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                    targetShape.Top);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            // Delete temp file again to return to original empty state"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            DeleteSpecificFilePath(tempFileStoragePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            // Delete targetShape to prevent duplication"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            targetShape.Delete();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return compressedImgShape;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        // Save the file with a specific compression level."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void SaveJpg(Bitmap bm, string fileName, long compression)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            System.Drawing.Imaging.EncoderParameters encoderParams \u003d new System.Drawing.Imaging.EncoderParameters(1);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            encoderParams.Param[0] \u003d new System.Drawing.Imaging.EncoderParameter("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                System.Drawing.Imaging.Encoder.Quality, compression);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            System.Drawing.Imaging.ImageCodecInfo imageCodecInfo \u003d GetEncoderInfo(\"image/jpeg\");"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            File.Delete(fileName);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            bm.Save(fileName, imageCodecInfo, encoderParams);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        private static System.Drawing.Imaging.ImageCodecInfo GetEncoderInfo(string mimeType)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            System.Drawing.Imaging.ImageCodecInfo[] encoders \u003d System.Drawing.Imaging.ImageCodecInfo.GetImageEncoders();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c\u003d encoders.Length; i++)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                if (encoders[i].MimeType \u003d\u003d mimeType)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    return encoders[i];"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void DeleteSpecificFilePath(string filePath)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            FileInfo file \u003d new FileInfo(filePath);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            if (file.Exists)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                file.Delete();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Slide"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public static void ExportSlides(List\u003cSlide\u003e slides, string exportPath, float magnifyRatio \u003d 1.0f)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            if (slides.Count \u003c\u003d 0)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            } "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            else if (slides.Count \u003d\u003d 1)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                ExportSlide(slides[0], exportPath, magnifyRatio);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Get folder name from exportPath"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            string folderName \u003d GetDefaultFolderNameForExport(exportPath);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            try"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                Directory.CreateDirectory(folderName);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                foreach (Slide slide in slides)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    string fileName \u003d folderName + \"\\\\\" + slide.Name + \".png\";"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    ExportSlide(slide, fileName, magnifyRatio);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                // Alert the user that the slides have been saved in a folder"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                string messageBoxText \u003d \"The selected slides have been saved as a separate file in the folder \" + folderName + \".\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                MessageBox.Show(messageBoxText);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            catch (Exception)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                // Failed to create directory, we save the images all to the specified path"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                foreach (Slide slide in slides)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    string fileName \u003d folderName + \"_\" + slide.Name + \".png\";"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    ExportSlide(slide, fileName, magnifyRatio);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                // Alert the user that the slides have been saved as a separate file in the specified folder."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                string messageBoxText \u003d \"The selected slides have been saved as a separate file in the specified folder.\";"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                MessageBox.Show(messageBoxText);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void ExportSlide(Slide slide, string exportPath, float magnifyRatio \u003d 1.0f)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            slide.Export(exportPath,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                         \"PNG\","
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                         (int)(GetDesiredExportWidth() * magnifyRatio),"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                         (int)(GetDesiredExportHeight() * magnifyRatio));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void ExportSlide(PowerPointSlide slide, string exportPath, float magnifyRatio \u003d 1.0f)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            ExportSlide(slide.GetNativeSlide(), exportPath, magnifyRatio);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Bitmap"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Bitmap CreateThumbnailImage(Image oriImage, int width, int height)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            double scalingRatio \u003d CalculateScalingRatio(oriImage.Size, new Size(width, height));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            // calculate width and height after scaling"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            int scaledWidth \u003d (int)Math.Round(oriImage.Size.Width * scalingRatio);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "            int scaledHeight \u003d (int)Math.Round(oriImage.Size.Height * scalingRatio);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            // calculate left top corner position of the image in the thumbnail"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            int scaledLeft \u003d (width - scaledWidth) / 2;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            int scaledTop \u003d (height - scaledHeight) / 2;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            // define drawing area"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "            Rectangle drawingRect \u003d new Rectangle(scaledLeft, scaledTop, scaledWidth, scaledHeight);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            Bitmap thumbnail \u003d new Bitmap(width, height);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            // here we set the thumbnail as the highest quality"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            using (Graphics thumbnailGraphics \u003d System.Drawing.Graphics.FromImage(thumbnail))"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                thumbnailGraphics.CompositingQuality \u003d CompositingQuality.HighQuality;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                thumbnailGraphics.InterpolationMode \u003d InterpolationMode.HighQualityBicubic;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "                thumbnailGraphics.SmoothingMode \u003d SmoothingMode.HighQuality;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                thumbnailGraphics.DrawImage(oriImage, drawingRect);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            return thumbnail;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        #region GDI+"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void SuspendDrawing(Control control)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            Native.SendMessage(control.Handle, (uint) Native.Message.WM_SETREDRAW, IntPtr.Zero, IntPtr.Zero);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void ResumeDrawing(Control control)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            Native.SendMessage(control.Handle, (uint) Native.Message.WM_SETREDRAW, new IntPtr(1), IntPtr.Zero);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            control.Refresh();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Color"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        public static int ConvertColorToRgb(Drawing.Color argb)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            return (argb.B \u003c\u003c 16) | (argb.G \u003c\u003c 8) | argb.R;"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        public static int PackRgbInt(byte r, int g, int b)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            return (b \u003c\u003c 16) | (g \u003c\u003c 8) | r;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Drawing.Color ConvertRgbToColor(int rgb)"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            return Drawing.Color.FromArgb(rgb \u0026 255, (rgb \u003e\u003e 8) \u0026 255, (rgb \u003e\u003e 16) \u0026 255);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void UnpackRgbInt(int rgb, out byte r, out byte g, out byte b)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            r \u003d (byte)(rgb \u0026 255);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            g \u003d (byte)((rgb \u003e\u003e 8) \u0026 255);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            b \u003d (byte)((rgb \u003e\u003e 16) \u0026 255);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Drawing.Color DrawingColorFromMediaColor(System.Windows.Media.Color mediaColor)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            return Drawing.Color.FromArgb(mediaColor.A, mediaColor.R, mediaColor.G, mediaColor.B);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Windows.Media.Color MediaColorFromDrawingColor(Drawing.Color drawingColor)"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            return System.Windows.Media.Color.FromArgb(drawingColor.A, drawingColor.R, drawingColor.G, drawingColor.B);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Drawing.Color DrawingColorFromBrush(System.Windows.Media.Brush brush)"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            return DrawingColorFromMediaColor((brush as SolidColorBrush).Color);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        public static System.Windows.Media.Brush MediaBrushFromDrawingColor(Drawing.Color color)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SolidColorBrush(MediaColorFromDrawingColor(color));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #region Settings"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public static void ShouldCompressPictureExport(bool shouldCompress)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PictureExportingRatio \u003d shouldCompress ? pictureExportingRatioCompressed : pictureExportingRatioHigh;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Helper Methods"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        private static double CalculateScalingRatio(Size oldSize, Size newSize)"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "            double scalingRatio;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "            if (oldSize.Width \u003e\u003d oldSize.Height)"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "                scalingRatio \u003d (double)newSize.Width / oldSize.Width;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "                scalingRatio \u003d (double)newSize.Height / oldSize.Height;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "            return scalingRatio;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        private static double GetDesiredExportWidth()"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Powerpoint displays at 72 dpi, while the picture stores in 96 dpi or 330 dpi, depending on user option."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return PowerPointPresentation.Current.SlideWidth * PictureExportingRatio;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        private static double GetDesiredExportHeight()"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Powerpoint displays at 72 dpi, while the picture stores in 96 dpi or 330 dpi, depending on user option."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return PowerPointPresentation.Current.SlideHeight * PictureExportingRatio;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private static string GetDefaultFolderNameForExport(string exportPath)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            string folderName \u003d exportPath.Substring(0, exportPath.Length - 4);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            int suffix \u003d 1;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            int idx \u003d exportPath.LastIndexOf(\u0027\\\\\u0027);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            string folderPath \u003d exportPath.Substring(0, idx + 1);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            while (Directory.Exists(folderName))"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                // Change to default folder name with suffix"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                string suffixString \u003d suffix.ToString();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                folderName \u003d folderPath + \"PPTLabs_ExportedSlides_\" + suffixString;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                suffix++;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return folderName;"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Converts a Bitmap to Bitmap source"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"bitmap\"\u003eThe bitmap to convert\u003c/param\u003e"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003creturns\u003eThe converted object\u003c/returns\u003e"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        public static BitmapSource CreateBitmapSourceFromGdiBitmap(Bitmap bitmap)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "            Rectangle rect \u003d new System.Drawing.Rectangle(0, 0, bitmap.Width, bitmap.Height);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "            BitmapData bitmapData \u003d bitmap.LockBits("
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "                rect,"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "                ImageLockMode.ReadWrite,"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "                Drawing.Imaging.PixelFormat.Format32bppArgb);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "                int size \u003d (rect.Width * rect.Height) * 4;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "                return BitmapSource.Create("
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "                    bitmap.Width,"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "                    bitmap.Height,"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "                    bitmap.HorizontalResolution,"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "                    bitmap.VerticalResolution,"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "                    PixelFormats.Bgra32,"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "                    null,"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "                    bitmapData.Scan0,"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "                    size,"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "                    bitmapData.Stride);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "            finally"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "                bitmap.UnlockBits(bitmapData);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        public static float GetDpiScale()"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "            return dpiScale;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 83,
      "-": 358
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/Utils/ShapeUtil.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Linq;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Runtime.InteropServices;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Core;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.SyncLab.ObjectFormats;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "using Shape \u003d Microsoft.Office.Interop.PowerPoint.Shape;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "using ShapeRange \u003d Microsoft.Office.Interop.PowerPoint.ShapeRange;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "using Shapes \u003d Microsoft.Office.Interop.PowerPoint.Shapes;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "using TextFrame2 \u003d Microsoft.Office.Interop.PowerPoint.TextFrame2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.Utils"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    internal static class ShapeUtil"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "#pragma warning disable 0618"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Constants"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const float DefaultCalloutFillTransparency \u003d 0.2f;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int DefaultFontSize \u003d 16;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const float DefaultLineWeight \u003d 0.05f;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int MaxShapeNameLength \u003d 255;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        #region API"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Shape Types"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Shape"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This could be an extension method of shape."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsHidden(Shape shape)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            return shape.Visible \u003d\u003d MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsAGroup(Shape shape)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return shape.Type \u003d\u003d MsoShapeType.msoGroup;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsAChild(Shape shape)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape parent \u003d shape.ParentGroup;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (UnauthorizedAccessException)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                // Expected exception thrown if shape does not have a parent"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsStraightLine(Shape shape)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return shape.Type \u003d\u003d MsoShapeType.msoLine ||"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    (shape.Type \u003d\u003d MsoShapeType.msoAutoShape \u0026\u0026"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                     shape.AutoShapeType \u003d\u003d MsoAutoShapeType.msoShapeMixed \u0026\u0026"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                     shape.ConnectorFormat.Type \u003d\u003d MsoConnectorType.msoConnectorStraight);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsShape(Shape shape)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return shape.Type \u003d\u003d MsoShapeType.msoAutoShape"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                || shape.Type \u003d\u003d MsoShapeType.msoFreeform"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                || shape.Type \u003d\u003d MsoShapeType.msoGroup;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsPicture(Shape shape)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            return shape.Type \u003d\u003d MsoShapeType.msoPicture ||"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                   shape.Type \u003d\u003d MsoShapeType.msoLinkedPicture;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsPictureOrShape(Shape shape)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return IsPicture(shape) || IsShape(shape);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsSameType(Shape refShape, Shape candidateShape)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return refShape !\u003d null \u0026\u0026"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                   candidateShape !\u003d null \u0026\u0026"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                   refShape.Type \u003d\u003d candidateShape.Type \u0026\u0026"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                   (refShape.Type !\u003d MsoShapeType.msoAutoShape ||"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                   refShape.AutoShapeType \u003d\u003d candidateShape.AutoShapeType);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool CanAddArrows(Shape shape)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shape.Line.Visible !\u003d MsoTriState.msoTrue)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                MsoArrowheadStyle style \u003d shape.Line.BeginArrowheadStyle;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (ArgumentException)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        #region ShapeRange"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsAllPictureOrShape(ShapeRange shapeRange)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return (from Shape shape in shapeRange select shape).All(IsPictureOrShape);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsAllPicture(ShapeRange shapeRange)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return (from Shape shape in shapeRange select shape).All(IsPicture);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsAllPictureWithReferenceObject(ShapeRange shapeRange)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!IsPictureOrShape(shapeRange[1]))"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 2; i \u003c\u003d shapeRange.Count; i++)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!IsPicture(shapeRange[i]))"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsAllShape(ShapeRange shapeRange)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return (from Shape shape in shapeRange select shape).All(IsShape);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Selection"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsSelectionShape(Selection selection)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return selection !\u003d null \u0026\u0026 selection.Type \u003d\u003d PpSelectionType.ppSelectionShapes \u0026\u0026"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                    selection.ShapeRange.Count \u003e\u003d 1;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsSelectionShapeOrText(Selection selection)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            if ((selection \u003d\u003d null) || (selection.Type !\u003d PpSelectionType.ppSelectionShapes \u0026\u0026"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                selection.Type !\u003d PpSelectionType.ppSelectionText))"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return IsShapeRangeShapeOrText(selection.ShapeRange);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsShapeRangeShapeOrText(ShapeRange selectedShapes)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            if ((selectedShapes \u003d\u003d null))"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape shape in selectedShapes)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shape.Type \u003d\u003d MsoShapeType.msoPlaceholder)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool HasPlaceholderInSelection(Selection selection)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selection \u003d\u003d null || selection.Type !\u003d PpSelectionType.ppSelectionShapes)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape shape in selection.ShapeRange)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shape.Type \u003d\u003d MsoShapeType.msoPlaceholder)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsSelectionSingleShape(Selection selection)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selection \u003d\u003d null || selection.Type !\u003d PpSelectionType.ppSelectionShapes)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selection.HasChildShapeRange)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                return selection.ChildShapeRange.Count \u003d\u003d 1;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            return selection.ShapeRange.Count \u003d\u003d 1;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsSelectionMultipleOrGroup(Selection selection)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selection \u003d\u003d null || selection.Type !\u003d PpSelectionType.ppSelectionShapes)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selection.ShapeRange.Count \u003e 1)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            if (IsAGroup(selection.ShapeRange[1]))"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsSelectionMultipleSameShapeType(Selection selection)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            bool result \u003d false;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selection \u003d\u003d null || selection.Type !\u003d PpSelectionType.ppSelectionShapes)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shape \u003d selection.ShapeRange[1];"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selection.ShapeRange.Count \u003e 1)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                foreach (Shape tempShape in selection.ShapeRange)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (shape.Type \u003d\u003d tempShape.Type)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                        result \u003d true;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (shape.Type \u003d\u003d MsoShapeType.msoAutoShape \u0026\u0026 shape.AutoShapeType !\u003d tempShape.AutoShapeType)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "                        result \u003d false;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsSelectionAllRectangle(Selection selection)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selection \u003d\u003d null || selection.Type !\u003d PpSelectionType.ppSelectionShapes)"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange shapes \u003d selection.ShapeRange;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape shape in shapes)"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                if ((shape.Type !\u003d MsoShapeType.msoAutoShape ||"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "                   shape.AutoShapeType !\u003d MsoAutoShapeType.msoShapeRectangle) \u0026\u0026"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "                   shape.Type !\u003d MsoShapeType.msoPicture)"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsSelectionAllShapeWithArea(Selection selection)"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selection \u003d\u003d null || selection.Type !\u003d PpSelectionType.ppSelectionShapes)"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange shapes \u003d selection.ShapeRange;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape shape in shapes)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shape.Type !\u003d MsoShapeType.msoAutoShape \u0026\u0026 shape.Type !\u003d MsoShapeType.msoFreeform \u0026\u0026"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "                    shape.Type !\u003d MsoShapeType.msoTextBox \u0026\u0026 shape.Type !\u003d MsoShapeType.msoPlaceholder \u0026\u0026"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "                    shape.Type !\u003d MsoShapeType.msoCallout \u0026\u0026 shape.Type !\u003d MsoShapeType.msoInk \u0026\u0026"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "                    shape.Type !\u003d MsoShapeType.msoGroup)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsSelectionChildShapeRange(Selection selection)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "            return selection !\u003d null \u0026\u0026 selection.HasChildShapeRange;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Shape Name"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsShapeNameOverMaximumLength(string shapeName)"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            return shapeName.Length \u003e MaxShapeNameLength;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This could be an extension method of shape."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool HasDefaultName(Shape shape)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape copy \u003d shape.Duplicate()[1];"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            bool hasDefaultName \u003d copy.Name !\u003d shape.Name;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            copy.Delete();"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            return hasDefaultName;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Corruption Handling"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsCorrupted(Shape shape)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "                return shape.Parent \u003d\u003d null;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception)"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        /// To avoid corrupted shape."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Corrupted shape is produced when delete or cut a shape programmatically, but then users undo it."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        /// After that, most of operations on corrupted shapes will throw an exception."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        /// One solution for this is to re-allocate its memory: simply cut/copy and paste before using its property."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"shape\"\u003e Shape to be corrected \u003c/param\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003creturns\u003e The corrected shape \u003c/returns\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Shape CorruptionCorrection(Shape shape, PowerPointSlide ownerSlide)"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape correctedShape \u003d null;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "            // Utilises deprecated PowerPointPresentation class as ShapeUtil does not utilise ActionFramework"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointPresentation pres \u003d PowerPointPresentation.Current;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "            // While doing corruption correction, we don\u0027t want to affect the clipboard"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "            ClipboardUtil.RestoreClipboardAfterAction(() \u003d\u003e"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "                correctedShape \u003d ownerSlide.CopyShapeToSlide(shape);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "                // Success"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "                return correctedShape;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "            }, pres, ownerSlide);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "            if (correctedShape !\u003d null)"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.Delete();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "                return correctedShape;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "                // There were problems with the copying of the shape to the slide (could be a placeholder) thus we just return the original shape"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "                return shape;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        public static ShapeRange CorruptionCorrection(ShapeRange shapes, PowerPointSlide ownerSlide)"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cShape\u003e correctedShapeList \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape shape in shapes)"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape correctedShape \u003d CorruptionCorrection(shape, ownerSlide);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "                correctedShapeList.Add(correctedShape);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "            return ownerSlide.ToShapeRange(correctedShapeList);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Size and Position"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsSamePosition(Shape refShape, Shape candidateShape,"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "                                          bool exactMatch \u003d true, float blurRadius \u003d float.Epsilon)"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            if (exactMatch)"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "                blurRadius \u003d float.Epsilon;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "            return refShape !\u003d null \u0026\u0026"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "                   candidateShape !\u003d null \u0026\u0026"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "                   Math.Abs(refShape.Left - candidateShape.Left) \u003c blurRadius \u0026\u0026"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "                   Math.Abs(refShape.Top - candidateShape.Top) \u003c blurRadius;"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsSameSize(Shape refShape, Shape candidateShape,"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "                                      bool exactMatch \u003d true, float blurRadius \u003d float.Epsilon)"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "            if (exactMatch)"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "                blurRadius \u003d float.Epsilon;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "            return refShape !\u003d null \u0026\u0026"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "                   candidateShape !\u003d null \u0026\u0026"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "                   Math.Abs(refShape.Width - candidateShape.Width) \u003c blurRadius \u0026\u0026"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "                   Math.Abs(refShape.Height - candidateShape.Height) \u003c blurRadius;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This could be an extension method of shape."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        public static float GetMidpointX(Shape shape)"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "            return shape.Left + shape.Width / 2;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This could be an extension method of shape."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void SetMidpointX(Shape shape, float value)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Left \u003d value - shape.Width / 2;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This could be an extension method of shape."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "        public static float GetMidpointY(Shape shape)"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "            return shape.Top + shape.Height / 2;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This could be an extension method of shape."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void SetMidpointY(Shape shape, float value)"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Top \u003d value - shape.Height / 2;"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This could be an extension method of shape."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "        public static float GetRight(Shape shape)"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "            return shape.Left + shape.Width;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This could be an extension method of shape."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void SetRight(Shape shape, float value)"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Left \u003d value - shape.Width;"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This could be an extension method of shape."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "        public static float GetBottom(Shape shape)"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "            return shape.Top + shape.Height;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This could be an extension method of shape."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void SetBottom(Shape shape, float value)"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Top \u003d value - shape.Height;"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        public static float GetScaleWidth(Shape shape)"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "            if (IsShape(shape))"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "                return 1.0f;"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "            MsoTriState isAspectRatioLocked \u003d shape.LockAspectRatio;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.LockAspectRatio \u003d MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "            float oldWidth \u003d shape.Width;"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ScaleWidth(1, MsoTriState.msoCTrue);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "            float scaleFactorWidth \u003d oldWidth / shape.Width;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ScaleWidth(scaleFactorWidth, MsoTriState.msoCTrue);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.LockAspectRatio \u003d isAspectRatioLocked;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "            return scaleFactorWidth;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "        public static float GetScaleHeight(Shape shape)"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "            if (IsShape(shape))"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "                return 1.0f;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "            MsoTriState isAspectRatioLocked \u003d shape.LockAspectRatio;"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.LockAspectRatio \u003d MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "            float oldHeight \u003d shape.Height;"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ScaleHeight(1, MsoTriState.msoCTrue);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "            float scaleFactorHeight \u003d oldHeight / shape.Height;"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.ScaleHeight(scaleFactorHeight, MsoTriState.msoCTrue);"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.LockAspectRatio \u003d isAspectRatioLocked;"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "            return scaleFactorHeight;"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "        public static PointF GetCenterPoint(Shape s)"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "            return new PointF(s.Left + s.Width / 2, s.Top + s.Height / 2);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This could be an extension method of shape."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "        /// anchorFraction \u003d 0 means left side, anchorFraction \u003d 1 means right side."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void SetShapeX(Shape shape, float value, float anchorFraction)"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Left \u003d value - shape.Width * anchorFraction;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "        /// anchorFraction \u003d 0 means top side, anchorFraction \u003d 1 means bottom side."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void SetShapeY(Shape shape, float value, float anchorFraction)"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Top \u003d value - shape.Height * anchorFraction;"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "        #region ZOrder"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Sort by increasing Z-Order."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "        /// (From front to back)."
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void SortByZOrder(List\u003cShape\u003e shapes)"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "            shapes.Sort((sh1, sh2) \u003d\u003e sh2.ZOrderPosition - sh1.ZOrderPosition);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Moves shiftShape until it is at destination zOrder index."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void MoveZTo(Shape shiftShape, int destination)"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "            while (shiftShape.ZOrderPosition \u003c destination)"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "                int currentValue \u003d shiftShape.ZOrderPosition;"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "                shiftShape.ZOrder(MsoZOrderCmd.msoBringForward);"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shiftShape.ZOrderPosition \u003d\u003d currentValue)"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "                    // Break if no change. Guards against infinite loops."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "            while (shiftShape.ZOrderPosition \u003e destination)"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "                int currentValue \u003d shiftShape.ZOrderPosition;"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "                shiftShape.ZOrder(MsoZOrderCmd.msoSendBackward);"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shiftShape.ZOrderPosition \u003d\u003d currentValue)"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "                    // Break if no change. Guards against infinite loops."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Moves shiftShape forward until it is in front of destinationShape."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "        /// (does nothing if already in front)"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void MoveZUntilInFront(Shape shiftShape, Shape destinationShape)"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "            while (shiftShape.ZOrderPosition \u003c destinationShape.ZOrderPosition)"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "                int currentValue \u003d shiftShape.ZOrderPosition;"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "                shiftShape.ZOrder(MsoZOrderCmd.msoBringForward);"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shiftShape.ZOrderPosition \u003d\u003d currentValue)"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "                    // Break if no change. Guards against infinite loops."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Moves shiftShape backward until it is behind destinationShape."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "        /// (does nothing if already behind)"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void MoveZUntilBehind(Shape shiftShape, Shape destinationShape)"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "            while (shiftShape.ZOrderPosition \u003e destinationShape.ZOrderPosition)"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "                int currentValue \u003d shiftShape.ZOrderPosition;"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "                shiftShape.ZOrder(MsoZOrderCmd.msoSendBackward);"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shiftShape.ZOrderPosition \u003d\u003d currentValue)"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "                    // Break if no change. Guards against infinite loops."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void SwapZOrder(Shape originalShape, Shape destinationShape)"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape lowerZOrderShape \u003d originalShape;"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape higherZOrderShape \u003d destinationShape;"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "            if (originalShape.ZOrderPosition \u003e destinationShape.ZOrderPosition)"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "                lowerZOrderShape \u003d destinationShape;"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "                higherZOrderShape \u003d originalShape;"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "            int lowerZOrder \u003d lowerZOrderShape.ZOrderPosition;"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "            int higherZOrder \u003d higherZOrderShape.ZOrderPosition;"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "            // If shape is a group, our target zOrder needs to be offset by the number of items in the group"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "            // This is to account for the zOrder of the items in the group"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "            if (IsAGroup(lowerZOrderShape))"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "                higherZOrder -\u003d lowerZOrderShape.GroupItems.Count;"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "            if (IsAGroup(higherZOrderShape))"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "                higherZOrder +\u003d higherZOrderShape.GroupItems.Count;"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "            MoveZTo(lowerZOrderShape, higherZOrder);"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "            MoveZTo(higherZOrderShape, lowerZOrder);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Moves shiftShape forward/backward until it is just behind destinationShape"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void MoveZToJustBehind(Shape shiftShape, Shape destinationShape)"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "            // Step 1: Shift forward until it overshoots destination."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "            MoveZUntilInFront(shiftShape, destinationShape);"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "            // Step 2: Shift backward until it overshoots destination."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "            MoveZUntilBehind(shiftShape, destinationShape);"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Moves shiftShape forward/backward until it is just in front of destinationShape"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void MoveZToJustInFront(Shape shiftShape, Shape destinationShape)"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "            // Step 1: Shift backward until it overshoots destination."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "            MoveZUntilBehind(shiftShape, destinationShape);"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "            // Step 2: Shift forward until it overshoots destination."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "            MoveZUntilInFront(shiftShape, destinationShape);"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Transformations"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void FitShapeToSlide(ref Shape shapeToMove)"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeToMove.LockAspectRatio \u003d MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeToMove.Left \u003d 0;"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeToMove.Top \u003d 0;"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeToMove.Width \u003d PowerPointPresentation.Current.SlideWidth;"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeToMove.Height \u003d PowerPointPresentation.Current.SlideHeight;"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "        /// anchorX and anchorY are between 0 and 1. They represent the pivot to rotate the shape about."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "        /// The shape rotates by angle difference angle from its current angle. angle is in degrees."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void RotateShapeAboutPivot(Shape shape, float angle, float anchorX, float anchorY)"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "            double pivotX \u003d shape.Left + anchorX * shape.Width;"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "            double pivotY \u003d shape.Top + anchorY * shape.Height;"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "            double midpointX \u003d GetMidpointX(shape);"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "            double midpointY \u003d GetMidpointY(shape);"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "            double dx \u003d midpointX - pivotX;"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "            double dy \u003d midpointY - pivotY;"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "            double radAngle \u003d angle * Math.PI / 180;"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "            double newdx \u003d Math.Cos(radAngle) * dx - Math.Sin(radAngle) * dy;"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "            double newdy \u003d Math.Sin(radAngle) * dx + Math.Cos(radAngle) * dy;"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "            SetMidpointX(shape, (float)(pivotX + newdx));"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "            SetMidpointY(shape, (float)(pivotY + newdy));"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.Rotation +\u003d angle;"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Shape Finding"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "        public static ShapeRange GetShapesWhenTypeMatches(PowerPointSlide slide, ShapeRange shapes, MsoShapeType type)"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cShape\u003e newShapeList \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape shape in shapes)"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shape.Type \u003d\u003d type)"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "                    newShapeList.Add(shape);"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "            return slide.ToShapeRange(newShapeList);"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "        public static ShapeRange GetShapesWhenTypeNotMatches(PowerPointSlide slide, ShapeRange shapes, MsoShapeType type)"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cShape\u003e newShapeList \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape shape in shapes)"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shape.Type !\u003d type)"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "                    newShapeList.Add(shape);"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "            return slide.ToShapeRange(newShapeList);"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "        public static List\u003cShape\u003e GetChildrenWithNonEmptyTag(Shape shape, string tagName)"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cShape\u003e result \u003d new List\u003cShape\u003e();"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!IsAGroup(shape))"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "                return result;"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 1; i \u003c\u003d shape.GroupItems.Count; i++)"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape child \u003d shape.GroupItems.Range(i)[1];"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!child.Tags[tagName].Equals(\"\"))"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "                    result.Add(child);"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "        public static List\u003cPPShape\u003e SortShapesByLeft(List\u003cPPShape\u003e selectedShapes)"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPPShape\u003e shapesToBeSorted \u003d new List\u003cPPShape\u003e();"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c selectedShapes.Count; i++)"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "                shapesToBeSorted.Add(selectedShapes[i]);"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "            shapesToBeSorted.Sort(LeftComparator);"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "            return shapesToBeSorted;"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "        public static List\u003cPPShape\u003e SortShapesByTop(List\u003cPPShape\u003e selectedShapes)"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPPShape\u003e shapesToBeSorted \u003d new List\u003cPPShape\u003e();"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c selectedShapes.Count; i++)"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "                shapesToBeSorted.Add(selectedShapes[i]);"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "            shapesToBeSorted.Sort(TopComparator);"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "            return shapesToBeSorted;"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Animations"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void MakeShapeViewTimeInvisible(Shape shape, Slide curSlide)"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "            Sequence sequence \u003d curSlide.TimeLine.MainSequence;"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "            Effect effectAppear \u003d sequence.AddEffect(shape, MsoAnimEffect.msoAnimEffectAppear,"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "                                                  MsoAnimateByLevel.msoAnimateLevelNone,"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "                                                  MsoAnimTriggerType.msoAnimTriggerWithPrevious);"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "            effectAppear.Timing.Duration \u003d 0;"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "            Effect effectDisappear \u003d sequence.AddEffect(shape, MsoAnimEffect.msoAnimEffectAppear,"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     MsoAnimateByLevel.msoAnimateLevelNone,"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "                                                     MsoAnimTriggerType.msoAnimTriggerWithPrevious);"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "            effectDisappear.Exit \u003d MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "            effectDisappear.Timing.Duration \u003d 0;"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "            effectAppear.MoveTo(1);"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "            effectDisappear.MoveTo(2);"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void MakeShapeViewTimeInvisible(Shape shape, PowerPointSlide curSlide)"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "            MakeShapeViewTimeInvisible(shape, curSlide.GetNativeSlide());"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void MakeShapeViewTimeInvisible(ShapeRange shapeRange, Slide curSlide)"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape shape in shapeRange)"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "                MakeShapeViewTimeInvisible(shape, curSlide);"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void MakeShapeViewTimeInvisible(ShapeRange shapeRange, PowerPointSlide curSlide)"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "            MakeShapeViewTimeInvisible(shapeRange, curSlide.GetNativeSlide());"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Syncing"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "        /// A better version of SyncShape, but cannot do a partial sync like SyncShape can."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "        /// SyncShape cannot operate on Groups and Charts. If those are detected, SyncWholeShape resorts to deleting"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "        /// candidateShape and replacing it with a copy of refShape instead of syncing."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void SyncWholeShape(Shape refShape, ref Shape candidateShape, PowerPointSlide candidateSlide)"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "            bool succeeded \u003d true;"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncShape(refShape, candidateShape);"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (UnauthorizedAccessException)"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "                succeeded \u003d false;"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (ArgumentException)"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "                succeeded \u003d false;"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (COMException)"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "                succeeded \u003d false;"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "            if (succeeded)"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "            candidateShape.Delete();"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "            refShape.Copy();"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "            candidateShape \u003d candidateSlide.Shapes.Paste()[1];"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "            candidateShape.Name \u003d refShape.Name;"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void SyncShape(Shape refShape, Shape candidateShape,"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "                                     bool pickupShapeBasic \u003d true, bool pickupShapeFormat \u003d true,"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "                                     bool pickupTextContent \u003d true, bool pickupTextFormat \u003d true)"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "            if (pickupShapeBasic)"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncShapeRotation(refShape, candidateShape);"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncShapeSize(refShape, candidateShape);"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncShapeLocation(refShape, candidateShape);"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "            if (pickupShapeFormat)"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "                refShape.PickUp();"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "                candidateShape.Apply();"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "            if ((pickupTextContent || pickupTextFormat) \u0026\u0026"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "                refShape.HasTextFrame \u003d\u003d MsoTriState.msoTrue \u0026\u0026"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "                candidateShape.HasTextFrame \u003d\u003d MsoTriState.msoTrue)"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "                TextRange2 refTextRange \u003d refShape.TextFrame2.TextRange;"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "                TextRange2 candidateTextRange \u003d candidateShape.TextFrame2.TextRange;"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "                if (pickupTextContent)"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "                    candidateTextRange.Text \u003d refTextRange.Text;"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "                int refParagraphCount \u003d refShape.TextFrame2.TextRange.Paragraphs.Count;"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "                int candidateParagraphCount \u003d candidateShape.TextFrame2.TextRange.Paragraphs.Count;"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "                if (refParagraphCount \u003e 0)"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "                    string originalText \u003d candidateTextRange.Text;"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncTextRange(refTextRange.Paragraphs[refParagraphCount], candidateTextRange);"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "                    candidateTextRange.Text \u003d originalText;"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 1; i \u003c\u003d candidateParagraphCount; i++)"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "                    TextRange2 refParagraph \u003d refTextRange.Paragraphs[i \u003c\u003d refParagraphCount ? i : refParagraphCount];"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "                    TextRange2 candidateParagraph \u003d candidateTextRange.Paragraphs[i];"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncTextRange(refParagraph, candidateParagraph, pickupTextContent, pickupTextFormat);"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void SyncShapeRange(ShapeRange refShapeRange, ShapeRange candidateShapeRange)"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "            // all names of identical shapes should be consistent"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "            if (refShapeRange.Count !\u003d candidateShapeRange.Count)"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (object shape in candidateShapeRange)"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape candidateShape \u003d shape as Shape;"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "                Shape refShape \u003d refShapeRange.Cast\u003cShape\u003e().FirstOrDefault(item \u003d\u003e IsSameType(item, candidateShape) \u0026\u0026"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                  IsSamePosition(item, candidateShape,"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                                 false, 15) \u0026\u0026"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                  IsSameSize(item, candidateShape));"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "                if (candidateShape \u003d\u003d null || refShape \u003d\u003d null)"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "                candidateShape.Name \u003d refShape.Name;"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void SyncTextRange(TextRange2 refTextRange, TextRange2 candidateTextRange,"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "                                         bool pickupTextContent \u003d true, bool pickupTextFormat \u003d true)"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "            bool originallyHadNewLine \u003d candidateTextRange.Text.EndsWith(\"\\r\");"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "            bool lostTheNewLine \u003d false;"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "            string candidateText \u003d candidateTextRange.Text.TrimEnd(\u0027\\r\u0027);"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "            if (pickupTextFormat)"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "                // pick up format using copy-paste, since we could not deep copy the format"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "                refTextRange.Copy();"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "                candidateTextRange.PasteSpecial(MsoClipboardFormat.msoClipboardFormatNative);"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "                lostTheNewLine \u003d !candidateTextRange.Text.EndsWith(\"\\r\");"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!pickupTextContent)"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "                candidateTextRange.Text \u003d candidateText;"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "                // Handling an uncommon edge case. If we are not copying paragraph content, only format,"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "                // Sometimes (when the reference paragraph doesn\u0027t end with a newline), the newline will be lost after copy."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "                if (originallyHadNewLine \u0026\u0026 lostTheNewLine)"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "                    candidateTextRange.Text \u003d candidateTextRange.Text + \"\\r\";"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "            if (refTextRange.Text.Trim().Equals(\"\"))"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "                candidateTextRange.Text \u003d \" \";"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Shape Text"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void DeleteTagFromShapes(ShapeRange shapes, string tagName)"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape shape in shapes)"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.Tags.Delete(tagName);"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This could be an extension method of shape."
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "        public static string GetText(Shape shape)"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "            return shape.TextFrame2.TextRange.Text;"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This could be an extension method of shape."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void SetText(Shape shape, params string[] lines)"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.TextFrame2.TextRange.Text \u003d string.Join(\"\\r\", lines);"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This could be an extension method of shape."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void SetText(Shape shape, IEnumerable\u003cstring\u003e lines)"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "            shape.TextFrame2.TextRange.Text \u003d string.Join(\"\\r\", lines);"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: This could be an extension method of shape."
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Get the paragraphs of the shape as a list."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "        /// The paragraphs formats can be modified to change the format of the paragraphs in shape."
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "        /// This list is 0-indexed."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "        public static List\u003cTextRange2\u003e GetParagraphs(Shape shape)"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "            return shape.TextFrame2.TextRange.Paragraphs.Cast\u003cTextRange2\u003e().ToList();"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "        public static TextRange ConvertTextRange2ToTextRange(TextRange2 textRange2)"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "            TextFrame2 textFrame2 \u003d textRange2.Parent as TextFrame2;"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "            if (textFrame2 \u003d\u003d null)"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shape \u003d textFrame2.Parent as Shape;"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "            return shape \u003d\u003d null ? null : shape.TextFrame.TextRange;"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Useful when shape has text with more than one color"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Getting color in that case without a workabout will return black"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Assumes that shape has a TextRange"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"shape\"\u003eRGB color, seems to be the color of the last character\u003c/param\u003e"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003creturns\u003e\u003c/returns\u003e"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "        public static int GuessTextColor(Shape shape)"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "            // clear the text, to clear presence of more than 1 color"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "            // TextRange.Font.Color.RGB then returns the same color of as new text that is added to the shape"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "            // "
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "            // Unsuccessful workabouts:"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "            // Taking a sub TextRange of the shape"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "            // Trimming text to the first character"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape duplicate \u003d shape.Duplicate()[1];"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "            duplicate.TextFrame.TextRange.Text \u003d \"\";"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "            int color \u003d duplicate.TextFrame.TextRange.Font.Color.RGB;"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "            duplicate.Delete();"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "            return color;"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Checks if a placeholder is a Body"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "        /// shape.PlaceHolderFormat.Type is insufficient, sometimes returning the more general \"ppPlaceHolderObject\"."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"placeHolder\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003creturns\u003e\u003c/returns\u003e"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsPlaceHolderBody(Shape placeHolder)"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "            return placeHolder.HasTextFrame \u003d\u003d MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// Formats shape to default style."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static void FormatCalloutToDefaultStyle(Shape calloutBox)"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            calloutBox.TextFrame.WordWrap \u003d MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            calloutBox.TextFrame.TextRange.Font.Size \u003d DefaultFontSize;"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            calloutBox.Fill.ForeColor.RGB \u003d 0;"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            calloutBox.Fill.Transparency \u003d DefaultCalloutFillTransparency;"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            calloutBox.Shadow.Type \u003d MsoShadowType.msoShadow25;"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            calloutBox.Line.ForeColor.RGB \u003d ColorTranslator.ToOle(Color.Yellow);"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            calloutBox.Line.Weight \u003d DefaultLineWeight;"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            calloutBox.TextFrame.TextRange.Font.Color.RGB \u003d ColorTranslator.ToOle(Color.White);"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// Formats trigger to default style."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003cparam name\u003d\"triggerShape\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static void FormatTriggerShapeToDefaultStyle(Shape triggerShape)"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            triggerShape.TextFrame.TextRange.Font.Size \u003d DefaultFontSize;"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            triggerShape.Fill.ForeColor.RGB \u003d ColorTranslator.ToOle(Color.LightGray);"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            triggerShape.Line.Transparency \u003d 1.0f;"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            triggerShape.TextFrame.TextRange.Font.Color.RGB \u003d ColorTranslator.ToOle(Color.White);"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            triggerShape.TextFrame.TextRange.Text \u003d \"?\";"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "        #region SyncShape Format utils"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Applies the specified formats from one shape to multiple shapes"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"formats\"\u003eFormats to apply\u003c/param\u003e"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"formatShape\"\u003esource shape\u003c/param\u003e"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"newShapes\"\u003edestination shape\u003c/param\u003e"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void ApplyFormats(Format[] formats, Shape formatShape, ShapeRange newShapes)"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Shape newShape in newShapes)"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "                ApplyFormats(formats, formatShape, newShape);"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void ApplyFormats(Format[] formats, Shape formatShape, Shape newShape)"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (Format format in formats)"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "                format.SyncFormat(formatShape, newShape);"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Format[] GetCopyableFormats(Shape shape)"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "            return (from format in SyncFormatConstants.Formats where format.CanCopy(shape) select format)"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "                .ToArray();"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Applies all applyable formats from one shape to another"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"formatShape\"\u003esource shape\u003c/param\u003e"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"newShape\"\u003edestination shape\u003c/param\u003e"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"ignoredFormats\"\u003eformats to ignore\u003c/param\u003e"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void ApplyAllPossibleFormats(Shape formatShape, Shape newShape, List\u003cFormat\u003e ignoredFormats)"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "            // gather all formats"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cFormat\u003e copyableFormats \u003d GetCopyableFormats(formatShape).ToList();"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "            Format[] withoutIgnored \u003d copyableFormats.Except(ignoredFormats).ToArray();"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "            ApplyFormats(withoutIgnored, formatShape, newShape);"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "        #region PlaceHolder utils"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool CanCopyMsoPlaceHolder(Shape placeholder, Shapes shapesSource)"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "            var emptyArray \u003d new Format[0];"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape copyAttempt \u003d CopyMsoPlaceHolder(emptyArray, placeholder, shapesSource);"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "            if (copyAttempt \u003d\u003d null)"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "            copyAttempt.Delete();"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Fake a copy by creating a similar object with the same formats"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Copy/Pasting MsoPlaceHolder doesn\u0027t work."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Note: Shapes.AddPlaceholder(..) does not work as well."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "        /// It restores a deleted placeholder to the slide, not create a shape"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"formats\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"msoPlaceHolder\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"shapesSource\"\u003eShapes object, source of shapes\u003c/param\u003e"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003creturns\u003ereturns null if input placeholder is not supported\u003c/returns\u003e"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "        public static Shape CopyMsoPlaceHolder(Format[] formats, Shape msoPlaceHolder, Shapes shapesSource)"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "            PpPlaceholderType realType \u003d msoPlaceHolder.PlaceholderFormat.Type;"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "            // charts, tables, pictures \u0026 smart shapes may return a general type,"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "            // ppPlaceHolderObject or ppPlaceHolderVerticalObject"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "            bool isGeneralType \u003d realType \u003d\u003d PpPlaceholderType.ppPlaceholderObject ||"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "                                 realType \u003d\u003d PpPlaceholderType.ppPlaceholderVerticalObject;"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isGeneralType)"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "                realType \u003d GetSpecificPlaceholderType(msoPlaceHolder);"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "            // create an appropriate shape, based on placeholder type"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape shapeTemplate \u003d null;"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "            switch (realType)"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "                // the type never seems to be anything other than subtitle, center title, title, body or object."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "                // still, place the rest here to be safe."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "                case PpPlaceholderType.ppPlaceholderBody:"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "                case PpPlaceholderType.ppPlaceholderCenterTitle:"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "                case PpPlaceholderType.ppPlaceholderTitle:"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "                case PpPlaceholderType.ppPlaceholderSubtitle:"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "                case PpPlaceholderType.ppPlaceholderVerticalBody:"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "                case PpPlaceholderType.ppPlaceholderVerticalTitle:"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "                    // not safe to do shape.Duplicate(), the duplicated textbox has differences in configuration"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "                    // width is one example. more investigation is required to find out the exact differences"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapeTemplate \u003d shapesSource.AddTextbox("
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "                        msoPlaceHolder.TextFrame.Orientation,"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "                        msoPlaceHolder.Left,"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "                        msoPlaceHolder.Top,"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "                        msoPlaceHolder.Width,"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "                        msoPlaceHolder.Height);"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "                case PpPlaceholderType.ppPlaceholderChart:"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "                case PpPlaceholderType.ppPlaceholderOrgChart:"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "                    // not much value in copying charts, differed for now"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "                case PpPlaceholderType.ppPlaceholderTable:"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "                    // not much value in copying tables, differed for now"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "                case PpPlaceholderType.ppPlaceholderPicture:"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "                case PpPlaceholderType.ppPlaceholderBitmap:"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "                    // must use duplicate. there is no way to create a replacement picture"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "                    // as the image\u0027s source is not obtainable through the Shape API"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "                    var tempShape \u003d msoPlaceHolder.Duplicate()[1];"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "                    tempShape.Copy();"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapeTemplate \u003d shapesSource.Paste()[1];"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "                    tempShape.Delete();"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "                case PpPlaceholderType.ppPlaceholderVerticalObject:"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "                case PpPlaceholderType.ppPlaceholderObject:"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "                    // already narrowed down the type "
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "                    // should only perform actions valid for all placeholder objects here "
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "                    // do nothing for now"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "                default:"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "                    // types not listed above are types that do not make sense to be copied in pptlabs"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "                    // eg. footer, header, date placeholders"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "            if (shapeTemplate \u003d\u003d null)"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "                // placeholder type is not supported, no copy made"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "            ApplyFormats(formats, msoPlaceHolder, shapeTemplate);"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "            return shapeTemplate;"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Targets only msoPlaceHolderObject \u0026 msoPlaceHolderVerticalObject"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Attempt to return a more specific placeholder type, if we can determine it"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"placeHolder\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003creturns\u003ea specific type, or the shape\u0027s original type\u003c/returns\u003e"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "        public static PpPlaceholderType GetSpecificPlaceholderType(Shape placeHolder)"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "            bool isPicture \u003d IsPlaceHolderPicture(placeHolder);"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "            bool isBody \u003d IsPlaceHolderBody(placeHolder);"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isPicture)"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "                return PpPlaceholderType.ppPlaceholderPicture;"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "            else if (isBody)"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "                return PpPlaceholderType.ppPlaceholderBody;"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "                return placeHolder.PlaceholderFormat.Type;"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "        /// Checks if a placeholder is a Picture"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "        /// shape.PlaceHolderFormat.Type is insufficient, sometimes returning the more general \"ppPlaceHolderObject\"."
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003cparam name\u003d\"placeHolder\"\u003e\u003c/param\u003e"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "        /// \u003creturns\u003e\u003c/returns\u003e"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "        public static bool IsPlaceHolderPicture(Shape placeHolder)"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "                // attempt to access PictureFormat properties, an exception will be thrown"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "                // if shape is not a Picture."
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "                float unused \u003d placeHolder.PictureFormat.CropTop;"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "            catch"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Helper Methods"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void SyncShapeLocation(Shape refShape, Shape candidateShape)"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "            candidateShape.Left \u003d refShape.Left;"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "            candidateShape.Top \u003d refShape.Top;"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void SyncShapeRotation(Shape refShape, Shape candidateShape)"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "            candidateShape.Rotation \u003d refShape.Rotation;"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void SyncShapeSize(Shape refShape, Shape candidateShape)"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "            // unlock aspect ratio to enable size tweak"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "            MsoTriState candidateLockRatio \u003d candidateShape.LockAspectRatio;"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "            candidateShape.LockAspectRatio \u003d MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "            candidateShape.Width \u003d refShape.Width;"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "            candidateShape.Height \u003d refShape.Height;"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "            candidateShape.LockAspectRatio \u003d candidateLockRatio;"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "        #region Comparators"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "        private static int LeftComparator(PPShape s1, PPShape s2)"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "            return s1.VisualLeft.CompareTo(s2.VisualLeft);"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "        private static int TopComparator(PPShape s1, PPShape s2)"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "            return s1.VisualTop.CompareTo(s2.VisualTop);"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "        #endregion"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 31,
      "-": 1291
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ZoomLab/AutoZoom.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Linq;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Views;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using Office \u003d Microsoft.Office.Core;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPoint \u003d Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.ZoomLab"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    internal static class AutoZoom"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "#pragma warning disable 0618"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void AddDrillDownAnimation()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!IsSelectingShapes())"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            AddDrillDownAnimation(Globals.ThisAddIn.Application.ActiveWindow.Selection.ShapeRange[1],"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPointCurrentPresentationInfo.CurrentSlide);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void AddDrillDownAnimation(PowerPoint.Shape selectedShape, PowerPointSlide currentSlide)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointDrillDownSlide addedSlide;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            AddDrillDownAnimation(selectedShape, currentSlide, out addedSlide);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void AddDrillDownAnimation(PowerPoint.Shape selectedShape, PowerPointSlide currentSlide,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            out PowerPointDrillDownSlide addedSlide, bool includeAckSlide \u003d true, bool deletePreviouslyAdded \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                if (currentSlide \u003d\u003d null || currentSlide.Index \u003d\u003d PowerPointPresentation.Current.SlideCount)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.Windows.Forms.MessageBox.Show(TextCollection.ZoomLabText.ErrorInvalidNextSlide, TextCollection.ZoomLabText.ErrorUnableToAddAnimationsCaption);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                //Pick up the border and shadow style, to be applied to zoomed shape"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedShape.PickUp();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                PrepareZoomShape(currentSlide, ref selectedShape);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPointSlide nextSlide \u003d GetNextSlide(currentSlide, deletePreviouslyAdded);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.Shape nextSlidePicture \u003d null, shapeToZoom \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                currentSlide.HideIndicator();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                if (ZoomLabSettings.BackgroundZoomChecked)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    nextSlidePicture \u003d GetNextSlidePictureWithBackground(currentSlide, nextSlide);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                    nextSlidePicture.Apply();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                    PrepareNextSlidePicture(currentSlide, selectedShape, ref nextSlidePicture);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide \u003d (PowerPointDrillDownSlide)currentSlide.CreateDrillDownSlide();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide.DeleteAllShapes();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    nextSlidePicture.Copy();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapeToZoom \u003d addedSlide.Shapes.Paste()[1];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide.DeleteShapeAnimations(shapeToZoom);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    PowerPoint.Shape backgroundShape \u003d AddSlideAsShape(currentSlide, addedSlide);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    backgroundShape.Apply();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                    ShapeUtil.FitShapeToSlide(ref backgroundShape);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                    backgroundShape.ZOrder(Office.MsoZOrderCmd.msoSendBackward);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    backgroundShape.Name \u003d \"PPTZoomInShape\" + DateTime.Now.ToString(\"yyyyMMddHHmmssffff\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide.PrepareForDrillDown();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide.AddDrillDownAnimationBackground(backgroundShape, shapeToZoom, nextSlidePicture);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                    PowerPoint.Shape pictureOnNextSlide \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                    nextSlidePicture \u003d GetNextSlidePictureWithoutBackground(currentSlide, nextSlide, out pictureOnNextSlide);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                    nextSlidePicture.Apply();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                    PrepareNextSlidePicture(currentSlide, selectedShape, ref nextSlidePicture);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide \u003d (PowerPointDrillDownSlide)currentSlide.CreateDrillDownSlide();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide.DeleteAllShapes();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                    nextSlidePicture.Copy();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapeToZoom \u003d addedSlide.Shapes.Paste()[1];"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide.DeleteShapeAnimations(shapeToZoom);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    PowerPoint.Shape backgroundShape \u003d AddSlideAsShape(currentSlide, addedSlide);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                    backgroundShape.Apply();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                    ShapeUtil.FitShapeToSlide(ref backgroundShape);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                    backgroundShape.ZOrder(Office.MsoZOrderCmd.msoSendBackward);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                    backgroundShape.Name \u003d \"PPTZoomInShape\" + DateTime.Now.ToString(\"yyyyMMddHHmmssffff\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide.PrepareForDrillDown();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide.AddDrillDownAnimationNoBackground(backgroundShape, shapeToZoom, pictureOnNextSlide);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                    pictureOnNextSlide.Delete();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                currentSlide.ShowIndicator();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                Globals.ThisAddIn.Application.ActiveWindow.View.GotoSlide(addedSlide.Index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                Globals.ThisAddIn.Application.CommandBars.ExecuteMso(\"AnimationPreview\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                if (includeAckSlide)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    PowerPointPresentation.Current.AddAckSlide();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(e, \"AddDrillDownAnimation\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                ErrorDialogBox.ShowDialog(\"Error when adding drill down animation\", \"An error occurred when adding drill down animation.\", e);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                throw;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void AddStepBackAnimation()"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!IsSelectingShapes())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            AddStepBackAnimation(Globals.ThisAddIn.Application.ActiveWindow.Selection.ShapeRange[1],"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPointCurrentPresentationInfo.CurrentSlide);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void AddStepBackAnimation(PowerPoint.Shape selectedShape, PowerPointSlide currentSlide)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointStepBackSlide addedSlide;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            AddStepBackAnimation(selectedShape, currentSlide, out addedSlide);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void AddStepBackAnimation(PowerPoint.Shape selectedShape, PowerPointSlide currentSlide,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            out PowerPointStepBackSlide addedSlide, bool includeAckSlide \u003d true, bool deletePreviouslyAdded \u003d true)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                if (currentSlide \u003d\u003d null || currentSlide.Index \u003d\u003d 1)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                    System.Windows.Forms.MessageBox.Show(TextCollection.ZoomLabText.ErrorInvalidPreviousSlide, TextCollection.ZoomLabText.ErrorUnableToAddAnimationsCaption);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide \u003d null;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                    return;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                //Pick up the border and shadow style, to be applied to zoomed shape"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedShape.PickUp();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                PrepareZoomShape(currentSlide, ref selectedShape);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPointSlide previousSlide \u003d GetPreviousSlide(currentSlide, deletePreviouslyAdded);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.Shape previousSlidePicture \u003d null, shapeToZoom \u003d null;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                "
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                currentSlide.HideIndicator();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                if (ZoomLabSettings.BackgroundZoomChecked)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                    previousSlidePicture \u003d GetPreviousSlidePictureWithBackground(currentSlide, previousSlide);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                    previousSlidePicture.Apply();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                    PreparePreviousSlidePicture(selectedShape, ref previousSlidePicture);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide \u003d (PowerPointStepBackSlide)previousSlide.CreateStepBackSlide();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide.DeleteAllShapes();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                    PowerPoint.Shape backgroundShape \u003d null;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapeToZoom \u003d GetStepBackWithBackgroundShapeToZoom(currentSlide, addedSlide, previousSlidePicture, out backgroundShape);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapeToZoom.Apply();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide.PrepareForStepBack();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide.AddStepBackAnimationBackground(shapeToZoom, backgroundShape, previousSlidePicture);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide \u003d (PowerPointStepBackSlide)previousSlide.CreateStepBackSlide();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide.DeleteAllShapes();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapeToZoom \u003d GetStepBackWithoutBackgroundShapeToZoom(addedSlide, previousSlide);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapeToZoom.Apply();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapeToZoom.Copy();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                    previousSlidePicture \u003d currentSlide.Shapes.PasteSpecial(PowerPoint.PpPasteDataType.ppPastePNG)[1];"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                    previousSlidePicture.Apply();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                    PreparePreviousSlidePicture(selectedShape, ref previousSlidePicture);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide.PrepareForStepBack();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlide.AddStepBackAnimationNonBackground(shapeToZoom, previousSlidePicture);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                currentSlide.ShowIndicator();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                currentSlide.Transition.EntryEffect \u003d PowerPoint.PpEntryEffect.ppEffectFadeSmoothly;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                currentSlide.Transition.Duration \u003d 0.25f;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Globals.ThisAddIn.Application.ActiveWindow.View.GotoSlide(addedSlide.Index);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                Globals.ThisAddIn.Application.CommandBars.ExecuteMso(\"AnimationPreview\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                if (includeAckSlide)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                    PowerPointPresentation.Current.AddAckSlide();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(e, \"AddStepBackAnimation\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                ErrorDialogBox.ShowDialog(\"Error when adding step back animation\", \"An error occurred when adding step back animation.\", e);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                throw;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void RemoveTextFromShape(PowerPoint.Shape shape)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            if (shape.HasTextFrame \u003d\u003d Office.MsoTriState.msoTrue \u0026\u0026 shape.TextFrame.HasText \u003d\u003d Office.MsoTriState.msoTrue)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                shape.TextFrame.TextRange.Text \u003d \"\";"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void PrepareZoomShape(PowerPointSlide currentSlide, ref PowerPoint.Shape selectedShape)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            currentSlide.DeleteShapeAnimations(selectedShape);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            RemoveTextFromShape(selectedShape);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            selectedShape.Rotation \u003d 0;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        //Delete previously added drill down slides"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        private static PowerPointSlide GetNextSlide(PowerPointSlide currentSlide, bool deletePreviouslyAdded \u003d true)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointSlide nextSlide \u003d PowerPointPresentation.Current.Slides[currentSlide.Index];"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointSlide tempSlide \u003d nextSlide;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            while (nextSlide.Name.Contains(\"PPTLabsZoomIn\") \u0026\u0026 nextSlide.Index \u003c PowerPointPresentation.Current.SlideCount)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                nextSlide \u003d PowerPointPresentation.Current.Slides[tempSlide.Index];"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                if (deletePreviouslyAdded)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                    tempSlide.Delete();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                tempSlide \u003d nextSlide;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            nextSlide.Transition.EntryEffect \u003d PowerPoint.PpEntryEffect.ppEffectFadeSmoothly;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            nextSlide.Transition.Duration \u003d 0.25f;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            return nextSlide;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        //Delete previously added step back slides"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        private static PowerPointSlide GetPreviousSlide(PowerPointSlide currentSlide, bool deletePreviouslyAdded \u003d true)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointSlide previousSlide \u003d PowerPointPresentation.Current.Slides[currentSlide.Index - 2];"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointSlide tempSlide \u003d previousSlide;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            while (previousSlide.Name.Contains(\"PPTLabsZoomOut\") \u0026\u0026 previousSlide.Index \u003e 1)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "                previousSlide \u003d PowerPointPresentation.Current.Slides[tempSlide.Index - 2];"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "                if (deletePreviouslyAdded)"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "                    tempSlide.Delete();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "                tempSlide \u003d previousSlide;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            return previousSlide;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        //Return picture copy of next slide where shapes with exit animations have been deleted"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        private static PowerPoint.Shape GetNextSlidePictureWithoutBackground(PowerPointSlide currentSlide, PowerPointSlide nextSlide, out PowerPoint.Shape pictureOnNextSlide)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            Globals.ThisAddIn.Application.ActiveWindow.Selection.Unselect();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            Globals.ThisAddIn.Application.ActiveWindow.View.GotoSlide(nextSlide.Index);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPowerPoint.Shape\u003e shapesOnNextSlide \u003d new List\u003cPowerPoint.Shape\u003e();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.Shape sh in nextSlide.Shapes)"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!nextSlide.HasEntryAnimation(sh) \u0026\u0026 !ShapeUtil.IsHidden(sh))"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                    shapesOnNextSlide.Add(sh);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPowerPoint.Shape\u003e copiedShapes \u003d new List\u003cPowerPoint.Shape\u003e();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.Shape sh in shapesOnNextSlide)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                sh.Copy();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.Shape shapeCopy \u003d nextSlide.Shapes.Paste()[1];"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "                LegacyShapeUtil.CopyShapeAttributes(sh, ref shapeCopy);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "                copiedShapes.Add(shapeCopy);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            SelectAllShape(copiedShapes);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Selection sel \u003d Globals.ThisAddIn.Application.ActiveWindow.Selection;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Shape shapeGroup \u003d null;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "            if (sel.ShapeRange.Count \u003e 1)"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "                shapeGroup \u003d sel.ShapeRange.Group();"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "                shapeGroup \u003d sel.ShapeRange[1];"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeGroup.Copy();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            pictureOnNextSlide \u003d nextSlide.Shapes.PasteSpecial(PowerPoint.PpPasteDataType.ppPastePNG)[1];"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            LegacyShapeUtil.CopyShapePosition(shapeGroup, ref pictureOnNextSlide);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeGroup.Delete();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            pictureOnNextSlide.Copy();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Shape slidePicture \u003d currentSlide.Shapes.PasteSpecial(PowerPoint.PpPasteDataType.ppPastePNG)[1];"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            return slidePicture;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        //Return picture copy of next slide where shapes with exit animations have been deleted"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        private static PowerPoint.Shape GetNextSlidePictureWithBackground(PowerPointSlide currentSlide, PowerPointSlide nextSlide)"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointSlide nextSlideCopy \u003d nextSlide.Duplicate();"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPowerPoint.Shape\u003e shapes \u003d nextSlideCopy.Shapes.Cast\u003cPowerPoint.Shape\u003e().ToList();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            IEnumerable\u003cPowerPoint.Shape\u003e matchingShapes \u003d shapes.Where(current \u003d\u003e nextSlideCopy.HasEntryAnimation(current));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.Shape s in matchingShapes)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "                s.Delete();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PowerPoint.Shape slidePicture \u003d AddSlideAsShape(nextSlideCopy, currentSlide);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            nextSlideCopy.Delete();"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            return slidePicture;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        //Return picture copy of previous slide where shapes with exit animations have been deleted"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        private static PowerPoint.Shape GetPreviousSlidePictureWithBackground(PowerPointSlide currentSlide, PowerPointSlide previousSlide)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointSlide previousSlideCopy \u003d previousSlide.Duplicate();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPowerPoint.Shape\u003e shapes \u003d previousSlideCopy.Shapes.Cast\u003cPowerPoint.Shape\u003e().ToList();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            IEnumerable\u003cPowerPoint.Shape\u003e matchingShapes \u003d shapes.Where(current \u003d\u003e previousSlideCopy.HasExitAnimation(current));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.Shape s in matchingShapes)"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "                s.Delete();"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PowerPoint.Shape slidePicture \u003d AddSlideAsShape(previousSlideCopy, currentSlide);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            previousSlideCopy.Delete();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "            return slidePicture;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set position, size and animations of the next slide copy"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void PrepareNextSlidePicture(PowerPointSlide currentSlide, PowerPoint.Shape selectedShape, ref PowerPoint.Shape nextSlidePicture)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            nextSlidePicture.LockAspectRatio \u003d Office.MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedShape.Width \u003e selectedShape.Height)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "                nextSlidePicture.Height \u003d selectedShape.Height;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "                nextSlidePicture.Width \u003d selectedShape.Width;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "            LegacyShapeUtil.CopyShapePosition(selectedShape, ref nextSlidePicture);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "            selectedShape.Visible \u003d Office.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            nextSlidePicture.Name \u003d \"PPTZoomInShape\" + DateTime.Now.ToString(\"yyyyMMddHHmmssffff\");"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Effect effectAppear \u003d currentSlide.TimeLine.MainSequence.AddEffect(nextSlidePicture, PowerPoint.MsoAnimEffect.msoAnimEffectFade, PowerPoint.MsoAnimateByLevel.msoAnimateLevelNone, PowerPoint.MsoAnimTriggerType.msoAnimTriggerOnPageClick);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "            effectAppear.Timing.Duration \u003d 0.50f;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set position, size and animations of the previous slide copy"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void PreparePreviousSlidePicture(PowerPoint.Shape selectedShape, ref PowerPoint.Shape previousSlidePicture)"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            previousSlidePicture.LockAspectRatio \u003d Office.MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "            if (selectedShape.Width \u003e selectedShape.Height)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "                previousSlidePicture.Height \u003d selectedShape.Height;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "                previousSlidePicture.Width \u003d selectedShape.Width;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "            LegacyShapeUtil.CopyShapePosition(selectedShape, ref previousSlidePicture);"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "            selectedShape.Visible \u003d Office.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "            previousSlidePicture.Name \u003d \"PPTZoomOutShape\" + DateTime.Now.ToString(\"yyyyMMddHHmmssffff\");"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool IsSelectingShapes()"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Selection selection \u003d Globals.ThisAddIn.Application.ActiveWindow.Selection;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "            return selection.Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionShapes \u0026\u0026 selection.ShapeRange.Count \u003e 0;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        private static PowerPoint.Shape GetStepBackWithBackgroundShapeToZoom(PowerPointSlide currentSlide, PowerPointSlide addedSlide, PowerPoint.Shape previousSlidePicture, out PowerPoint.Shape backgroundShape)"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PowerPoint.Shape currentSlideCopy \u003d AddSlideAsShape(currentSlide, addedSlide);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeUtil.FitShapeToSlide(ref currentSlideCopy);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "            currentSlideCopy.Name \u003d \"PPTZoomOutShape\" + DateTime.Now.ToString(\"yyyyMMddHHmmssffff\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "            previousSlidePicture.Copy();"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Shape previousSlidePictureCopy \u003d addedSlide.Shapes.Paste()[1];"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "            Globals.ThisAddIn.Application.ActiveWindow.View.GotoSlide(addedSlide.Index);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            // Scale everything up by this ratio."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "            float ratio \u003d PowerPointPresentation.Current.SlideWidth / previousSlidePictureCopy.Width;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "            currentSlideCopy.Width *\u003d ratio;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "            currentSlideCopy.Height *\u003d ratio;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "            currentSlideCopy.Left \u003d -ratio * previousSlidePictureCopy.Left;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            currentSlideCopy.Top \u003d -ratio * previousSlidePictureCopy.Top;"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "            // for some reason height is locked to width, so we only need to change width here."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "            previousSlidePictureCopy.Width *\u003d ratio;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            previousSlidePictureCopy.Left \u003d 0;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "            previousSlidePictureCopy.Top \u003d 0;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "            backgroundShape \u003d currentSlideCopy;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "            return previousSlidePictureCopy;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        private static PowerPoint.Shape GetStepBackWithoutBackgroundShapeToZoom(PowerPointSlide addedSlide, PowerPointSlide previousSlide)"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "            Globals.ThisAddIn.Application.ActiveWindow.Selection.Unselect();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "            Globals.ThisAddIn.Application.ActiveWindow.View.GotoSlide(addedSlide.Index);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPowerPoint.Shape\u003e copiedShapes \u003d new List\u003cPowerPoint.Shape\u003e();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.Shape sh in previousSlide.Shapes)"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!previousSlide.HasExitAnimation(sh) \u0026\u0026 !ShapeUtil.IsHidden(sh))"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "                    sh.Copy();"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "                    PowerPoint.Shape shapeCopy \u003d addedSlide.Shapes.Paste()[1];"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "                    LegacyShapeUtil.CopyShapeAttributes(sh, ref shapeCopy);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "                    copiedShapes.Add(shapeCopy);"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "                } "
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "            SelectAllShape(copiedShapes);"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Selection sel \u003d Globals.ThisAddIn.Application.ActiveWindow.Selection;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Shape shapeGroup \u003d null;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "            if (sel.ShapeRange.Count \u003e 1)"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "                shapeGroup \u003d sel.ShapeRange.Group();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "                shapeGroup \u003d sel.ShapeRange[1];"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeGroup.Copy();"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Shape previousSlidePicture \u003d addedSlide.Shapes.PasteSpecial(PowerPoint.PpPasteDataType.ppPastePNG)[1];"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "            LegacyShapeUtil.CopyShapePosition(shapeGroup, ref previousSlidePicture);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "            previousSlidePicture.Name \u003d \"PPTZoomOutShape\" + DateTime.Now.ToString(\"yyyyMMddHHmmssffff\");"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "            shapeGroup.Delete();"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "            return previousSlidePicture;"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void SelectAllShape(List\u003cPowerPoint.Shape\u003e shapes)"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.Shape shapeCopy in shapes)"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "                shapeCopy.Select(Office.MsoTriState.msoFalse);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private static PowerPoint.Shape AddSlideAsShape(PowerPointSlide slideToAdd, PowerPointSlide targetSlide)"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            try"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                // Export the slide as .png to a temporary location, then add it to shapes."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                // This yields a higher quality image compared to copy-pasting slide as image."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                string tempFilePath \u003d FileDir.GetTemporaryPngFilePath();"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                GraphicsUtil.ExportSlide(slideToAdd, tempFilePath);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                PowerPoint.Shape slideAsShape \u003d targetSlide.Shapes.AddPicture2(tempFilePath,"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                                                                 Microsoft.Office.Core.MsoTriState.msoFalse,"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                                                                 Microsoft.Office.Core.MsoTriState.msoTrue,"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                                                                 0,"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                                                                                 0);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                try"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    FileDir.DeleteFile(tempFilePath);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                catch (Exception)"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                    return slideAsShape;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return slideAsShape;"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            catch (Exception)"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                // It is possible that there could permissions-related issues that cause user to be unable to create/delete files."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                // In that case, we proceed with copy-pasting the slide as image."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                slideToAdd.Copy();"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                PowerPoint.Shape slideAsShape \u003d targetSlide.Shapes.PasteSpecial(PowerPoint.PpPasteDataType.ppPastePNG)[1];"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                return slideAsShape;"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 39,
      "-": 452
    }
  },
  {
    "path": "PowerPointLabs/PowerPointLabs/ZoomLab/ZoomToArea.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Linq;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.ActionFramework.Common.Log;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Utils;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.Views;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using Office \u003d Microsoft.Office.Core;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPoint \u003d Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "namespace PowerPointLabs.ZoomLab"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    internal static class ZoomToArea"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "#pragma warning disable 0618"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void AddZoomToArea()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!IsSelectingShapes())"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            try"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPointSlide currentSlide \u003d PowerPointCurrentPresentationInfo.CurrentSlide;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteExistingZoomToAreaSlides(currentSlide);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                currentSlide.Name \u003d \"PPTLabsZoomToAreaSlide\" + DateTime.Now.ToString(\"yyyyMMddHHmmssffff\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.ShapeRange selectedShapes \u003d Globals.ThisAddIn.Application.ActiveWindow.Selection.ShapeRange;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cPowerPoint.Shape\u003e zoomRectangles \u003d ReplaceWithZoomRectangleImages(currentSlide, selectedShapes);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                MakeInvisible(zoomRectangles);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cPowerPoint.Shape\u003e editedSelectedShapes \u003d GetEditedShapesForZoomToArea(currentSlide, zoomRectangles);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                List\u003cPowerPointSlide\u003e addedSlides \u003d AddMultiSlideZoomToArea(currentSlide, editedSelectedShapes);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                if (!ZoomLabSettings.MultiSlideZoomChecked)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                    SlideUtil.SquashSlides(addedSlides);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                MakeVisible(zoomRectangles);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                Globals.ThisAddIn.Application.ActiveWindow.View.GotoSlide(currentSlide.Index);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPointPresentation.Current.AddAckSlide();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                // Always call ReleaseComObject and GC.Collect after shape deletion to prevent shape corruption after undo."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                System.Runtime.InteropServices.Marshal.ReleaseComObject(selectedShapes);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                GC.Collect();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            catch (Exception e)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                Logger.LogException(e, \"AddZoomToArea\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                ErrorDialogBox.ShowDialog(\"Error when adding zoom to area\", \"An error occurred when adding zoom to area.\", e);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                throw;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        private static List\u003cPowerPointSlide\u003e AddMultiSlideZoomToArea(PowerPointSlide currentSlide, List\u003cPowerPoint.Shape\u003e shapesToZoom)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPowerPointSlide\u003e addedSlides \u003d new List\u003cPowerPointSlide\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int shapeCount \u003d 1;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointSlide lastMagnifiedSlide \u003d null;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointMagnifyingSlide magnifyingSlide \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointMagnifiedSlide magnifiedSlide \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointMagnifiedPanSlide magnifiedPanSlide \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPointDeMagnifyingSlide deMagnifyingSlide \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.Shape selectedShape in shapesToZoom)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                magnifyingSlide \u003d (PowerPointMagnifyingSlide)currentSlide.CreateZoomMagnifyingSlide();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                magnifyingSlide.AddZoomToAreaAnimation(selectedShape);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                magnifiedSlide \u003d (PowerPointMagnifiedSlide)magnifyingSlide.CreateZoomMagnifiedSlide();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                magnifiedSlide.AddZoomToAreaAnimation(selectedShape);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                addedSlides.Add(magnifiedSlide);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shapeCount !\u003d 1)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                    magnifiedPanSlide \u003d (PowerPointMagnifiedPanSlide)lastMagnifiedSlide.CreateZoomPanSlide();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                    magnifiedPanSlide.AddZoomToAreaAnimation(lastMagnifiedSlide, magnifiedSlide);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlides.Add(magnifiedPanSlide);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shapeCount \u003d\u003d shapesToZoom.Count)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                    deMagnifyingSlide \u003d (PowerPointDeMagnifyingSlide)magnifyingSlide.CreateZoomDeMagnifyingSlide();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                    deMagnifyingSlide.MoveTo(magnifyingSlide.Index + 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                    deMagnifyingSlide.AddZoomToAreaAnimation(selectedShape);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlides.Add(deMagnifyingSlide);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                selectedShape.Delete();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                if (shapeCount !\u003d 1)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                    magnifyingSlide.Delete();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                    magnifiedSlide.MoveTo(magnifiedPanSlide.Index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (deMagnifyingSlide !\u003d null)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                        deMagnifyingSlide.MoveTo(magnifiedSlide.Index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                    lastMagnifiedSlide \u003d magnifiedSlide;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                else"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                    addedSlides.Add(magnifyingSlide);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                    lastMagnifiedSlide \u003d magnifiedSlide;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                shapeCount++;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            SlideUtil.SortByIndex(addedSlides);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return addedSlides;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        private static List\u003cPowerPoint.Shape\u003e ReplaceWithZoomRectangleImages(PowerPointSlide currentSlide, PowerPoint.ShapeRange shapeRange)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cPowerPoint.Shape\u003e zoomRectangles \u003d new List\u003cPowerPoint.Shape\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            int shapeCount \u003d 1;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.Shape zoomShape in shapeRange)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPoint.Shape zoomRectangle \u003d currentSlide.Shapes.AddShape(Office.MsoAutoShapeType.msoShapeRectangle,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                zoomShape.Left,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                zoomShape.Top,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                zoomShape.Width,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                zoomShape.Height);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                currentSlide.AddAppearDisappearAnimation(zoomRectangle);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                // Set Name"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomRectangle.Name \u003d \"PPTLabsMagnifyShape\" + DateTime.Now.ToString(\"yyyyMMddHHmmssffff\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                // Set Text"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomRectangle.TextFrame2.TextRange.Text \u003d \"Zoom Shape \" + shapeCount;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomRectangle.TextFrame2.AutoSize \u003d Office.MsoAutoSize.msoAutoSizeTextToFitShape;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomRectangle.TextFrame2.TextRange.Font.Fill.ForeColor.RGB \u003d 0xffffff;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomRectangle.TextFrame2.TextRange.Font.Bold \u003d Office.MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                // Set Colour"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomRectangle.Fill.ForeColor.RGB \u003d 0xaaaaaa;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomRectangle.Fill.Transparency \u003d 0.7f;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomRectangle.Line.ForeColor.RGB \u003d 0x000000;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomRectangles.Add(zoomRectangle);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomShape.Delete();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                shapeCount++;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return zoomRectangles;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        private static List\u003cPowerPoint.Shape\u003e GetEditedShapesForZoomToArea(PowerPointSlide currentSlide, List\u003cPowerPoint.Shape\u003e zoomRectangles)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return zoomRectangles.Select(zoomShape \u003d\u003e GetBestFitShape(currentSlide, zoomShape)).ToList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        //Shape dimensions should match the slide dimensions and the shape should be within the slide"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        private static PowerPoint.Shape GetBestFitShape(PowerPointSlide currentSlide, PowerPoint.Shape zoomShape)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PowerPoint.Shape zoomShapeCopy \u003d zoomShape.Duplicate()[1];"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            zoomShapeCopy.LockAspectRatio \u003d Office.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            if (zoomShape.Width \u003e zoomShape.Height)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomShapeCopy.Width \u003d zoomShape.Width;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomShapeCopy.Height \u003d PowerPointPresentation.Current.SlideHeight * zoomShapeCopy.Width / PowerPointPresentation.Current.SlideWidth;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomShapeCopy.Height \u003d zoomShape.Height;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomShapeCopy.Width \u003d PowerPointPresentation.Current.SlideWidth * zoomShapeCopy.Height / PowerPointPresentation.Current.SlideHeight;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            LegacyShapeUtil.CopyShapePosition(zoomShape, ref zoomShapeCopy);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            if (zoomShapeCopy.Width \u003e PowerPointPresentation.Current.SlideWidth)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomShapeCopy.Width \u003d PowerPointPresentation.Current.SlideWidth;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            if (zoomShapeCopy.Height \u003e PowerPointPresentation.Current.SlideHeight)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomShapeCopy.Height \u003d PowerPointPresentation.Current.SlideHeight;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            if (zoomShapeCopy.Left \u003c 0)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomShapeCopy.Left \u003d 0;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            if (zoomShapeCopy.Left + zoomShapeCopy.Width \u003e PowerPointPresentation.Current.SlideWidth)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomShapeCopy.Left \u003d PowerPointPresentation.Current.SlideWidth - zoomShapeCopy.Width;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            if (zoomShapeCopy.Top \u003c 0)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomShapeCopy.Top \u003d 0;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            if (zoomShapeCopy.Top + zoomShapeCopy.Height \u003e PowerPointPresentation.Current.SlideHeight)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "                zoomShapeCopy.Top \u003d PowerPointPresentation.Current.SlideHeight - zoomShapeCopy.Height;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            return zoomShapeCopy;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void MakeInvisible(IEnumerable\u003cPowerPoint.Shape\u003e zoomRectangles)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.Shape sh in zoomRectangles)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                sh.Visible \u003d Office.MsoTriState.msoFalse;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void MakeVisible(IEnumerable\u003cPowerPoint.Shape\u003e zoomRectangles)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            foreach (PowerPoint.Shape sh in zoomRectangles)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                sh.Visible \u003d Office.MsoTriState.msoTrue;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool IsSelectingShapes()"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            PowerPoint.Selection selection \u003d Globals.ThisAddIn.Application.ActiveWindow.Selection;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            return selection.Type \u003d\u003d PowerPoint.PpSelectionType.ppSelectionShapes \u0026\u0026 selection.ShapeRange.Count \u003e 0;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void DeleteExistingZoomToAreaSlides(PowerPointSlide currentSlide)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            if (currentSlide.Name.Contains(\"PPTLabsZoomToAreaSlide\") \u0026\u0026 currentSlide.Index !\u003d PowerPointPresentation.Current.SlideCount)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                PowerPointSlide nextSlide \u003d PowerPointPresentation.Current.Slides[currentSlide.Index];"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                while ((nextSlide.Name.Contains(\"PPTLabsMagnifyingSlide\") || (nextSlide.Name.Contains(\"PPTLabsMagnifiedSlide\"))"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                       || (nextSlide.Name.Contains(\"PPTLabsDeMagnifyingSlide\")) || (nextSlide.Name.Contains(\"PPTLabsMagnifiedPanSlide\"))"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                       || (nextSlide.Name.Contains(\"PPTLabsMagnifyingSingleSlide\"))) \u0026\u0026 nextSlide.Index \u003c PowerPointPresentation.Current.SlideCount)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "                    PowerPointSlide tempSlide \u003d nextSlide;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                    nextSlide \u003d PowerPointPresentation.Current.Slides[tempSlide.Index];"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                    tempSlide.Delete();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 1,
      "-": 249
    }
  },
  {
    "path": "PowerPointLabs/Test/FunctionalTest/ColorsLabTest.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.VisualStudio.TestTools.UnitTesting;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using Test.Util;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using TestInterface;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using Point \u003d System.Windows.Point;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "namespace Test.FunctionalTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    [TestClass]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public class ColorsLabTest : BaseFunctionalTest"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int OriginalSlideNo \u003d 3;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int FontColorChangeSlideNo \u003d 4;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int OutlineColorChangeSlideNo \u003d 5;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int FillColorChangeSlideNo \u003d 6;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int BrightnessAndSaturationChangeSlideNo \u003d 7;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int MonochromeColorChangeSlideNo \u003d 8;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int AnalogousAndComplementaryChangeSlideNo \u003d 9;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int TriadicAndTetradicChangeSlideNo \u003d 10;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const string TargetShape \u003d \"selectMe\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const string FontColorShape \u003d \"fontColor\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const string LineColorShape \u003d \"lineColor\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const string FillColorShape \u003d \"fillColor\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private List\u003cColor\u003e DefaultTestColors \u003d new List\u003cColor\u003e(new Color[] {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 0, 0),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(0, 255, 0),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(0, 0, 255),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 0),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 0, 255),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(0, 255, 255),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(0, 0, 0),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private List\u003cColor\u003e AllWhiteColorList \u003d new List\u003cColor\u003e(new Color[]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private List\u003cColor\u003e RecentColorsAfterFT \u003d new List\u003cColor\u003e(new Color[]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(98, 235, 187),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(118, 98, 235),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(98, 215, 235),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(235, 98, 146),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(0, 53, 153),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(102, 155, 255),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(153, 189, 255),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(0, 89, 255),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(98, 148, 235),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(98, 235, 118),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(235, 118, 98),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Color.FromArgb(255, 255, 255)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        });"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        protected override string GetTestingSlideName()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"ColorsLab\\\\ColorsLab.pptx\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        [TestMethod]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        [TestCategory(\"FT\")]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        public void FT_ColorsLabTest()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            // if not maximized, some elements in Colors pane may not be seen"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.MaximizeWindow();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            IColorsLabController colorsLab \u003d PplFeatures.ColorsLab;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            colorsLab.OpenPane();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Clear the recent colors panel before FT begins"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorsLab.ClearRecentColors();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestApplyFontColor(colorsLab);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestApplyLineColor(colorsLab);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestApplyFillColor(colorsLab);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestBrightnessAndSaturationSlider(colorsLab);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestMonochromeMatchingColors(colorsLab);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestAnalogousAndComplementaryColors(colorsLab);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestTriadicAndTetradicColors(colorsLab);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            TestFavoriteColors(colorsLab);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestRecentColors(colorsLab);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestApplyFontColor(IColorsLabController colorsLab)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide actualSlide \u003d PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Shape shape \u003d PpOperations.SelectShape(FontColorShape)[1];"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point startPt \u003d colorsLab.GetApplyTextButtonLocation();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point endPt \u003d GetShapeCenterPoint(shape);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectShape(TargetShape);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            DragAndDrop(startPt, endPt);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide expSlide \u003d PpOperations.SelectSlide(FontColorChangeSlideNo);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SlideUtil.IsSameLooking(expSlide, actualSlide);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestApplyLineColor(IColorsLabController colorsLab)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide actualSlide \u003d PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Shape shape \u003d PpOperations.SelectShape(LineColorShape)[1];"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point startPt \u003d colorsLab.GetApplyLineButtonLocation();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point endPt \u003d GetShapeCenterPoint(shape);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectShape(TargetShape);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            DragAndDrop(startPt, endPt);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide expSlide \u003d PpOperations.SelectSlide(OutlineColorChangeSlideNo);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SlideUtil.IsSameLooking(expSlide, actualSlide);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestApplyFillColor(IColorsLabController colorsLab)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide actualSlide \u003d PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Shape shape \u003d PpOperations.SelectShape(FillColorShape)[1];"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point startPt \u003d colorsLab.GetApplyFillButtonLocation();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point endPt \u003d GetShapeCenterPoint(shape);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectShape(TargetShape);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            DragAndDrop(startPt, endPt);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide expSlide \u003d PpOperations.SelectSlide(FillColorChangeSlideNo);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            SlideUtil.IsSameLooking(expSlide, actualSlide);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestBrightnessAndSaturationSlider(IColorsLabController colorsLab)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide actualSlide \u003d PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorsLab.SlideBrightnessSlider(120);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorsLab.SlideSaturationSlider(240);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point startPt \u003d colorsLab.GetApplyLineButtonLocation();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point endPt \u003d colorsLab.GetMainColorRectangleLocation();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectShape(TargetShape);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            DragAndDrop(startPt, endPt);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide expSlide \u003d PpOperations.SelectSlide(BrightnessAndSaturationChangeSlideNo);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SlideUtil.IsSameLooking(expSlide, actualSlide);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestMonochromeMatchingColors(IColorsLabController colorsLab)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide actualSlide \u003d PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Apply monochromeRectOne as Line"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorsLab.ClickMonochromeRect(1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point startPt \u003d colorsLab.GetApplyLineButtonLocation();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point endPt \u003d colorsLab.GetMainColorRectangleLocation();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectShape(TargetShape);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            DragAndDrop(startPt, endPt);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Apply monochromeRectTwo as Text"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorsLab.ClickMonochromeRect(2);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            startPt \u003d colorsLab.GetApplyTextButtonLocation();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            endPt \u003d colorsLab.GetMainColorRectangleLocation();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectShape(TargetShape);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            DragAndDrop(startPt, endPt);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Apply monochromeRectSix as Fill"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorsLab.ClickMonochromeRect(6);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            startPt \u003d colorsLab.GetApplyFillButtonLocation();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            endPt \u003d colorsLab.GetMainColorRectangleLocation();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectShape(TargetShape);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            DragAndDrop(startPt, endPt);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide expSlide \u003d PpOperations.SelectSlide(MonochromeColorChangeSlideNo);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            SlideUtil.IsSameLooking(expSlide, actualSlide);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestAnalogousAndComplementaryColors(IColorsLabController colorsLab)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide actualSlide \u003d PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Eyedrop the font color shape"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Shape shape \u003d PpOperations.SelectShape(FontColorShape)[1];"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point startPt \u003d colorsLab.GetEyeDropperButtonLocation();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point endPt \u003d GetShapeCenterPoint(shape);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            DragAndDrop(startPt, endPt);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Apply analagousRectOne as Text"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorsLab.ClickAnalogousRect(1);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            startPt \u003d colorsLab.GetApplyTextButtonLocation();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            endPt \u003d colorsLab.GetMainColorRectangleLocation();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectShape(TargetShape);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            DragAndDrop(startPt, endPt);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Apply complementaryRectThree as Line"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorsLab.ClickComplementaryRect(3);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            startPt \u003d colorsLab.GetApplyLineButtonLocation();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            endPt \u003d colorsLab.GetMainColorRectangleLocation();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectShape(TargetShape);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            DragAndDrop(startPt, endPt);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide expSlide \u003d PpOperations.SelectSlide(AnalogousAndComplementaryChangeSlideNo);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SlideUtil.IsSameLooking(expSlide, actualSlide);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestTriadicAndTetradicColors(IColorsLabController colorsLab)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide actualSlide \u003d PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Eyedrop the outline color shape"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Shape shape \u003d PpOperations.SelectShape(LineColorShape)[1];"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point startPt \u003d colorsLab.GetEyeDropperButtonLocation();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Point endPt \u003d GetShapeCenterPoint(shape);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            DragAndDrop(startPt, endPt);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Apply triadicRectThree as Fill"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorsLab.ClickTriadicRect(3);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            startPt \u003d colorsLab.GetApplyFillButtonLocation();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            endPt \u003d colorsLab.GetMainColorRectangleLocation();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectShape(TargetShape);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            DragAndDrop(startPt, endPt);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Apply tetradicRectThree as Line"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorsLab.ClickTetradicRect(3);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            startPt \u003d colorsLab.GetApplyLineButtonLocation();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            endPt \u003d colorsLab.GetMainColorRectangleLocation();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectShape(TargetShape);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            DragAndDrop(startPt, endPt);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide expSlide \u003d PpOperations.SelectSlide(TriadicAndTetradicChangeSlideNo);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "            SlideUtil.IsSameLooking(expSlide, actualSlide);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestFavoriteColors(IColorsLabController colorsLab)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Clear the favorite colors panel"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorsLab.ClearFavoriteColors();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            IList\u003cColor\u003e currentFavoritePanel \u003d colorsLab.GetCurrentFavoritePanel();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            AssertEqual(AllWhiteColorList, currentFavoritePanel);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Load the test case"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorsLab.LoadFavoriteColors("
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                PathUtil.GetDocTestPresentationPath(\"ColorsLab\\\\FavoriteColorsTest.thm\"));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            currentFavoritePanel \u003d colorsLab.GetCurrentFavoritePanel();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            AssertEqual(DefaultTestColors, currentFavoritePanel);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // Clear panel"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            colorsLab.ClearFavoriteColors();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            currentFavoritePanel \u003d colorsLab.GetCurrentFavoritePanel();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            AssertEqual(AllWhiteColorList, currentFavoritePanel);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestRecentColors(IColorsLabController colorsLab)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            // After all the calls in the earlier tests, recent colors panel should be populated"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            IList\u003cColor\u003e currentRecentPanel \u003d colorsLab.GetCurrentRecentPanel();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            AssertEqual(RecentColorsAfterFT, currentRecentPanel);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        # region Helper methods"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        // mouse drag \u0026 drop from Control to Shape to apply color"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void ApplyColor(System.Windows.Controls.Control from, Shape to)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "            Point startPt \u003d from.PointToScreen(new Point(from.Width/2, from.Height/2));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            Point endPt \u003d new Point("
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "                PpOperations.PointsToScreenPixelsX(to.Left + to.Width/2),"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "                PpOperations.PointsToScreenPixelsY(to.Top + to.Height/2));"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            DragAndDrop(startPt, endPt);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private Point GetShapeCenterPoint(Shape shape)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return new Point("
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                PpOperations.PointsToScreenPixelsX(shape.Left + shape.Width / 2),"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                PpOperations.PointsToScreenPixelsY(shape.Top + shape.Height / 2));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        private void DragAndDrop(Point startPt, Point endPt)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            MouseUtil.SendMouseDown((int)startPt.X, (int)startPt.Y);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            MouseUtil.SendMouseUp((int)endPt.X, (int)endPt.Y);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private static void AssertEqual(IList\u003cColor\u003e expectedList, IList\u003cColor\u003e actualList)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            for (int i \u003d 0; i \u003c expectedList.Count; i++)"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                AssertEqual(expectedList[i], actualList[i]);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private static void AssertEqual(Color expectedColor, Color actualColor)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            // dont assert Alpha"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Assert.IsTrue(IsAlmostSame(expectedColor.R, actualColor.R), \"diff color R, expected {0}, actual {1}\", expectedColor.R, actualColor.R);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Assert.IsTrue(IsAlmostSame(expectedColor.G, actualColor.G),\"diff color G, expected {0}, actual {1}\", expectedColor.G, actualColor.G);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Assert.IsTrue(IsAlmostSame(expectedColor.B, actualColor.B), \"diff color B, expected {0}, actual {1}\", expectedColor.B, actualColor.B);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        private static bool IsAlmostSame(byte a, byte b)"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            return Math.Abs(a - b) \u003c 3;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        # endregion"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 229,
      "YuPeiHenry": 3,
      "-": 102
    }
  },
  {
    "path": "PowerPointLabs/Test/FunctionalTest/ShapesLabTest.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System.Windows;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.VisualStudio.TestTools.UnitTesting;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "using Test.Util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "using TestInterface;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "namespace Test.FunctionalTest"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    [TestClass]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public class ShapesLabTest : BaseFunctionalTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int SaveShapesShapesSlide \u003d 3;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int SaveShapesTestSlide \u003d 4;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int SaveShapesExpSlide \u003d 5;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int AddShapesShapesSlide \u003d 6;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int AddShapesTestSlide \u003d 7;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int AddShapesExpSlide \u003d 8;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int AddShapesPlaceholderSlide \u003d 9;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        //Check clipboard restored"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int SaveShapesClipboardRestoredActualSlide \u003d 11;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int SaveShapesClipboardRestoredTestSlide \u003d 12;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int SaveShapesClipboardRestoredExpSlide \u003d 13;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int AddShapesClipboardRestoredActualSlide \u003d 14;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int AddShapesClipboardRestoredTestSlide \u003d 15;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int AddShapesClipboardRestoredExpSlide \u003d 16;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        protected override string GetTestingSlideName()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"ShapesLab\\\\ShapesLab.pptx\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        //use new powerpoint instance to refresh"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        //ShapesLabConfig setting for FT"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        //every time, shapes lab in FT will use diff"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        //shapesRootFolder \u0026 default category"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        protected override bool IsUseNewPpInstance()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        [TestMethod]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        [TestCategory(\"FT\")]"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        public void FT_ShapesLabTest()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.MaximizeWindow();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            IShapesLabController shapesLab \u003d PplFeatures.ShapesLab;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            shapesLab.OpenPane();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            TestSaveShapesToShapesLab(shapesLab, SaveShapesShapesSlide, SaveShapesTestSlide, SaveShapesExpSlide);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            TestImportLibraryAndShape(shapesLab);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            TestSaveShapesToShapesLabWithAddShapesButton(shapesLab, AddShapesShapesSlide, AddShapesTestSlide, AddShapesExpSlide);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            TestSavePlaceholderToShapesLabWithAddShapesButton(shapesLab, AddShapesPlaceholderSlide);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            IsClipboardRestoredAfterSaveShape(shapesLab, SaveShapesClipboardRestoredActualSlide, SaveShapesClipboardRestoredTestSlide, SaveShapesClipboardRestoredExpSlide);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            IsClipboardRestoredAfterAddShape(shapesLab, AddShapesClipboardRestoredActualSlide, AddShapesClipboardRestoredTestSlide,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                AddShapesClipboardRestoredExpSlide);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestImportLibraryAndShape(IShapesLabController shapesLab)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            shapesLab.ImportLibrary("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                PathUtil.GetDocTestPresentationPath(\"ShapesLab\\\\LibraryToImport.pptlabsshapes\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            shapesLab.ImportLibrary("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                PathUtil.GetDocTestPresentationPath(\"ShapesLab\\\\ShapeToImport.pptlabsshape\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            System.Collections.Generic.List\u003cISlideData\u003e actualShapeDataAfterImport \u003d shapesLab.FetchShapeGalleryPresentationData();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            System.Collections.Generic.List\u003cISlideData\u003e expShapeDataAfterImport \u003d PpOperations.FetchPresentationData("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                PathUtil.GetDocTestPresentationPath(ExpectedShapeGalleryFileName()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            PresentationUtil.AssertEqual(expShapeDataAfterImport, actualShapeDataAfterImport);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        private string ExpectedShapeGalleryFileName()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            if (PpOperations.IsOffice2010())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                return \"ShapesLab\\\\ExpShapeGalleryAftImportNonWide.pptx\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                return \"ShapesLab\\\\ExpShapeGalleryAftImport.pptx\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SaveShapesToShapesLab(IShapesLabController shapesLab, int shapesSlideNum, int testSlideNum)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(shapesSlideNum);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShapesByPrefix(\"selectMe\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ExpectAddShapeButtonEnabled(shapesLab);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            // save shapes"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            shapesLab.SaveSelectedShapes();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.Slide actualSlide \u003d PpOperations.SelectSlide(testSlideNum);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            AddShapesToSlideFromShapesLab(shapesLab, \"selectMe1\", \"Group selectMe1\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestSaveShapesToShapesLab(IShapesLabController shapesLab, int shapesSlideNum, int testSlideNum, int expSlideNum)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            SaveShapesToShapesLab(shapesLab, shapesSlideNum, testSlideNum);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.Slide actualSlide \u003d PpOperations.SelectSlide(testSlideNum);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.Slide expSlide \u003d PpOperations.SelectSlide(expSlideNum);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            SlideUtil.IsSameLooking(expSlide, actualSlide);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            SlideUtil.IsSameAnimations(expSlide, actualSlide);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        private void SaveShapesToShapesLabWithAddShapesButton(IShapesLabController shapesLab, int shapesSlideNum, int testSlideNum)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(shapesSlideNum);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShapesByPrefix(\"selectMeNow\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ExpectAddShapeButtonEnabled(shapesLab);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MessageBoxUtil.ExpectMessageBoxWillNotPopUp("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                            ShapesLabText.ErrorDialogTitle, ShapesLabText.ErrorAddSelectionInvalid,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                            shapesLab.ClickAddShapeButton);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.Slide actualSlide \u003d PpOperations.SelectSlide(testSlideNum);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            AddShapesToSlideFromShapesLab(shapesLab, \"selectMeNow1\", \"Group selectMeNow1\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestSaveShapesToShapesLabWithAddShapesButton(IShapesLabController shapesLab, int shapesSlideNum, int testSlideNum, int expSlideNum)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            SaveShapesToShapesLabWithAddShapesButton(shapesLab, shapesSlideNum, testSlideNum);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.Slide expSlide \u003d PpOperations.SelectSlide(expSlideNum);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.Slide actualSlide \u003d PpOperations.SelectSlide(testSlideNum);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            SlideUtil.IsSameLooking(expSlide, actualSlide);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            SlideUtil.IsSameAnimations(expSlide, actualSlide);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void TestSavePlaceholderToShapesLabWithAddShapesButton(IShapesLabController shapesLab, int shapesSlideNum)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            PpOperations.SelectSlide(shapesSlideNum);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ExpectAddShapeButtonDisabled(shapesLab);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            PpOperations.SelectShapesByPrefix(\"Placeholder\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ExpectAddShapeButtonDisabled(shapesLab);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MessageBoxUtil.ExpectMessageBoxWillPopUp("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                            ShapesLabText.ErrorDialogTitle, ShapesLabText.ErrorAddSelectionInvalid,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                            shapesLab.ClickAddShapeButton);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void AddShapesToSlideFromShapesLab(IShapesLabController shapesLab, string shapeName, string expectedShapePrefix)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Point point \u003d shapesLab.GetShapeForClicking(shapeName);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            // Add shapes from Shapes Lab to slide by double clicking"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            DoubleClick(point);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.ShapeRange shapes \u003d PpOperations.SelectShapesByPrefix(expectedShapePrefix);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            Assert.IsTrue(shapes.Count \u003e 0, \"Failed to add shapes from Shapes Lab.\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void DoubleClick(Point point)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            MouseUtil.SendMouseDoubleClick((int) point.X, (int) point.Y);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        private void IsClipboardRestoredAfterSaveShape(IShapesLabController shapesLab, int actualSlideNum, int testSlideNum, int expSlideNum)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            CheckIfClipboardIsRestored(() \u003d\u003e SaveShapesToShapesLab(shapesLab, actualSlideNum, testSlideNum),"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                actualSlideNum, \"copyMe\", expSlideNum, \"Expected\", \"compareMe\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        private void IsClipboardRestoredAfterAddShape(IShapesLabController shapesLab, int actualSlideNum, int testSlideNum, int expSlideNum)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            CheckIfClipboardIsRestored(() \u003d\u003e SaveShapesToShapesLabWithAddShapesButton(shapesLab, actualSlideNum, testSlideNum),"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                actualSlideNum, \"copyMe\", expSlideNum, \"Expected\", \"compareMe\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void ExpectAddShapeButtonEnabled(IShapesLabController shapesLab)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ThreadUtil.WaitFor(1000);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Assert.IsTrue(shapesLab.GetAddShapeButtonStatus());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void ExpectAddShapeButtonDisabled(IShapesLabController shapesLab)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ThreadUtil.WaitFor(1000);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Assert.IsFalse(shapesLab.GetAddShapeButtonStatus());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 15,
      "YuPeiHenry": 27,
      "-": 143
    }
  },
  {
    "path": "PowerPointLabs/Test/FunctionalTest/SyncLabTest.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Threading.Tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.VisualStudio.TestTools.UnitTesting;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "using Test.Util;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "using TestInterface;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "namespace Test.FunctionalTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    [TestClass]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public class SyncLabTest : BaseFunctionalTest"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int MaxRetry \u003d 5;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int CategoryIndexPosition \u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int FormatItemIndexPosition \u003d 1;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int OriginalSyncGroupToShapeSlideNo \u003d 36;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int ExpectedSyncGroupToShapeSlideNo \u003d 37;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int OriginalSyncShapeToGroupSlideNo \u003d 38;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int ExpectedSyncShapeToGroupSlideNo \u003d 39;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int HorizontalPlaceHolderSlideNo \u003d 41;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int CenterPlaceHolderSlideNo \u003d 42;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int VerticalPlaceHolderSlideNo \u003d 43;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int TablePlaceHolderSlideNo \u003d 44;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int ChartPlaceHolderSlideNo \u003d 45;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int PicturePlaceHolderSlideNo \u003d 46;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int SmartArtSlideNo \u003d 47;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int CustomPerspectiveShadowSlideNo \u003d 48;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string Line \u003d \"Straight Connector 2\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string RotatedArrow \u003d \"Right Arrow 5\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string Group \u003d \"Group 1\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string Oval \u003d \"Oval 4\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string CopyFromShape \u003d \"CopyFrom\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string UnrotatedRectangle \u003d \"Rectangle 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string CustomPerspectiveShadow \u003d \"Custom Perspective Shadow\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string HorizontalTitle \u003d \"Title 1\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string HorizontalBody \u003d \"Content Placeholder 2\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string CenterTitle\u003d \"Title 1\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string Subtitle\u003d \"Subtitle 2\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string VerticalTitle \u003d \"Title 1\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string VerticalBody \u003d \"Content Placeholder 2\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string Table \u003d \"Content Placeholder 3\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string Chart \u003d \"Content Placeholder 5\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string Picture \u003d \"Content Placeholder 4\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string SmartArt \u003d \"SmartArt 1\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        protected override string GetTestingSlideName()"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"SyncLab\\\\SyncLab.pptx\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        [TestMethod]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        [TestCategory(\"FT\")]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        public void FT_SyncLabTest()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            ISyncLabController syncLab \u003d PplFeatures.SyncLab;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            syncLab.OpenPane();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            TestSync(syncLab);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            TestErrorDialogs(syncLab);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            TestCopySupportedPlaceHolders(syncLab);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            TestCopyUnsupportedPlaceHolders(syncLab);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            TestCopyCustomPerspectiveShadow(syncLab);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestCopySupportedPlaceHolders(ISyncLabController syncLab)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            // Ensure that one style can be copied from placeholder objects."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            // Testing copying of all valid placeholder styles is done in unit tests."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(HorizontalPlaceHolderSlideNo);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShape(HorizontalBody);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            CopyStyle(syncLab, 1, 0);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShape(HorizontalTitle);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            CopyStyle(syncLab, 1, 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(VerticalPlaceHolderSlideNo);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShape(VerticalBody);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            CopyStyle(syncLab, 1, 0);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShape(VerticalTitle);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            CopyStyle(syncLab, 1, 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(CenterPlaceHolderSlideNo);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShape(Subtitle);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            CopyStyle(syncLab, 1, 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShape(CenterTitle);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            CopyStyle(syncLab, 1, 0);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(PicturePlaceHolderSlideNo);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShape(Picture);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            CopyStyle(syncLab, 1, 0);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestCopyUnsupportedPlaceHolders(ISyncLabController syncLab)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(ChartPlaceHolderSlideNo);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShape(Chart);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            MessageBoxUtil.ExpectMessageBoxWillPopUp(SyncLabText.ErrorDialogTitle,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncLabText.ErrorCopySelectionInvalid, syncLab.Copy, \"Ok\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(TablePlaceHolderSlideNo);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShape(Table);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            MessageBoxUtil.ExpectMessageBoxWillPopUp(SyncLabText.ErrorDialogTitle,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncLabText.ErrorCopySelectionInvalid, syncLab.Copy, \"Ok\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestCopyCustomPerspectiveShadow(ISyncLabController syncLab)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(CustomPerspectiveShadowSlideNo);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShape(CustomPerspectiveShadow);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            // shadow item"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            int categoryIndex \u003d 3;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            int itemIndex \u003d 0;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            new Task(() \u003d\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                ThreadUtil.WaitFor(1000);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                syncLab.DialogSelectItem(categoryIndex, itemIndex);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                MessageBoxUtil.ExpectMessageBoxWillPopUp(SyncLabText.WarningDialogTitle,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    SyncLabText.WarningSyncPerspectiveShadow, syncLab.DialogClickOk, \"Ok\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            }).Start();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            syncLab.Copy();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestErrorDialogs(ISyncLabController syncLab)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(OriginalSyncGroupToShapeSlideNo);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            // no selection copy"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ExpectCopyButtonDisabled(syncLab);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            MessageBoxUtil.ExpectMessageBoxWillPopUp(SyncLabText.ErrorDialogTitle,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncLabText.ErrorCopySelectionInvalid, syncLab.Copy, \"Ok\");"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            // 2 item selected copy"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cString\u003e shapes \u003d new List\u003cstring\u003e { Line, RotatedArrow };"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShapes(shapes);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ExpectCopyButtonEnabled(syncLab);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            MessageBoxUtil.ExpectMessageBoxWillPopUp(SyncLabText.ErrorDialogTitle,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncLabText.ErrorCopySelectionInvalid, syncLab.Copy, \"Ok\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            // group selected copy"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShape(Group);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ExpectCopyButtonEnabled(syncLab);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            MessageBoxUtil.ExpectMessageBoxWillPopUp(SyncLabText.ErrorDialogTitle,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncLabText.ErrorCopySelectionInvalid, syncLab.Copy, \"Ok\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            // copy blank item for the paste error dialog test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShape(Line);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ExpectCopyButtonEnabled(syncLab);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            CopyStyle(syncLab);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            // no selection sync"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(ExpectedSyncShapeToGroupSlideNo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ExpectCopyButtonDisabled(syncLab);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            MessageBoxUtil.ExpectMessageBoxWillPopUp(SyncLabText.ErrorDialogTitle,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncLabText.ErrorPasteSelectionInvalid, () \u003d\u003e syncLab.Sync(0), \"Ok\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            // smart art"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(SmartArtSlideNo);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShape(SmartArt);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ExpectCopyButtonEnabled(syncLab);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            MessageBoxUtil.ExpectMessageBoxWillPopUp(SyncLabText.ErrorDialogTitle,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                SyncLabText.ErrorSmartArtUnsupported, syncLab.Copy, \"Ok\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestSync(ISyncLabController syncLab)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            Sync(syncLab, OriginalSyncGroupToShapeSlideNo, ExpectedSyncGroupToShapeSlideNo, CopyFromShape, RotatedArrow, 1, 0);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            Sync(syncLab, OriginalSyncShapeToGroupSlideNo, ExpectedSyncShapeToGroupSlideNo, Line, Oval, 0, 4);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        private void Sync(ISyncLabController syncLab, int originalSlide, int expectedSlide,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                string fromShape, string toShape, int categoryPosition, int itemPosition)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(originalSlide);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShape(fromShape);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            CopyStyle(syncLab, categoryPosition, itemPosition);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShape(toShape);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            syncLab.Sync(0);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            IsSame(originalSlide, expectedSlide, toShape);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        private void IsSame(int originalSlideNo, int expectedSlideNo, string shapeToCheck)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            Slide actualSlide \u003d PpOperations.SelectSlide(originalSlideNo);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape actualShape \u003d PpOperations.SelectShape(shapeToCheck)[1];"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            Slide expectedSlide \u003d PpOperations.SelectSlide(expectedSlideNo);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            Shape expectedShape \u003d PpOperations.SelectShape(shapeToCheck)[1];"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "            SlideUtil.IsSameLooking(expectedSlide, actualSlide);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            SlideUtil.IsSameShape(expectedShape, actualShape);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        private void CopyStyle(ISyncLabController syncLab)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            new Task(() \u003d\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "                ThreadUtil.WaitFor(1000);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                syncLab.DialogClickOk();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            }).Start();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            syncLab.Copy();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        private void CopyStyle(ISyncLabController syncLab, int categoryPosition, int itemPosition)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            int[,] dialogItems \u003d new int[,] { { categoryPosition, itemPosition } };"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            CopyStyle(syncLab, dialogItems);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        private void CopyStyle(ISyncLabController syncLab, int[,] dialogItems)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            new Task(() \u003d\u003e"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                ThreadUtil.WaitFor(1000);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                for (int i \u003d 0; i \u003c dialogItems.GetLength(0); i++)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                    syncLab.DialogSelectItem(dialogItems[i, CategoryIndexPosition], dialogItems[i, FormatItemIndexPosition]);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                syncLab.DialogClickOk();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            }).Start();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            syncLab.Copy();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void ExpectCopyButtonEnabled(ISyncLabController syncLab)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ThreadUtil.WaitFor(500);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Assert.IsTrue(syncLab.GetCopyButtonEnabledStatus());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void ExpectCopyButtonDisabled(ISyncLabController syncLab)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ThreadUtil.WaitFor(500);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            Assert.IsFalse(syncLab.GetCopyButtonEnabledStatus());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 18,
      "-": 233
    }
  },
  {
    "path": "PowerPointLabs/Test/FunctionalTest/TimerLabTest.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System.Collections.Generic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.VisualStudio.TestTools.UnitTesting;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using Test.Util;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "using TestInterface;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "namespace Test.FunctionalTest"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    [TestClass]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public class TimerLabTest : BaseFunctionalTest"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        // Original Timer Lab"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int OriginalSlideNo \u003d 4;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int InitialTimerSlideNo \u003d 5;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int ChangeWidthSlideNo \u003d 6;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int ChangeHeightSlideNo \u003d 7;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int RecreateBodySlideNo \u003d 8;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int ChangeLineColorAndRecreateTimeMarkerSlideNo \u003d 9;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int ChangeDurationSlideNo \u003d 10;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int ChangeTextColorAndRecreateSliderSlideNo \u003d 11;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int ChangeDurationAndWidthSlideNo \u003d 12;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        private const int DurationInvalidSlideNo \u003d 13;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CountdownCheckedSlideNo \u003d 14;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int ChangeDurationWithCountdownSlideNo \u003d 15;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CountdownAndNonMultipleDenominationDurationSlideNo \u003d 16;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private const int ProgressBarCheckedSlideNo \u003d 17;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        // Timer Lab Progress Bar"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private const int PbOriginalSlideNo \u003d 20;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private const int PbInitialTimerSlideNo \u003d 21;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private const int PbChangeWidthSlideNo \u003d 22;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private const int PbChangeHeightSlideNo \u003d 23;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private const int PbRecreateBodySlideNo \u003d 24;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private const int PbChangeLineColorAndRecreateTimeMarkerSlideNo \u003d 25;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private const int PbChangeDurationSlideNo \u003d 26;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private const int PbChangeTextColorAndRecreateSliderSlideNo \u003d 27;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private const int PbChangeDurationAndWidthSlideNo \u003d 28;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private const int PbDurationInvalidSlideNo \u003d 29;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private const int PbCountdownCheckedSlideNo \u003d 30;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private const int PbChangeDurationWithCountdownSlideNo \u003d 31;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private const int PbCountdownAndNonMultipleDenominationDurationSlideNo \u003d 32;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private const int PbProgressBarUncheckedSlideNo \u003d 33;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string TimerBody \u003d \"TimerBody\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string TimerLineMarkerGroup \u003d \"TimerLineMarkerGroup\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string TimerTimeMarkerGroup \u003d \"TimerTimeMarkerGroup\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string TimerSliderBody \u003d \"TimerSliderBody\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        private const string TimerSliderHead \u003d \"TimerSliderHead\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private const string ProgressBar \u003d \"ProgressBar\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        protected override string GetTestingSlideName()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"TimerLab\\\\TimerLab.pptx\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        [TestMethod]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        [TestCategory(\"FT\")]"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        public void FT_TimerLabTest()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            ITimerLabController timerLab \u003d PplFeatures.TimerLab;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            timerLab.OpenPane();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // Original Timer Lab"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            TestCreateInitialTimer(timerLab);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            TestEditTimerWidth(timerLab);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            TestEditTimerHeight(timerLab);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            TestDeleteTimerBody(timerLab);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            TestEditLineColorAndDeleteTimeMarker(timerLab);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            TestEditTimerDuration(timerLab);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            TestEditTextColorAndDeleteSlider(timerLab);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            TestEditDurationAndWidth(timerLab);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            TestInvalidDuration(timerLab);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestEditCountdownState(timerLab);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestEditDurationWithCountdownTimer(timerLab);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestNonMultipleDenominationDurationWithCountdownTimer(timerLab);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            TestEditProgressBarState(timerLab);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            RevertSettingsToOriginal(timerLab);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // Timer Lab Progress Bar"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            TestCreateInitialTimerPb(timerLab);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            TestEditTimerWidthPb(timerLab);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            TestEditTimerHeightPb(timerLab);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            TestDeleteTimerBodyPb(timerLab);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            TestEditLineColorAndDeleteTimeMarkerPb(timerLab);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            TestEditTimerDurationPb(timerLab);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            TestEditTextColorAndDeleteProgressBarPb(timerLab);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            TestEditDurationAndWidthPb(timerLab);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            TestInvalidDurationPb(timerLab);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            TestEditCountdownStatePb(timerLab);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            TestEditDurationWithCountdownTimerPb(timerLab);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            TestNonMultipleDenominationDurationWithCountdownTimerPb(timerLab);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            TestEditProgressBarStatePb(timerLab);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestCreateInitialTimer(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            timerLab.SetDurationTextBoxValue(1.05);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetProgressBarCheckBoxState(false);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            timerLab.SetCountdownCheckBoxState(false);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            timerLab.ClickCreateButton();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            AssertIsSame(OriginalSlideNo, InitialTimerSlideNo);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestEditTimerWidth(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            timerLab.SetWidthTextBoxValue(250);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            AssertIsSame(OriginalSlideNo, ChangeWidthSlideNo);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestEditTimerHeight(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            timerLab.SetHeightTextBoxValue(400);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            AssertIsSame(OriginalSlideNo, ChangeHeightSlideNo);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestDeleteTimerBody(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange shapes \u003d PpOperations.SelectShape(TimerBody);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            shapes.Delete();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            MessageBoxUtil.ExpectMessageBoxWillPopUp(\"Error\","
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "               \"Only one timer allowed per slide.\", timerLab.ClickCreateButton, \"Ok\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            AssertIsSame(OriginalSlideNo, RecreateBodySlideNo);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestEditLineColorAndDeleteTimeMarker(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(ChangeLineColorAndRecreateTimeMarkerSlideNo);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            int expectedColor \u003d PpOperations.SelectShape(TimerLineMarkerGroup)[1].Line.ForeColor.RGB;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange lineMarkerGroup \u003d PpOperations.SelectShape(TimerLineMarkerGroup);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            lineMarkerGroup.Line.ForeColor.RGB \u003d expectedColor;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange timeMarkerGroup \u003d PpOperations.SelectShape(TimerTimeMarkerGroup);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            timeMarkerGroup.Delete();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            MessageBoxUtil.ExpectMessageBoxWillPopUp(\"Error\","
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "              \"Only one timer allowed per slide.\", timerLab.ClickCreateButton, \"Ok\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            AssertIsSame(OriginalSlideNo, ChangeLineColorAndRecreateTimeMarkerSlideNo);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestEditTimerDuration(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            timerLab.SetDurationTextBoxValue(0.07);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            AssertIsSame(OriginalSlideNo, ChangeDurationSlideNo);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestEditTextColorAndDeleteSlider(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(ChangeTextColorAndRecreateSliderSlideNo);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            int expectedColor \u003d PpOperations.SelectShape(TimerTimeMarkerGroup)[1].TextFrame.TextRange.Font.Color.RGB;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange timeMarkerGroup \u003d PpOperations.SelectShape(TimerTimeMarkerGroup);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            timeMarkerGroup.TextFrame.TextRange.Font.Color.RGB \u003d expectedColor;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cstring\u003e sliderComponentNames \u003d new List\u003cstring\u003e { TimerSliderHead, TimerSliderBody };"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            ShapeRange sliderComponents \u003d PpOperations.SelectShapes(sliderComponentNames);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            sliderComponents.Delete();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            MessageBoxUtil.ExpectMessageBoxWillPopUp(\"Error\","
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "              \"Only one timer allowed per slide.\", timerLab.ClickCreateButton, \"Ok\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            AssertIsSame(OriginalSlideNo, ChangeTextColorAndRecreateSliderSlideNo);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestEditDurationAndWidth(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            timerLab.SetDurationTextBoxValue(4.56);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            timerLab.SetWidthSliderValue(654);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            AssertIsSame(OriginalSlideNo, ChangeDurationAndWidthSlideNo);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestInvalidDuration(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            timerLab.SetDurationTextBoxValue(5.67);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            AssertIsSame(OriginalSlideNo, DurationInvalidSlideNo);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestEditCountdownState(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            timerLab.SetCountdownCheckBoxState(true);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            AssertIsSame(OriginalSlideNo, CountdownCheckedSlideNo);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestEditDurationWithCountdownTimer(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            timerLab.SetDurationTextBoxValue(0.30);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            AssertIsSame(OriginalSlideNo, ChangeDurationWithCountdownSlideNo);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestNonMultipleDenominationDurationWithCountdownTimer(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            timerLab.SetDurationTextBoxValue(4.16);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            AssertIsSame(OriginalSlideNo, CountdownAndNonMultipleDenominationDurationSlideNo);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void TestEditProgressBarState(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PpOperations.SelectSlide(OriginalSlideNo);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetProgressBarCheckBoxState(true);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AssertIsSame(OriginalSlideNo, ProgressBarCheckedSlideNo);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void TestCreateInitialTimerPb(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PpOperations.SelectSlide(PbOriginalSlideNo);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetProgressBarCheckBoxState(true);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetDurationTextBoxValue(1.05);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.ClickCreateButton();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AssertIsSame(PbOriginalSlideNo, PbInitialTimerSlideNo);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void TestEditTimerWidthPb(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PpOperations.SelectSlide(PbOriginalSlideNo);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetWidthTextBoxValue(250);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AssertIsSame(PbOriginalSlideNo, PbChangeWidthSlideNo);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void TestEditTimerHeightPb(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PpOperations.SelectSlide(PbOriginalSlideNo);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetHeightTextBoxValue(400);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AssertIsSame(PbOriginalSlideNo, PbChangeHeightSlideNo);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void TestDeleteTimerBodyPb(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PpOperations.SelectSlide(PbOriginalSlideNo);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ShapeRange shapes \u003d PpOperations.SelectShape(TimerBody);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            shapes.Delete();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            MessageBoxUtil.ExpectMessageBoxWillPopUp(\"Error\","
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "               \"Only one timer allowed per slide.\", timerLab.ClickCreateButton, \"Ok\");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AssertIsSame(PbOriginalSlideNo, PbRecreateBodySlideNo);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void TestEditLineColorAndDeleteTimeMarkerPb(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PpOperations.SelectSlide(ChangeLineColorAndRecreateTimeMarkerSlideNo);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            int expectedColor \u003d PpOperations.SelectShape(TimerLineMarkerGroup)[1].Line.ForeColor.RGB;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PpOperations.SelectSlide(PbOriginalSlideNo);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ShapeRange lineMarkerGroup \u003d PpOperations.SelectShape(TimerLineMarkerGroup);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            lineMarkerGroup.Line.ForeColor.RGB \u003d expectedColor;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ShapeRange timeMarkerGroup \u003d PpOperations.SelectShape(TimerTimeMarkerGroup);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timeMarkerGroup.Delete();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            MessageBoxUtil.ExpectMessageBoxWillPopUp(\"Error\","
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "              \"Only one timer allowed per slide.\", timerLab.ClickCreateButton, \"Ok\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AssertIsSame(PbOriginalSlideNo, PbChangeLineColorAndRecreateTimeMarkerSlideNo);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void TestEditTimerDurationPb(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PpOperations.SelectSlide(PbOriginalSlideNo);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetDurationTextBoxValue(0.07);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AssertIsSame(PbOriginalSlideNo, PbChangeDurationSlideNo);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void TestEditTextColorAndDeleteProgressBarPb(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PpOperations.SelectSlide(ChangeTextColorAndRecreateSliderSlideNo);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            int expectedColor \u003d PpOperations.SelectShape(TimerTimeMarkerGroup)[1].TextFrame.TextRange.Font.Color.RGB;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PpOperations.SelectSlide(PbOriginalSlideNo);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ShapeRange timeMarkerGroup \u003d PpOperations.SelectShape(TimerTimeMarkerGroup);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timeMarkerGroup.TextFrame.TextRange.Font.Color.RGB \u003d expectedColor;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            ShapeRange progressBar \u003d PpOperations.SelectShape(ProgressBar);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            progressBar.Delete();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            MessageBoxUtil.ExpectMessageBoxWillPopUp(\"Error\","
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "              \"Only one timer allowed per slide.\", timerLab.ClickCreateButton, \"Ok\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AssertIsSame(PbOriginalSlideNo, PbChangeTextColorAndRecreateSliderSlideNo);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void TestEditDurationAndWidthPb(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PpOperations.SelectSlide(PbOriginalSlideNo);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetDurationTextBoxValue(4.56);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetWidthSliderValue(654);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AssertIsSame(PbOriginalSlideNo, PbChangeDurationAndWidthSlideNo);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void TestInvalidDurationPb(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PpOperations.SelectSlide(PbOriginalSlideNo);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetDurationTextBoxValue(5.67);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AssertIsSame(PbOriginalSlideNo, PbDurationInvalidSlideNo);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void TestEditCountdownStatePb(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PpOperations.SelectSlide(PbOriginalSlideNo);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetCountdownCheckBoxState(true);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AssertIsSame(PbOriginalSlideNo, PbCountdownCheckedSlideNo);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void TestEditDurationWithCountdownTimerPb(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PpOperations.SelectSlide(PbOriginalSlideNo);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetDurationTextBoxValue(0.30);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AssertIsSame(PbOriginalSlideNo, PbChangeDurationWithCountdownSlideNo);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void TestNonMultipleDenominationDurationWithCountdownTimerPb(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PpOperations.SelectSlide(PbOriginalSlideNo);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetDurationTextBoxValue(4.16);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AssertIsSame(PbOriginalSlideNo, PbCountdownAndNonMultipleDenominationDurationSlideNo);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void TestEditProgressBarStatePb(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            PpOperations.SelectSlide(PbOriginalSlideNo);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetProgressBarCheckBoxState(false);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            AssertIsSame(PbOriginalSlideNo, PbProgressBarUncheckedSlideNo);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        private void RevertSettingsToOriginal(ITimerLabController timerLab)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetDurationTextBoxValue(1.00);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetCountdownCheckBoxState(false);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetProgressBarCheckBoxState(false);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetHeightSliderValue(50);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            timerLab.SetWidthSliderValue(600);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AssertIsSame(int actualSlideNo, int expectedSlideNo)"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            Slide actualSlide \u003d PpOperations.SelectSlide(actualSlideNo);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "            Slide expectedSlide \u003d PpOperations.SelectSlide(expectedSlideNo);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            SlideUtil.IsSameShapes(expectedSlide, actualSlide);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            SlideUtil.IsSameAnimations(expectedSlide, actualSlide);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 178,
      "blewjy": 31,
      "-": 155
    }
  },
  {
    "path": "PowerPointLabs/Test/FunctionalTest/ZoomToAreaTest.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using Microsoft.VisualStudio.TestTools.UnitTesting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using Test.Util;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "namespace Test.FunctionalTest"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    [TestClass]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public class ZoomToAreaTest : BaseFunctionalTest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        protected override string GetTestingSlideName()"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "            return \"ZoomLab\\\\ZoomToArea.pptx\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        [TestMethod]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        [TestCategory(\"FT\")]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        public void FT_ZoomToAreaTest()"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            // Do tests in reverse order because added slides change slide numbers lower down."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            TestMultipleZoomConfig4();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            TestMultipleZoomConfig3();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            TestMultipleZoomConfig2();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            TestMultipleZoomConfig1();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            TestSingleZoomConfig2();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            TestSingleZoomConfig1();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestMultipleZoomConfig4()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            PplFeatures.SetZoomProperties(false, false);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(42);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShapes(new[] { \"First ZoomShape\", \"Second ZoomShape\", \"Third ZoomShape\", \"Fourth ZoomShape\" });"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            PplFeatures.AddZoomToArea();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            AssertAreSame(42, 44, 2);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestMultipleZoomConfig3()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            PplFeatures.SetZoomProperties(false, true);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(30);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShapes(new[] { \"First ZoomShape\", \"Second ZoomShape\", \"Third ZoomShape\", \"Fourth ZoomShape\" });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            PplFeatures.AddZoomToArea();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            AssertAreSame(30, 40, 10);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestMultipleZoomConfig2()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            PplFeatures.SetZoomProperties(true, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(26);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShapes(new[] { \"First ZoomShape\", \"Second ZoomShape\", \"Third ZoomShape\", \"Fourth ZoomShape\" });"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            PplFeatures.AddZoomToArea();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            AssertAreSame(26, 28, 2);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestMultipleZoomConfig1()"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            PplFeatures.SetZoomProperties(true, true);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(14);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShapes(new[] { \"First ZoomShape\", \"Second ZoomShape\", \"Third ZoomShape\", \"Fourth ZoomShape\" });"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            PplFeatures.AddZoomToArea();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            AssertAreSame(14, 24, 10);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestSingleZoomConfig2()"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            PplFeatures.SetZoomProperties(false, false);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(10);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShape(\"First ZoomShape\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            PplFeatures.AddZoomToArea();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            AssertAreSame(10, 12, 2);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        private void TestSingleZoomConfig1()"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            PplFeatures.SetZoomProperties(true, true);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectSlide(4);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            PpOperations.SelectShape(\"First ZoomShape\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            PplFeatures.AddZoomToArea();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            AssertAreSame(4, 8, 4);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AssertAreSame(int actualStartSlideIndex, int expectedStartSlideIndex, int slideCount)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            for (int i \u003d 0; i \u003c slideCount; ++i)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                AssertIsSame(actualStartSlideIndex + i, expectedStartSlideIndex + i);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        private void AssertIsSame(int actualSlideIndex, int expectedSlideIndex)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.Slide actualSlide \u003d PpOperations.SelectSlide(actualSlideIndex);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.Slide expectedSlide \u003d PpOperations.SelectSlide(expectedSlideIndex);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            // Similarity tolerance adjusted because different machines generate slightly different slides"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "            SlideUtil.IsSameLooking(expectedSlide, actualSlide, 0.89);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            SlideUtil.IsSameAnimations(expectedSlide, actualSlide);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 2,
      "-": 109
    }
  },
  {
    "path": "PowerPointLabs/Test/UnitTest/SyncLab/SyncLabFormatPaneItemTest.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Collections.Generic;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Microsoft.VisualStudio.TestTools.UnitTesting;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.SyncLab.ObjectFormats;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.SyncLab.Views;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace Test.UnitTest.SyncLab"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    [TestClass]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public class SyncLabFormatPaneItemTest : BaseSyncLabTest"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string TestName \u003d \"TestingN@meeeeeeeeeeeeeeeeee\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private string[] _testNodesNames;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        [TestInitialize]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void TestInitialize()"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            _testNodesNames \u003d GetAllFormatNames();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        [TestMethod]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        [TestCategory(\"UT\")]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void TestSyncPaneTooltipName()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            FormatTreeNode[] nodes \u003d SyncFormatConstants.FormatCategories;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            SyncFormatPaneItem item \u003d new SyncFormatPaneItemStub(nodes);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            item.Text \u003d TestName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Assert.AreEqual(TestName, item.toolTipName.Text);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        [TestMethod]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        [TestCategory(\"UT\")]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void TestSyncPaneTooltipBody()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string[] nodes1 \u003d { _testNodesNames[0], _testNodesNames[13], _testNodesNames[16] };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string[] nodes2 \u003d { _testNodesNames[4], _testNodesNames[6], _testNodesNames[8] };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string[] nodes3 \u003d { _testNodesNames[7], _testNodesNames[11], _testNodesNames[18] };"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            TestFollowingNodes(nodes1);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            TestFollowingNodes(nodes2);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            TestFollowingNodes(nodes3);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// Get the node names of all format nodes."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003creturns\u003e\u003c/returns\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private string[] GetAllFormatNames()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Queue\u003cFormatTreeNode\u003e queue \u003d new Queue\u003cFormatTreeNode\u003e(SyncFormatConstants.FormatCategories);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            List\u003cstring\u003e allNames \u003d new List\u003cstring\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            while (queue.Count \u003e 0)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                FormatTreeNode node \u003d queue.Dequeue();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                string fullName \u003d node.Name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                FormatTreeNode parentNode \u003d node.ParentNode;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                while (parentNode !\u003d null)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    fullName \u003d parentNode.Name + SyncFormatConstants.FormatNameSeparator + fullName;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    parentNode \u003d parentNode.ParentNode;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                allNames.Add(fullName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (node.ChildrenNodes \u003d\u003d null)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    continue;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                foreach (FormatTreeNode child in node.ChildrenNodes)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    queue.Enqueue(child);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return allNames.ToArray();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private FormatTreeNode[] SelectFormats(FormatTreeNode[] formats, string[] formatNames)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (string name in formatNames)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                GetEndNode(formats, name).IsChecked \u003d true;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return formats;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// Gets the node at the end of the format tree, as specified by the string name"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// Returns early with the last matching node if the next node cannot be found"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private FormatTreeNode GetEndNode(FormatTreeNode[] formats, string name)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string[] path \u003d name.Split(SyncFormatConstants.FormatNameSeparator.ToCharArray());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            FormatTreeNode currentRoot \u003d new FormatTreeNode(\"root\", formats);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (string nodeName in path)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                int nextIndex \u003d LastIndexOf(currentRoot.ChildrenNodes, nodeName);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (nextIndex \u003c 0)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    break;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                currentRoot \u003d currentRoot.ChildrenNodes[nextIndex];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return currentRoot;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private int LastIndexOf(FormatTreeNode[] nodes, string name)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            int index \u003d nodes.Length - 1;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            while (index \u003e\u003d 0)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (nodes[index].Name.Equals(name))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    return index;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                index--;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return index;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003csummary\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// Test the node names displayed by the tooltip against the expected node names."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        /// \u003c/summary\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void TestFollowingNodes(string[] nodeNames)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            FormatTreeNode[] nodes \u003d SyncFormatConstants.FormatCategories;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            nodes \u003d SelectFormats(SyncFormatConstants.FormatCategories, nodeNames);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            SyncFormatPaneItem item \u003d new SyncFormatPaneItemStub(nodes);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string[] expected \u003d nodeNames;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string[] actual \u003d item.toolTipBody.Text.Split(\"\\n\".ToCharArray());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Array.Sort(expected);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Array.Sort(actual);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Assert.AreEqual(String.Join(\"\\n\", expected), String.Join(\"\\n\", actual));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 137,
      "-": 4
    }
  },
  {
    "path": "PowerPointLabs/Test/UnitTest/SyncLab/SyncLabTextAlignmentTest.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using Microsoft.VisualStudio.TestTools.UnitTesting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.SyncLab.ObjectFormats;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace Test.UnitTest.SyncLab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    [TestClass]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public class SyncLabTextAlignmentTest : BaseSyncLabTest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int HorizontalAlignmentSlidesNo \u003d 4;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int HorizontalExpectedSlidesNo \u003d 5;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int VerticalAlignmentSlidesNo \u003d 6;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int VerticalExpectedSlidesNo \u003d 7;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string SourceSuffix \u003d \" source\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string TargetSuffix \u003d \" target\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Types of text formats"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Left \u003d \"Left\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Center \u003d \"Center\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Right \u003d \"Right\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Justify \u003d \"Justify\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Top \u003d \"Top\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Middle \u003d \"Middle\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Bottom \u003d \"Bottom\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        protected override string GetTestingSlideName()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return \"SyncLab\\\\SyncLab_Text.pptx\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        [TestMethod]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        [TestCategory(\"UT\")]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void TestSyncHorizontalAlignment()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string[] prefixes \u003d { Left, Center, Right, Justify };"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (string prefix in prefixes)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Microsoft.Office.Interop.PowerPoint.Shape formatShape \u003d"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    GetShape(HorizontalAlignmentSlidesNo, prefix + SourceSuffix);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Microsoft.Office.Interop.PowerPoint.Shape newShape \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    GetShape(HorizontalAlignmentSlidesNo, prefix + TargetSuffix);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                new TextHorizontalAlignmentFormat().SyncFormat(formatShape, newShape);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                CheckTextAlignment(prefix + TargetSuffix,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    HorizontalAlignmentSlidesNo, HorizontalExpectedSlidesNo);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CompareSlides(HorizontalAlignmentSlidesNo, HorizontalExpectedSlidesNo);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        [TestMethod]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        [TestCategory(\"UT\")]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void TestSyncVerticalAlignment()"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string[] prefixes \u003d { Top, Middle, Bottom };"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (string prefix in prefixes)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Microsoft.Office.Interop.PowerPoint.Shape formatShape \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    GetShape(VerticalAlignmentSlidesNo, prefix + SourceSuffix);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Microsoft.Office.Interop.PowerPoint.Shape newShape \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    GetShape(VerticalAlignmentSlidesNo, prefix + TargetSuffix);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                new TextVerticalAlignmentFormat().SyncFormat(formatShape, newShape);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                CheckTextAlignment(prefix + TargetSuffix,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    VerticalAlignmentSlidesNo, VerticalExpectedSlidesNo);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CompareSlides(VerticalAlignmentSlidesNo, VerticalExpectedSlidesNo);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Changes in text alignment are too minute for CompareSlide to detect so we need to check them manually"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        protected void CheckTextAlignment(string shape, int actualShapesSlideNo, int expectedShapesSlideNo)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.Shape actualShape \u003d GetShape(actualShapesSlideNo, shape);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.Shape expectedShape \u003d GetShape(expectedShapesSlideNo, shape);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.TextFrame2 actualTextFrame \u003d actualShape.TextFrame2;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.TextFrame2 expectedTextFrame \u003d expectedShape.TextFrame2;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Assert.IsTrue(actualTextFrame.TextRange.ParagraphFormat.Alignment \u003d\u003d expectedTextFrame.TextRange.ParagraphFormat.Alignment"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 actualTextFrame.HorizontalAnchor \u003d\u003d expectedTextFrame.HorizontalAnchor"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \u0026\u0026 actualTextFrame.VerticalAnchor \u003d\u003d expectedTextFrame.VerticalAnchor,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \"Text alignment does not match expected text alignment.\" +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \"Expected paragraphAlignment: {0}, horizontalAlignment:{1}, verticalAlignment: {2}.\""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    + \"Actual paragraphAlignment: {3}, horizontalAlignment:{4}, verticalAlignment:{5}.\","
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                expectedTextFrame.TextRange.ParagraphFormat.Alignment,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                expectedTextFrame.HorizontalAnchor, expectedTextFrame.VerticalAnchor,"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                actualTextFrame.TextRange.ParagraphFormat.Alignment,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                actualTextFrame.HorizontalAnchor, actualTextFrame.VerticalAnchor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 93
    }
  },
  {
    "path": "PowerPointLabs/Test/UnitTest/SyncLab/SyncLabTextLineSpacing.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using Microsoft.VisualStudio.TestTools.UnitTesting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.SyncLab.ObjectFormats;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace Test.UnitTest.SyncLab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    [TestClass]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public class SyncTestLineSpacing : BaseSyncLabTest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int SpacingSlidesNo \u003d 12;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int SpacingExpectedSlidesNo \u003d 13;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string SourceSuffix \u003d \" source\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string TargetSuffix \u003d \" target\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Types of text formats"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Single \u003d \"Single\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string S1_5 \u003d \"1_5\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Double \u003d \"Double\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Exactly40 \u003d \"Exactly40\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Multiple3 \u003d \"Multiple3\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        protected override string GetTestingSlideName()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return \"SyncLab\\\\SyncLab_Text.pptx\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        [TestMethod]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        [TestCategory(\"UT\")]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void TestSyncLineSpacing()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string[] prefixes \u003d { Single, S1_5, Double, Exactly40, Multiple3 };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (string prefix in prefixes)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Microsoft.Office.Interop.PowerPoint.Shape formatShape \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    GetShape(SpacingSlidesNo, prefix + SourceSuffix);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Microsoft.Office.Interop.PowerPoint.Shape newShape \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    GetShape(SpacingSlidesNo, prefix + TargetSuffix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                new TextLineSpacingFormat().SyncFormat(formatShape, newShape);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                CheckTextLineSpacing(prefix + TargetSuffix,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    SpacingSlidesNo, SpacingExpectedSlidesNo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CompareSlides(SpacingSlidesNo, SpacingExpectedSlidesNo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Changes in text alignment are too minute for CompareSlide to detect so we need to check them manually"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        protected void CheckTextLineSpacing(string shape, int actualShapesSlideNo, int expectedShapesSlideNo)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.Shape actualShape \u003d GetShape(actualShapesSlideNo, shape);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.Shape expectedShape \u003d GetShape(expectedShapesSlideNo, shape);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Microsoft.Office.Core.ParagraphFormat2 actualPFormat \u003d actualShape.TextFrame2.TextRange.ParagraphFormat;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Microsoft.Office.Core.ParagraphFormat2 expectedPFormat \u003d expectedShape.TextFrame2.TextRange.ParagraphFormat;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Assert.IsTrue(actualPFormat.SpaceBefore \u003d\u003d expectedPFormat.SpaceBefore \u0026\u0026"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                actualPFormat.SpaceWithin \u003d\u003d expectedPFormat.SpaceWithin \u0026\u0026"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                actualPFormat.SpaceAfter \u003d\u003d expectedPFormat.SpaceAfter,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \"Text line spacing does not match expected line spacing.\" +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \"Expected before:{0}, within:{1}, after:{2}. \" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \"Actual before:{3}, within:{4}, after:{5}.\","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                expectedPFormat.SpaceBefore, expectedPFormat.SpaceWithin, expectedPFormat.SpaceAfter,"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                actualPFormat.SpaceBefore, actualPFormat.SpaceWithin, actualPFormat.SpaceAfter);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 66
    }
  },
  {
    "path": "PowerPointLabs/Test/UnitTest/SyncLab/SyncLabTextOrientation.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "﻿using Microsoft.VisualStudio.TestTools.UnitTesting;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.SyncLab.ObjectFormats;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace Test.UnitTest.SyncLab"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    [TestClass]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public class SyncLabTextOrientation : BaseSyncLabTest"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int OrientationSlidesNo \u003d 9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int OrientationExpectedSlidesNo \u003d 10;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string SourceSuffix \u003d \" source\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string TargetSuffix \u003d \" target\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Types of text formats"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Horizontal \u003d \"Horizontal\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Vertical \u003d \"Vertical\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Rotate90 \u003d \"Rotate90\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Rotate270 \u003d \"Rotate270\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Stacked \u003d \"Stacked\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        protected override string GetTestingSlideName()"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return \"SyncLab\\\\SyncLab_Text.pptx\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        [TestMethod]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        [TestCategory(\"UT\")]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void TestSyncOrientation()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string[] prefixes \u003d { Horizontal, Vertical, Rotate90, Rotate270, Stacked };"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            foreach (string prefix in prefixes)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Microsoft.Office.Interop.PowerPoint.Shape formatShape \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    GetShape(OrientationSlidesNo, prefix + SourceSuffix);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Microsoft.Office.Interop.PowerPoint.Shape newShape \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    GetShape(OrientationSlidesNo, prefix + TargetSuffix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                new TextOrientationFormat().SyncFormat(formatShape, newShape);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                CheckTextOrientation(prefix + TargetSuffix,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    OrientationSlidesNo, OrientationExpectedSlidesNo);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            CompareSlides(OrientationSlidesNo, OrientationExpectedSlidesNo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Changes in text alignment are too minute for CompareSlide to detect so we need to check them manually"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        protected void CheckTextOrientation(string shape, int actualShapesSlideNo, int expectedShapesSlideNo)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.Shape actualShape \u003d GetShape(actualShapesSlideNo, shape);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.Shape expectedShape \u003d GetShape(expectedShapesSlideNo, shape);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.TextFrame2 actualTextFrame \u003d actualShape.TextFrame2;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Microsoft.Office.Interop.PowerPoint.TextFrame2 expectedTextFrame \u003d expectedShape.TextFrame2;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Assert.IsTrue(actualTextFrame.Orientation \u003d\u003d expectedTextFrame.Orientation,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \"Text orientation does not match expected text orientation.\" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                \"Expected orientation:{0}. Actual orientation:{1}.\","
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                expectedTextFrame.Orientation, actualTextFrame.Orientation);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 62
    }
  },
  {
    "path": "PowerPointLabs/Test/UnitTest/TooltipsLab/ConvertToTooltipTest.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.VisualStudio.TestTools.UnitTesting;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TextCollection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TooltipsLab;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using Test.Util;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace Test.UnitTest.TooltipsLab"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    [TestClass]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public class ConvertToTooltipTest : BaseUnitTest"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int ConvertShapesToTooltipOneShapeTestSlideNo \u003d 4;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int ConvertShapesToTooltipOneShapeExpectedSlideNo \u003d 5;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int ConvertShapesToTooltipTwoShapesTestSlideNo \u003d 7;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int ConvertShapesToTooltipTwoShapesExpectedSlideNo \u003d 8;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int ConvertShapesToTooltipThreeShapesTestSlideNo \u003d 10;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int ConvertShapesToTooltipThreeShapesExpectedSlideNo \u003d 11;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int ConvertShapesToTooltipTenShapesTestSlideNo \u003d 13;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const int ConvertShapesToTooltipTenShapesExpectedSlideNo \u003d 14;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string TriggerShapeName \u003d \"Trigger\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string CalloutShapeName \u003d \"Callout\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Callout2ShapeName \u003d \"Callout 2\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Callout3ShapeName \u003d \"Callout 3\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Callout4ShapeName \u003d \"Callout 4\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Callout5ShapeName \u003d \"Callout 5\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Callout6ShapeName \u003d \"Callout 6\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Callout7ShapeName \u003d \"Callout 7\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Callout8ShapeName \u003d \"Callout 8\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const string Callout9ShapeName \u003d \"Callout 9\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        protected override string GetTestingSlideName()"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return \"TooltipsLab\\\\ConvertToTooltip.pptx\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        [TestMethod]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        [TestCategory(\"UT\")]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public void ConvertShapesToTooltip()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            TestConvertShapesToTooltip_OneShape();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            TestConvertShapesToTooltip_TwoShapes();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            TestConvertShapesToTooltip_ThreeShapes();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            TestConvertShapesToTooltip_TenShapes();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void TestConvertShapesToTooltip_OneShape()"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string[] shapeNames \u003d { TriggerShapeName };"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ConvertShapesToTooltipAndCompare(shapeNames, ConvertShapesToTooltipOneShapeTestSlideNo, ConvertShapesToTooltipOneShapeExpectedSlideNo, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void TestConvertShapesToTooltip_TwoShapes()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string[] shapeNames \u003d { TriggerShapeName, CalloutShapeName };"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ConvertShapesToTooltipAndCompare(shapeNames, ConvertShapesToTooltipTwoShapesTestSlideNo, ConvertShapesToTooltipTwoShapesExpectedSlideNo, true);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void TestConvertShapesToTooltip_ThreeShapes()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string[] shapeNames \u003d { TriggerShapeName, CalloutShapeName, Callout2ShapeName };"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ConvertShapesToTooltipAndCompare(shapeNames, ConvertShapesToTooltipThreeShapesTestSlideNo, ConvertShapesToTooltipThreeShapesExpectedSlideNo, true);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void TestConvertShapesToTooltip_TenShapes()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string[] shapeNames \u003d { TriggerShapeName, CalloutShapeName, Callout2ShapeName, Callout3ShapeName,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Callout4ShapeName, Callout5ShapeName, Callout6ShapeName,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Callout7ShapeName, Callout8ShapeName, Callout9ShapeName};"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ConvertShapesToTooltipAndCompare(shapeNames, ConvertShapesToTooltipTenShapesTestSlideNo, ConvertShapesToTooltipTenShapesExpectedSlideNo, true);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void ConvertShapesToTooltipAndCompare(string[] shapeNames, int testSlideNo, int expectedSlideNo, bool isSuccessful)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Slide slide \u003d PpOperations.SelectSlide(testSlideNo);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            PowerPointSlide currentSlide \u003d PowerPointSlide.FromSlideFactory(slide);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            ShapeRange selectedShapes \u003d PpOperations.SelectShapes(shapeNames);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            if (isSuccessful)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                Assert.AreEqual(ConvertToTooltip.AddTriggerAnimation(currentSlide, selectedShapes), isSuccessful);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            else"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                MessageBoxUtil.ExpectMessageBoxWillPopUp("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                            TooltipsLabText.ErrorTooltipsDialogTitle,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                            TooltipsLabText.ErrorLessThanTwoShapesSelected,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                                            () \u003d\u003e { ConvertToTooltip.AddTriggerAnimation(currentSlide, selectedShapes);  });"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            AssertIsSame(testSlideNo, expectedSlideNo);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private void AssertIsSame(int actualSlideIndex, int expectedSlideIndex)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Slide actualSlide \u003d PpOperations.SelectSlide(actualSlideIndex);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Slide expectedSlide \u003d PpOperations.SelectSlide(expectedSlideIndex);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            SlideUtil.IsSameLooking(expectedSlide, actualSlide);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            SlideUtil.IsSameAnimations(expectedSlide, actualSlide);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 100,
      "-": 4
    }
  },
  {
    "path": "PowerPointLabs/Test/UnitTest/TooltipsLab/CreateCalloutTest.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.VisualStudio.TestTools.UnitTesting;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TooltipsLab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using Test.Util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace Test.UnitTest.TooltipsLab"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blewjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    [TestClass]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    public class CreateCalloutTest : BaseUnitTest"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateCalloutNormalShapeTestSlideNo \u003d 4;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateCalloutNormalShapeExpectedSlideNo \u003d 5;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateCalloutTriggerShapeTestSlideNo \u003d 7;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateCalloutTriggerShapeExpectedSlideNo \u003d 8;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateCalloutCalloutShapeTestSlideNo \u003d 10;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateCalloutCalloutShapeExpectedSlideNo \u003d 11;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateCalloutMultipleNormalShapesTestSlideNo \u003d 13;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateCalloutMultipleNormalShapesExpectedSlideNo \u003d 14;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateCalloutMultipleAllTypeShapesTestSlideNo \u003d 16;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateCalloutMultipleAllTypeShapesExpectedSlideNo \u003d 17;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateCalloutMultipleTypeMoreShapesTestSlideNo \u003d 19;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateCalloutMultipleTypeMoreShapesExpectedSlideNo \u003d 20;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const string NormalShapeName \u003d \"normalShape\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const string TriggerShapeName \u003d \"existingTriggerShape\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const string CalloutShapeName \u003d \"existingCalloutShape\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const string MultipleShapePrefix \u003d \"select\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        protected override string GetTestingSlideName()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return \"TooltipsLab\\\\CreateCallout.pptx\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        [TestMethod]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        [TestCategory(\"UT\")]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void CreateCallout()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestCreateCallout_NormalShape();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestCreateCallout_TriggerShape();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestCreateCallout_CalloutShape();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestCreateCallout_MultipleNormalShapes();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestCreateCallout_MultipleAllTypeShapes();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestCreateCallout_MultipleTypeMoreShapes();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestCreateCallout_NormalShape()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(CreateCalloutNormalShapeTestSlideNo);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ShapeRange selectedShapeRange \u003d PpOperations.SelectShape(NormalShapeName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CreateCalloutAndCompare(selectedShapeRange[1], CreateCalloutNormalShapeTestSlideNo, CreateCalloutNormalShapeExpectedSlideNo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestCreateCallout_TriggerShape()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(CreateCalloutTriggerShapeTestSlideNo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ShapeRange selectedShapeRange \u003d PpOperations.SelectShape(TriggerShapeName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CreateCalloutAndCompare(selectedShapeRange[1], CreateCalloutTriggerShapeTestSlideNo, CreateCalloutTriggerShapeExpectedSlideNo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestCreateCallout_CalloutShape()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(CreateCalloutCalloutShapeTestSlideNo);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ShapeRange selectedShapeRange \u003d PpOperations.SelectShape(CalloutShapeName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CreateCalloutAndCompare(selectedShapeRange[1], CreateCalloutCalloutShapeTestSlideNo, CreateCalloutCalloutShapeExpectedSlideNo);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestCreateCallout_MultipleNormalShapes()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(CreateCalloutMultipleNormalShapesTestSlideNo);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ShapeRange selectedShapeRange \u003d PpOperations.SelectShapesByPrefix(NormalShapeName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CreateMultipleCalloutAndCompare(selectedShapeRange, CreateCalloutMultipleNormalShapesTestSlideNo, CreateCalloutMultipleNormalShapesExpectedSlideNo);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestCreateCallout_MultipleAllTypeShapes()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(CreateCalloutMultipleAllTypeShapesTestSlideNo);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ShapeRange selectedShapeRange \u003d PpOperations.SelectShapesByPrefix(MultipleShapePrefix);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CreateMultipleCalloutAndCompare(selectedShapeRange, CreateCalloutMultipleAllTypeShapesTestSlideNo, CreateCalloutMultipleAllTypeShapesExpectedSlideNo);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestCreateCallout_MultipleTypeMoreShapes()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(CreateCalloutMultipleTypeMoreShapesTestSlideNo);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ShapeRange selectedShapeRange \u003d PpOperations.SelectShapesByPrefix(MultipleShapePrefix);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CreateMultipleCalloutAndCompare(selectedShapeRange, CreateCalloutMultipleTypeMoreShapesTestSlideNo, CreateCalloutMultipleTypeMoreShapesExpectedSlideNo);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void CreateCalloutAndCompare(Shape selectedShape, int testSlideNo, int expectedSlideNo)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PowerPointSlide currentSlide \u003d PowerPointSlide.FromSlideFactory(PpOperations.GetCurrentSlide());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Shape callout \u003d CreateTooltip.GenerateCalloutWithReferenceTriggerShape(currentSlide, selectedShape);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ConvertToTooltip.AddTriggerAnimation(currentSlide, selectedShape, callout);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            AssertIsSame(testSlideNo, expectedSlideNo);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void CreateMultipleCalloutAndCompare(ShapeRange selectedShapes, int testSlideNo, int expectedSlideNo)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PowerPointSlide currentSlide \u003d PowerPointSlide.FromSlideFactory(PpOperations.GetCurrentSlide());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            foreach (Shape shape in selectedShapes)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                Shape callout \u003d CreateTooltip.GenerateCalloutWithReferenceTriggerShape(currentSlide, shape);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                ConvertToTooltip.AddTriggerAnimation(currentSlide, shape, callout);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            AssertIsSame(testSlideNo, expectedSlideNo);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void AssertIsSame(int actualSlideIndex, int expectedSlideIndex)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide actualSlide \u003d PpOperations.SelectSlide(actualSlideIndex);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide expectedSlide \u003d PpOperations.SelectSlide(expectedSlideIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SlideUtil.IsSameLooking(expectedSlide, actualSlide);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SlideUtil.IsSameAnimations(expectedSlide, actualSlide);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blewjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 117,
      "-": 3
    }
  },
  {
    "path": "PowerPointLabs/Test/UnitTest/TooltipsLab/CreateTooltipTest.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.VisualStudio.TestTools.UnitTesting;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TooltipsLab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using Test.Util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace Test.UnitTest.TooltipsLab"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blewjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    [TestClass]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    public class CreateTooltipTest : BaseUnitTest"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTooltipNoneSelectedTestSlideNo \u003d 4;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTooltipNoneSelectedExpectedSlideNo \u003d 5;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTooltipShapeSelectedTestSlideNo \u003d 7;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTooltipShapeSelectedExpectedSlideNo \u003d 8;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTooltipExistingTooltipTestSlideNo \u003d 10;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTooltipExistingTooltipExpectedSlideNo \u003d 11;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTooltipMultipleTooltipsTestSlideNo \u003d 13;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTooltipMultipleTooltipsExpectedSlideNo \u003d 14;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const string CreateTooltipShapeToSelectName \u003d \"SelectMe\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int NumberOfTooltips \u003d 5;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        protected override string GetTestingSlideName()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return \"TooltipsLab\\\\CreateTooltip.pptx\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        [TestMethod]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        [TestCategory(\"UT\")]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void CreateTooltip()"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestCreateTooltip_NoneSelected();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestCreateTooltip_ShapeSelected();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestCreateTooltip_ExistingTooltip();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestCreateTooltip_MultipleTooltips();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestCreateTooltip_NoneSelected()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(CreateTooltipNoneSelectedTestSlideNo);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CreateTooltipAndCompare(CreateTooltipNoneSelectedTestSlideNo, CreateTooltipNoneSelectedExpectedSlideNo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestCreateTooltip_ShapeSelected()"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(CreateTooltipShapeSelectedTestSlideNo);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectShape(CreateTooltipShapeToSelectName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CreateTooltipAndCompare(CreateTooltipShapeSelectedTestSlideNo, CreateTooltipShapeSelectedExpectedSlideNo);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blewjy"
        },
        "content": "       "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestCreateTooltip_ExistingTooltip()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(CreateTooltipExistingTooltipTestSlideNo);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CreateTooltipAndCompare(CreateTooltipExistingTooltipTestSlideNo, CreateTooltipExistingTooltipExpectedSlideNo);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestCreateTooltip_MultipleTooltips()"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(CreateTooltipMultipleTooltipsTestSlideNo);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            for (int i \u003d 0; i \u003c NumberOfTooltips; i++)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                CreateTooltipOnSlide(CreateTooltipMultipleTooltipsTestSlideNo);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            AssertIsSame(CreateTooltipMultipleTooltipsTestSlideNo, CreateTooltipMultipleTooltipsExpectedSlideNo);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void CreateTooltipAndCompare(int testSlideNo, int expectedSlideNo)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CreateTooltipOnSlide(testSlideNo);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            AssertIsSame(testSlideNo, expectedSlideNo);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void CreateTooltipOnSlide(int slideNo)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PowerPointSlide currentSlide \u003d PowerPointSlide.FromSlideFactory(PpOperations.GetCurrentSlide());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Shape triggerShape \u003d PowerPointLabs.TooltipsLab.CreateTooltip.GenerateTriggerShape(currentSlide);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Shape callout \u003d PowerPointLabs.TooltipsLab.CreateTooltip.GenerateCalloutWithReferenceTriggerShape(currentSlide, triggerShape);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ConvertToTooltip.AddTriggerAnimation(currentSlide, triggerShape, callout);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void AssertIsSame(int actualSlideIndex, int expectedSlideIndex)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide actualSlide \u003d PpOperations.SelectSlide(actualSlideIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide expectedSlide \u003d PpOperations.SelectSlide(expectedSlideIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SlideUtil.IsSameLooking(expectedSlide, actualSlide);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SlideUtil.IsSameAnimations(expectedSlide, actualSlide);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blewjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 89,
      "-": 3
    }
  },
  {
    "path": "PowerPointLabs/Test/UnitTest/TooltipsLab/CreateTriggerTest.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using Microsoft.Office.Interop.PowerPoint;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.VisualStudio.TestTools.UnitTesting;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using PowerPointLabs.Models;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using PowerPointLabs.TooltipsLab;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using Test.Util;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "blewjy"
        },
        "content": "namespace Test.UnitTest.TooltipsLab"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blewjy"
        },
        "content": "{"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    [TestClass]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    public class CreateTriggerTest : BaseUnitTest"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTriggerNormalShapeTestSlideNo \u003d 4;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTriggerNormalShapeExpectedSlideNo \u003d 5;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTriggerTriggerShapeTestSlideNo \u003d 7;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTriggerTriggerShapeExpectedSlideNo \u003d 8;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTriggerCalloutShapeTestSlideNo \u003d 10;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTriggerCalloutShapeExpectedSlideNo \u003d 11;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTriggerMultipleNormalShapesTestSlideNo \u003d 13;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTriggerMultipleNormalShapesExpectedSlideNo \u003d 14;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTriggerMultipleAllTypeShapesTestSlideNo \u003d 16;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTriggerMultipleAllTypeShapesExpectedSlideNo \u003d 17;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTriggerMultipleTypeMoreShapesTestSlideNo \u003d 19;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const int CreateTriggerMultipleTypeMoreShapesExpectedSlideNo \u003d 20;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const string NormalShapeName \u003d \"normalShape\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const string TriggerShapeName \u003d \"existingTriggerShape\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const string CalloutShapeName \u003d \"existingCalloutShape\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private const string MultipleShapePrefix \u003d \"select\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        protected override string GetTestingSlideName()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            return \"TooltipsLab\\\\CreateTrigger.pptx\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        [TestMethod]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        [TestCategory(\"UT\")]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        public void CreateTrigger()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestCreateTrigger_NormalShape();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestCreateTrigger_TriggerShape();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestCreateTrigger_CalloutShape();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestCreateTrigger_MultipleNormalShapes();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestCreateTrigger_MultipleAllTypeShapes();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            TestCreateTrigger_MultipleTypeMoreShapes();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestCreateTrigger_NormalShape()"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(CreateTriggerNormalShapeTestSlideNo);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ShapeRange selectedShapeRange \u003d PpOperations.SelectShape(NormalShapeName);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CreateTriggerAndCompare(selectedShapeRange[1], CreateTriggerNormalShapeTestSlideNo, CreateTriggerNormalShapeExpectedSlideNo);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestCreateTrigger_TriggerShape()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(CreateTriggerTriggerShapeTestSlideNo);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ShapeRange selectedShapeRange \u003d PpOperations.SelectShape(TriggerShapeName);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CreateTriggerAndCompare(selectedShapeRange[1], CreateTriggerTriggerShapeTestSlideNo, CreateTriggerTriggerShapeExpectedSlideNo);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestCreateTrigger_CalloutShape()"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(CreateTriggerCalloutShapeTestSlideNo);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ShapeRange selectedShapeRange \u003d PpOperations.SelectShape(CalloutShapeName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CreateTriggerAndCompare(selectedShapeRange[1], CreateTriggerCalloutShapeTestSlideNo, CreateTriggerCalloutShapeExpectedSlideNo);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestCreateTrigger_MultipleNormalShapes()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(CreateTriggerMultipleNormalShapesTestSlideNo);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ShapeRange selectedShapeRange \u003d PpOperations.SelectShapesByPrefix(NormalShapeName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CreateMultipleTriggerAndCompare(selectedShapeRange, CreateTriggerMultipleNormalShapesTestSlideNo, CreateTriggerMultipleNormalShapesExpectedSlideNo);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestCreateTrigger_MultipleAllTypeShapes()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(CreateTriggerMultipleAllTypeShapesTestSlideNo);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ShapeRange selectedShapeRange \u003d PpOperations.SelectShapesByPrefix(MultipleShapePrefix);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CreateMultipleTriggerAndCompare(selectedShapeRange, CreateTriggerMultipleAllTypeShapesTestSlideNo, CreateTriggerMultipleAllTypeShapesExpectedSlideNo);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void TestCreateTrigger_MultipleTypeMoreShapes()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PpOperations.SelectSlide(CreateTriggerMultipleTypeMoreShapesTestSlideNo);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ShapeRange selectedShapeRange \u003d PpOperations.SelectShapesByPrefix(MultipleShapePrefix);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            CreateMultipleTriggerAndCompare(selectedShapeRange, CreateTriggerMultipleTypeMoreShapesTestSlideNo, CreateTriggerMultipleTypeMoreShapesExpectedSlideNo);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void CreateTriggerAndCompare(Shape selectedShape, int testSlideNo, int expectedSlideNo)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PowerPointSlide currentSlide \u003d PowerPointSlide.FromSlideFactory(PpOperations.GetCurrentSlide());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Shape triggerShape \u003d CreateTooltip.GenerateTriggerShapeWithReferenceCallout(currentSlide, selectedShape);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            ConvertToTooltip.AddTriggerAnimation(currentSlide, triggerShape, selectedShape);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            AssertIsSame(testSlideNo, expectedSlideNo);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void CreateMultipleTriggerAndCompare(ShapeRange selectedShapes, int testSlideNo, int expectedSlideNo)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            PowerPointSlide currentSlide \u003d PowerPointSlide.FromSlideFactory(PpOperations.GetCurrentSlide());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            foreach (Shape shape in selectedShapes)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                Shape triggerShape \u003d CreateTooltip.GenerateTriggerShapeWithReferenceCallout(currentSlide, shape);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "blewjy"
        },
        "content": "                ConvertToTooltip.AddTriggerAnimation(currentSlide, triggerShape, shape);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            AssertIsSame(testSlideNo, expectedSlideNo);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        private void AssertIsSame(int actualSlideIndex, int expectedSlideIndex)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide actualSlide \u003d PpOperations.SelectSlide(actualSlideIndex);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            Slide expectedSlide \u003d PpOperations.SelectSlide(expectedSlideIndex);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SlideUtil.IsSameLooking(expectedSlide, actualSlide);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "blewjy"
        },
        "content": "            SlideUtil.IsSameAnimations(expectedSlide, actualSlide);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "blewjy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "blewjy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 118,
      "-": 3
    }
  },
  {
    "path": "PowerPointLabs/Test/Util/MessageBoxUtil.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Text;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "using System.Threading.Tasks;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "using Microsoft.VisualStudio.TestTools.UnitTesting;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "namespace Test.Util"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    class MessageBoxUtil"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private const String MessageBoxIdentifier \u003d \"#32770\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        public static void ExpectMessageBoxWillPopUp(string title, string expContent, Action messageBoxTrigger,"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            string buttonNameToClick \u003d null, int retryCount \u003d 5, int waitTime \u003d 1000)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            Task expect \u003d ExpectMessageBoxWillPopUp(title, expContent, buttonNameToClick, retryCount, waitTime);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            messageBoxTrigger.Invoke();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            VerifyExpectation(expect, retryCount, waitTime);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static void ExpectMessageBoxWillNotPopUp(string title, string expContent, Action messageBoxTrigger,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string buttonNameToClick \u003d null, int retryCount \u003d 5, int waitTime \u003d 1000)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Task expect \u003d ExpectMessageBoxWillNotPopUp(title, expContent, buttonNameToClick, retryCount, waitTime);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            messageBoxTrigger.Invoke();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            VerifyExpectation(expect, retryCount, waitTime);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // This method must be called before PplFeatures,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // otherwise, PplFeatures will block the test."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        private static Task ExpectMessageBoxWillPopUp(string title, string expContent,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            string buttonNameToClick, int retryCount, int waitTime)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            // MessageBox in pptlabs will block the whole thread,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            // so multi-thread is needed here."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            Task taskToVerify \u003d new Task(() \u003d\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                // try to find messagebox window"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                IntPtr msgBoxHandle \u003d IntPtr.Zero;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                while (msgBoxHandle \u003d\u003d IntPtr.Zero \u0026\u0026 retryCount \u003e 0)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    msgBoxHandle \u003d NativeUtil.FindWindow(MessageBoxIdentifier, title);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (msgBoxHandle \u003d\u003d IntPtr.Zero)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                        ThreadUtil.WaitFor(waitTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                        retryCount--;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                    else"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                if (msgBoxHandle \u003d\u003d IntPtr.Zero)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                    Assert.Fail(\"Failed to find message box.\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                // try to find text label in the message box"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                IntPtr dlgHandle \u003d NativeUtil.GetDlgItem(msgBoxHandle, 0xFFFF);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                Assert.AreNotEqual(IntPtr.Zero, dlgHandle, \"Failed to find label in the messagebox.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                const int nchars \u003d 1024;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                StringBuilder actualContentBuilder \u003d new StringBuilder(nchars);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                int isGetTextSuccessful \u003d NativeUtil.GetWindowText(dlgHandle, actualContentBuilder, nchars);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                // close the message box, otherwise it will block the test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                CloseMessageBox(msgBoxHandle, buttonNameToClick);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                if (expContent !\u003d \"{*}\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                    Assert.IsTrue(isGetTextSuccessful \u003e 0, \"Failed to get text in the label of messagebox.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                    Assert.AreEqual(expContent, actualContentBuilder.ToString(), true, \"Different MessageBox content.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            taskToVerify.Start();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return taskToVerify;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // This method must be called before PplFeatures,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        // otherwise, PplFeatures will block the test."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        private static Task ExpectMessageBoxWillNotPopUp(string title, string expContent,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string buttonNameToClick, int retryCount, int waitTime)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // MessageBox in pptlabs will block the whole thread,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            // so multi-thread is needed here."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Task taskToVerify \u003d new Task(() \u003d\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                // try to find messagebox window"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                IntPtr msgBoxHandle \u003d IntPtr.Zero;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                while (msgBoxHandle \u003d\u003d IntPtr.Zero \u0026\u0026 retryCount \u003e 0)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    msgBoxHandle \u003d NativeUtil.FindWindow(MessageBoxIdentifier, title);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    if (msgBoxHandle \u003d\u003d IntPtr.Zero)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        ThreadUtil.WaitFor(waitTime);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        retryCount--;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    else"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                if (msgBoxHandle !\u003d IntPtr.Zero)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                    Assert.Fail(\"Message Box should not be open.\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            });"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            taskToVerify.Start();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return taskToVerify;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void VerifyExpectation(Task taskToVerify, int retryCount, int waitTime)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            // wait for task to finish"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            while (taskToVerify.Status \u003d\u003d TaskStatus.Running \u0026\u0026 retryCount \u003e 0)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                ThreadUtil.WaitFor(waitTime);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                retryCount--;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            // assert no exception during task\u0027s execution"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            if (taskToVerify.Exception !\u003d null)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                Assert.AreEqual(null, taskToVerify.Exception, \"Failed to verify expectation. Exception: {0}\","
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    taskToVerify.Exception.Message);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            // don\u0027t end so fast.."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            ThreadUtil.WaitFor(500);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        private static void CloseMessageBox(IntPtr msgBoxHandle, string buttonName)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            if (buttonName \u003d\u003d null)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                // Simple close message box"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                NativeUtil.SetForegroundWindow(msgBoxHandle);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                NativeUtil.SendMessage(msgBoxHandle, 0x0112 /*WM_SYSCOMMAND*/, new IntPtr(0xF060 /*SC_CLOSE*/), IntPtr.Zero);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            else"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                // This may be flaky.. if there\u0027re more than one windows pop up at the same time.."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                // it will affect clicking the button"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                IntPtr btnHandle \u003d NativeUtil.FindWindowEx(msgBoxHandle, IntPtr.Zero, \"Button\", buttonName);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                Assert.AreNotEqual(IntPtr.Zero, btnHandle, \"Failed to find button in the messagebox.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                NativeUtil.SetForegroundWindow(msgBoxHandle);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                NativeUtil.SendMessage(btnHandle, 0x0201 /*left button down*/, IntPtr.Zero, IntPtr.Zero);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                NativeUtil.SendMessage(btnHandle, 0x0202 /*left button up*/, IntPtr.Zero, IntPtr.Zero);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 44,
      "-": 106
    }
  },
  {
    "path": "PowerPointLabs/TestInterface/IColorsLabController.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "blewjy"
        },
        "content": "﻿using System.Collections.Generic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using System.Drawing;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "blewjy"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "blewjy"
        },
        "content": "using Point \u003d System.Windows.Point;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "namespace TestInterface"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface IColorsLabController"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        void OpenPane();"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        Point GetApplyTextButtonLocation();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        Point GetApplyLineButtonLocation();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        Point GetApplyFillButtonLocation();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        Point GetMainColorRectangleLocation();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        Point GetEyeDropperButtonLocation();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        void SlideBrightnessSlider(int value);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        void SlideSaturationSlider(int value);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        void ClickMonochromeRect(int index);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        void ClickAnalogousRect(int index);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        void ClickComplementaryRect(int index);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        void ClickTriadicRect(int index);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        void ClickTetradicRect(int index);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        void LoadFavoriteColors(string filePath);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        void ResetFavoriteColors();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        void ClearFavoriteColors();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        void ClearRecentColors();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        IList\u003cColor\u003e GetCurrentFavoritePanel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        IList\u003cColor\u003e GetCurrentRecentPanel();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "blewjy": 20,
      "YuPeiHenry": 2,
      "-": 14
    }
  },
  {
    "path": "PowerPointLabs/TestInterface/IShapesLabController.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿using System.Collections.Generic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using System.Windows;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "namespace TestInterface"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface IShapesLabController"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        void OpenPane();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        void SaveSelectedShapes();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        Point GetShapeForClicking(string shapeName);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        void ImportLibrary(string pathToLibrary);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        void ImportShape(string pathToShape);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cISlideData\u003e FetchShapeGalleryPresentationData();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        void ClickAddShapeButton();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        bool GetAddShapeButtonStatus();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 1,
      "YuPeiHenry": 2,
      "-": 14
    }
  },
  {
    "path": "PowerPointLabs/TestInterface/ISyncLabController.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿namespace TestInterface"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface ISyncLabController"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        void OpenPane();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        void Copy();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        void Sync(int index);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        void DialogSelectItem(int categoryIndex, int itemIndex);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        void DialogClickOk();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        bool GetCopyButtonEnabledStatus();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 2,
      "-": 15
    }
  },
  {
    "path": "PowerPointLabs/TestInterface/ITimerLabController.cs",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "﻿namespace TestInterface"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    public interface ITimerLabController"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        void OpenPane();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        void ClickCreateButton();"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        void SetDurationTextBoxValue(double value);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "blewjy"
        },
        "content": "        void SetCountdownCheckBoxState(bool isChecked);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ChesterSng"
        },
        "content": "        void SetProgressBarCheckBoxState(bool isChecked);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        void SetHeightTextBoxValue(int value);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        void SetWidthTextBoxValue(int value);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        void SetHeightSliderValue(int value);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        void SetWidthSliderValue(int value);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ChesterSng": 1,
      "blewjy": 1,
      "-": 15
    }
  }
]
