[
  {
    "path": "README.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# Learning Resources for Software Engineering Students"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "This repository is a collection of Software Engineering learning resources."
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "**Click [here](https://se-edu.github.io/learningresources/) to start exploring the resources**."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "[Guidelines for Contributors](https://se-education.org/learningresources/contributing.html) | [Contact](https://se-education.org/learningresources/about.html) | License: MIT"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "marvinchin": 1,
      "-": 10
    }
  },
  {
    "path": "_markbind/navigation/mainNav.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cspan id\u003d\"toc\"\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cnavigation\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "* ****Programming Languages****"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  * C++"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Rvalue References and Move Semantics]({{baseUrl}}/contents/c++/rvalue.html)"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  * CSharp"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\t* [Introduction to CSharp]({{baseUrl}}/contents/csharp/IntroductionToCSharp.html)"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Go]({{baseUrl}}/contents/go/Go.html)"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Haskell]({{baseUrl}}/contents/haskell/Haskell.html)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  * Java"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Java Concurrency]({{baseUrl}}/contents/java/JavaConcurrency.html)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Java Streams]({{baseUrl}}/contents/java/streams-an-introduction.html)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Java Synchronization]({{baseUrl}}/contents/java/JavaSynchronization.html)"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Java Reflection]({{baseUrl}}/contents/java/JavaReflections.html)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  * JavaScript"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Writing Testable JavaScript Code]({{baseUrl}}/contents/javascript/javascript.html)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Javascript Promises]({{baseUrl}}/contents/javascript/Javascript-promises.html)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * Kotlin"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Introduction to Kotlin]({{baseUrl}}/contents/kotlin/kotlin.html)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Null Safety In Kotlin]({{baseUrl}}/contents/kotlin/NullSafety.html)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Python]({{baseUrl}}/contents/python/introduction-to-python.html)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Ruby]({{baseUrl}}/contents/ruby/Ruby.html)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Rust]({{baseUrl}}/contents/rust/Rust.html)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Swift]({{baseUrl}}/contents/swift/welcome-to-swift.html)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* ****SE Topics****"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "  * Architecture"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    * [REST]({{baseUrl}}/contents/architecture/RESTArchitecturalStyle.html)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  * Code Quality"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Code Quality Metrics]({{baseUrl}}/contents/codeQuality/CodeQualityMetrics.html)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Documentation]({{baseUrl}}/contents/projectManagement/documentation.html)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Functional Programming]({{baseUrl}}/contents/functionalProgramming/intro.html)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  * Performance"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Introduction to Performance Optimization]({{baseUrl}}/contents/performance/Performance.html)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Performance Profiling]({{baseUrl}}/contents/performance/PerformanceProfiling.html)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "    * [Web Performance]({{baseUrl}}/contents/performance/WebPerformance.html)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "  * Project Management"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Agile Development]({{baseUrl}}/contents/projectManagement/AgileDevelopment.html)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    * [DevOps]({{baseUrl}}/contents/devops/DevOps.html)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "  * Revision Control"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Best Practices with git]({{baseUrl}}/contents/revisionControl/bestPracticesGit.html)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Scalability]({{baseUrl}}/contents/scalability/scalable-development.html)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  * Static Analysis"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Introduction to Static Analysis]({{baseUrl}}/contents/staticAnalysis/intro.html)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    * [CheckStyle]({{baseUrl}}/contents/staticAnalysis/checkStyle.html)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    * [PMD]({{baseUrl}}/contents/staticAnalysis/PMD.html)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    * [FindBugs]({{baseUrl}}/contents/staticAnalysis/FindBugs.html)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    * [ESLint]({{baseUrl}}/contents/staticAnalysis/ESLint.html)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "  * Testing"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Writing Testable Code]({{baseUrl}}/contents/testing/writing-testable-code.html)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "  * UI/UX"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Accessibility]({{baseUrl}}/contents/uix/accessibility.html)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Design Systems]({{baseUrl}}/contents/uix/design-systems.html)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Introduction to UI/UX]({{baseUrl}}/contents/uix/uix.html)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Refining UX Design Skills]({{baseUrl}}/contents/uix/refining-ux-skills.html)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "* ****App Frameworks****"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Android]({{baseUrl}}/contents/android/IntroToAndroid.html)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "  * [Angular]({{baseUrl}}/contents/javascript/Javascript-framework-Angular.html)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "  * [iOS]({{baseUrl}}/contents/ios/IntroToIos.html)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  * [NodeJS]({{baseUrl}}/contents/node/nodejs.html)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amad-person"
        },
        "content": "  * [React]({{baseUrl}}/contents/javascript/Javascript-framework-React.html)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Ruby on Rails]({{baseUrl}}/contents/ruby/Rails.html)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "  * [VueJS]({{baseUrl}}/contents/javascript/Javascript-framework-VueJs.html)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "* ****Tools Useful for Software Engineers****"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Regular Expressions]({{baseUrl}}/contents/regex/Regex.html)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  * [Docker]({{baseUrl}}/contents/docker/Docker.html)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* ****Other Topics****"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Computer Vision]({{baseUrl}}/contents/computerVision/cv.html)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "  * Databases"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "    * [DBMS]({{baseUrl}}/contents/data/databases/databases.html)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "    * [SQL]({{baseUrl}}/contents/data/sql/SQL.html)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Machine Learning]({{baseUrl}}/contents/ai/ml.html)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "  * Multi-Threading"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    * [GPGPU]({{baseUrl}}/contents/gpgpu/gpgpu.html)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    * [CUDA]({{baseUrl}}/contents/gpgpu/cuda.html)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "  * Security"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Cross Site Request Forgery]({{baseUrl}}/contents/security/crossSiteRequestForgery/crossSiteRequestForgery.html)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Cross Site Scripting]({{baseUrl}}/contents/security/crossSiteScripting/crossSiteScripting.html)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Cryptography]({{baseUrl}}/contents/security/cryptography.html)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    * [HTTPS]({{baseUrl}}/contents/security/Https.html)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    * [SQL Injection]({{baseUrl}}/contents/security/sqlInjection.html)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junming403"
        },
        "content": "  * Shell "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junming403"
        },
        "content": "    * [bash]({{baseUrl}}/contents/shells/bash.html)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/navigation\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/span\u003e"
      }
    ],
    "authorContributionMap": {
      "marvinchin": 1,
      "amrut-prabhu": 3,
      "RonakLakhotia": 1,
      "rrtheonlyone": 1,
      "YuPeiHenry": 2,
      "-": 80,
      "junming403": 2,
      "amad-person": 1
    }
  },
  {
    "path": "contents/c++/rvalue.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Rvalue References and Move Semantics"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Rvalue References and Move Semantics"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: [Tan Jun An](https://github.com/yamidark)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* [Background](#background)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Value Semantics](#value-semantics)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Reference Semantics](#reference-semantics)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "* [Move Semantics](#move-semantics)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Rvalue and Lvalue References](#rvalue-and-lvalue-references)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Using Rvalue References](#using-rvalue-references)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Move Semantics](#move-semantics)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* [Rvalue Anti-Pattern](#rvalue-anti-pattern)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* [Resources](#resources)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "## Background"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*C++* is a general-purpose programming language designed to provide high performance and efficiency for resource-constrained and large systems. The language has since been extended and improved upon, with new standards being released periodically. One such standard, the `C++11` standard, improved the performance of the language with features such as **_Rvalue References_** and **_Move Semantics_**."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "In order to better understand the benefits of using Move Semantics, it is important to first understand the two other modes already available in C++, **_Value Semantics_** and **_References Semantics_**."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "### Value Semantics"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Value (or copy) semantics is the programming style where users are only concerned about the values stored in the objects, rather than the object itself. As such, an extra copy of the object will always be created whenever it is passed to a function, (also known as [pass-by-value](http://www.learncpp.com/cpp-tutorial/72-passing-arguments-by-value/)) or when constructing or assigning a new object. This ensures that each object declared (or function) will have their own copied value to use, without having to concern themselves with their originator. By default, C++ uses this mode if variables are declared with only the data type."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Some advantages of Value Semantics include:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Lesser memory management issues, as there won\u0027t be any [dangling references](https://www.quora.com/What-is-dangling-reference) to objects that may not exist, nor any [memory leaks](https://www.geeksforgeeks.org/what-is-memory-leak-how-can-we-avoid/)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* [Referential transparency](https://en.wikipedia.org/wiki/Referential_transparency). Having our own copy of the object ensures that changing the values inside the copied object will not affect the original object. This is especially useful in a [multi-threaded](https://stackoverflow.com/questions/1313062/what-is-a-multithreaded-application) environment, as it removes the need to synchronise the object\u0027s values, allowing the program to run faster."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "* Better performance. If the function requires accessing of the object\u0027s value many times, having a local copy of the object may be faster than having a pointer to the object and dereferencing it each time. This is especially true in C++ which encourages Value Semantics, with optimization techniques such as [copy elision](http://en.cppreference.com/w/cpp/language/copy_elision) in the compiler which speeds up the process of passing-by-value."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "However, Value Semantics has [one major flaw](https://www.quora.com/What-are-the-drawbacks-of-pass-by-value-result):"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* Poor performance and scalability. If the function called is a read-only function, creating an additional copy will be an unnecessary consumption of memory and runtime. This is especially true when scaling up to pass around objects of larger size, as more memory and runtime is needed to create each copy."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "### Reference Semantics"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Reference (or pointer) semantics is another choice available for use in C++, which allows users to declare [pointers](http://www.cplusplus.com/doc/tutorial/pointers/) and [references](https://www.geeksforgeeks.org/references-in-c/) that point to the address of the object. As such, we can pass these reference address to functions and declaration of other pointers, and all of them will refer to and use the same object and address."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Some advantages of Reference Semantics include:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Improved performance and scalability. By passing around pointers and references to the same object, functions can just use the values in that object directly without having to create an extra copy, thus overcoming the major flaw of Value Semantics."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Interactions between objects and functions. Since the same object can be referred to by different pointers, its value can be modified in different areas of the program."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "However, Reference Semantics also comes with its own problems, such as:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "* Indeterminant behaviour. In a multi-threaded environment, since each thread will all be pointing to the same object, this will lead to unnecessary [data races](https://docs.oracle.com/cd/E19205-01/820-0619/geojs/index.html) and indeterminant behaviour as they are modified concurrently in each thread. This in turn requires extra work to synchronize the values between objects, which also slows down the program. More details of this can be found in the resources [Java Concurrency](../java/JavaConcurrency.html) and [Java Synchronization](../java/JavaSynchronization.html)."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Harder to debug. If users are not careful, they may modify the values in the object using one pointer, which will then be reflected by another pointer to the same object in a different part of the program, which can confuse users as they may not know where and why the values are changing. A good example of this problem can be found in this [article](http://www.drdobbs.com/cpp/optimization-calling-by-value-or-by-refe/232400151)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "## Move Semantics"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "From the summary above, there are many benefits for using Value Semantics. However, its one major flaw is that a copy of the object will always be created, which can be computationally expensive if this object is of a large size. Reference Semantics may also not be preferred due to its different problems as discussed above. As such, in order to continue gaining the benefits Value Semantics have over Reference Semantics while overcoming it\u0027s major flaw, `C++11` introduced a new mode to users, Move Semantics."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "### Rvalue and Lvalue References"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "To understand how Move Semantics work in C++, it is important to distinguish between an rvalue and an lvalue."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "lvalue \u003d rvalue"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "From the line above, lvalue (left value) basically refers to values that are addressable, while rvalue (right value) are temporary objects or values which are used only on the right side of an assignment expression. More details and classification of these 2 values can be found [here](http://www.bogotobogo.com/cplusplus/C11/4_C11_Rvalue_Lvalue.php)."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "### Using Rvalue References"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Rvalue References allows us to distinguish an lvalue from an rvalue. In `C++11`, we can declare an Rvalue Reference using the `\u0026\u0026` operator:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "```cpp"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "int \u0026\u0026rvalue \u003d 55;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "We can also convert an lvalue to a rvalue using the `std::move` function:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```cpp"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "int lvalue \u003d 99;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "int \u0026\u0026rvalue2 \u003d std::move(lvalue);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "We can also do [function overloading](https://en.wikibooks.org/wiki/Computer_Programming/Function_overloading)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "in order to determine whether the parameters given are lvalues or rvalues:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "```cpp"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "void print(int\u0026 lvalue) { // takes an lvalue"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    std::cout \u003c\u003c \"lvalue method used\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "void print(int\u0026\u0026 rvalue) { // takes a rvalue"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    std::cout \u003c\u003c \"rvalue method used\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "int main() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    int x \u003d 5;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    print(x); // lvalue method used"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    print(10); // rvalue method used."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Usage of function overloading with Rvalue Reference parameters, which take on temporary objects, helps in writing more efficient programs using Move Semantics!"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "### Move Semantics"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "The main usage of Rvalue References is that it allows us to create *move* constructor and *move* assignments, instead of *copy* constructor and *copy* assignments by default. Since rvalues are typically temporary objects, we can just *move* the value instead of *copying* it, thus reducing  memory consumption and improving performance!"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "One example implementation of a move constructor and move assignment is shown below:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```cpp"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Foo(Foo\u0026\u0026 other) { // move constructor"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    x \u003d other.x;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    y \u003d other.y;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    z \u003d other.z;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Foo\u0026 operator\u003d(Foo\u0026\u0026 other) { // move assignment"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    x \u003d std::move(other.x);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    y \u003d std::move(other.y);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    z \u003d std::move(other.z);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    return *this;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "In this move constructor and assignment, the contents of the `other` parameter is *moved* into the object, and the contents in `other` is destroyed afterwards. No additional memory allocation is required, and the *move* operation is done quickly by a few assignment of address operations, leading to a faster and more memory efficient program."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Along with Move Semantics in `C++11`, the [STL library](https://www.geeksforgeeks.org/the-c-standard-template-library-stl/) provides the overloaded *move* functions for its container classes (e.g. `vector`, `list`, `set`), thus we can take advantage of these Move Semantics by simply supplying rvalues, without the need to redefine the classes ourselves."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "## Rvalue Reference Anti-Pattern"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "After learning about the new Rvalue References and Move Semantics in `C++11`, many programmers from the older C++ eras may fall into a trap of the Rvalue Reference [Anti-Pattern](https://en.wikipedia.org/wiki/Anti-pattern)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Consider these 2 class constructors:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "```cpp"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "Foo(const std::string\u0026 x, const std::string\u0026 y) { // copy constructor"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    _x \u003d x;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    _y \u003d y;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Foo(std::string\u0026\u0026 x, std::string\u0026\u0026 y) { // move constructor"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    _x \u003d x;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    _y \u003d y;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "As shown above, the *move* constructor defines each of its parameter to be Rvalue References. In this case, if the constructor is called using a mixture of both lvalues and rvalues, such as lvalue for `x` and rvalue for `y`, the copy constructor instead will be called! This is because the *copy* constructor is able to accept both lvalues and rvalues, while the *move* constructor is only able to accept rvalues. As such, we may think we have made use of Move Semantics to optimize our program, but that may not be the case!"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "One solution to this problem would be to overload the constructor for each combination of Rvalue Reference parameters possible, like this:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "```cpp"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "Foo(const std::string\u0026 x, const std::string\u0026 y) { // copy constructor"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    _x \u003d x;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    _y \u003d y;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Foo(std::string\u0026\u0026 x, const std::string\u0026 y) { // move constructor 1"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    _x \u003d x;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    _y \u003d y;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Foo(const std::string\u0026 x, std::string\u0026\u0026 y) { // move constructor 2"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    _x \u003d x;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    _y \u003d y;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "Foo(std::string\u0026\u0026 x, std::string\u0026\u0026 y) { // move constructor 3"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    _x \u003d x;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    _y \u003d y;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "However, this is not feasible as we would require `2^n` overload functions, where `n` is the number of parameters. This results increased [boilerplate code](https://www.quora.com/What-is-boilerplate-code), which in turn reduces code quality, increases memory consumption and compilation time."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Rather, what should be provided here is:"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "```cpp"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Foo(std::string x, std::string y) { // move constructor"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    _x \u003d std::move(x);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    _y \u003d std::move(y);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "Yes, revert back to using the old Value Semantics type constructor instead! By doing so, it is now up to the caller to decide whether they want to have an additional copy by calling this constructor with `Foo(x,y)`, or to prevent the additional copy by calling `Foo(std::move(x), std::move(y))`, depending on which value is no longer needed."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "The following resources gives more readings on what was discussed, and a more in-depth tutorial on Rvalue References and Move Semantics:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* [Biggest and important changes in C++11](https://blog.smartbear.com/development/the-biggest-changes-in-c11-and-why-you-should-care/)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* [Why Value Semantics is good to use](https://akrzemi1.wordpress.com/2012/02/03/value-semantics/)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "* [Comparison on pass-by-value or pass-by-reference](http://www.informit.com/articles/article.aspx?p\u003d2731935\u0026seqNum\u003d18)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "* [Tutorial on what is a rvalue and what is a lvalue](http://www.bogotobogo.com/cplusplus/C11/4_C11_Rvalue_Lvalue.php)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "* [Tutorial on using Rvalue References and Move Semantics](http://www.bogotobogo.com/cplusplus/C11/5_C11_Move_Semantics_Rvalue_Reference.php)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "* [C++ Rvalue References Explained in 11 Sections](http://thbecker.net/articles/rvalue_references/section_01.html)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* [Sample examples of using Rvalue References and Move Semantics](http://www.bogotobogo.com/cplusplus/C11/5B_C11_Move_Semantics_Rvalue_Reference.php)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "* [The Rvalue Reference Anti-Pattern](http://cpptruths.blogspot.sg/2012/03/rvalue-references-in-constructor-when.html)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 184,
      "luyangkenneth": 1
    }
  },
  {
    "path": "contents/csharp/IntroductionToCSharp.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  title: Introduction to C#"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "# Introduction to C#"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "**Author(s:) [Yu Pei, Henry](https://github.com/YuPeiHenry)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Reviewers: [Chester Sng](https://github.com/ChesterSng), [Lin Si Jie](https://github.com/sijie123)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "## What is C#"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "C# is a _general purpose_, _multi-paradigm_, _garbage collected_, _cross-platform_ language by Microsoft, and part of the _.NET platform_. Some claim C# is Microsoft\u0027s answer to Java due to the fact that the two languages have a lot of similarities."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Given below are brief explanations of the key characteristics of C# mentioned above."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* **General purpose**: "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "  \u003cblockquote\u003eIn computer software, a general-purpose programming language is a programming language designed to be used for writing software in the widest variety of application domains (a general-purpose language). A general-purpose programming language has this status because it does not include language constructs designed to be used within a specific application domain.\u003cbr\u003e--(source: [Wikipedia](https://en.wikipedia.org/wiki/General-purpose_programming_language))\u003c/blockquote\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* **Multi-paradigm**: [_Programing Paradigms_](https://en.wikipedia.org/wiki/Programming_paradigm) are used to describe Programming Languages based on their features. Some commonly referred paradigms are [Object-Oriented Programming](https://en.wikipedia.org/wiki/Object-oriented_programming) (which primarily organizes code into objects that contain a state) and [Functional Programming](https://en.wikipedia.org/wiki/Functional_programming) (where code represents a sequence of stateless functions.) C# supports both Object-Oriented and Functional Programming, and many others that can be found [here](https://en.wikipedia.org/wiki/C_Sharp_(programming_language))."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* **Garbage Collected**: The intialization, storage and handling of variables require memory. *Garbage Collection* is a form of automatic memory management, where memory that is no longer referenced by the program will be deallocated. You may read more about [Garbage Collection](https://en.wikipedia.org/wiki/Garbage_collection_(computer_science))."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* **Cross-Platform**: [Cross-Platform](https://en.wikipedia.org/wiki/Cross-platform_software) software is software that can be run across multiple platforms, which may require recompilation depending on the software. Common platforms include Windows, MacOS and Linux, and for mobile platforms Android and iOS. The benefits of writing Cross-Platform software is that developers will only need to primarily maintain 1 code base and be able to deploy to multiple platforms."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Below is an example of of a simple C# program:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "```csharp"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "//Comments can be marked with // or /**/"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "//Namespaces are similar to packages, except the file does not need to be physically in the directory"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "using ProjectName.Utils;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "namespace ProjectName.Model"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    //Subclassing BaseClass"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    class MyClass : BaseClass {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        ..."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Method declaration"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        public static void Main(String[] args) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            //Variable definition"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            string message \u003d \"Hello World!\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            Console.WriteLine(message);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Developers that work with C# commonly use Visual Studio as their IDE and also as a build tool for compilation into common application/library formats, such as `.exe` or `.dll`. Using Visual Studio for C# development offers great convenience as it has an integrated testing framework, [MSTest](https://en.wikipedia.org/wiki/Visual_Studio_Unit_Testing_Framework)."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "## C# Syntax Features"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "This section covers some noteworthy features of C# syntax %%(some of them are found in other languages such as Java and Swift)%%."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "### Object/Array/Collection Initializers"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "In C#, you can construct an [Object](https://en.wikipedia.org/wiki/Object_(computer_science) \"In computer science, an object can be a variable, a data structure, a function, or a method, and as such, is a value in memory referenced by an identifier.\"), [Array](https://www.webopedia.com/TERM/A/array.html \"In programming, a series of objects all of which are the same size and type. Each object in an array is called an array element. For example, you could have an array of integers or an array of characters or an array of anything that has a defined data type.\") or [Collection](https://computersciencewiki.org/index.php/Collections \"A collection — sometimes called a container — is simply an object that groups multiple elements into a single unit.\") in a single statement as shown. This can be useful when writing tests, as test data will be better organised, as compared to calling the actual constructor."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "```csharp"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public BookShelf(Book[] books, param2, param3, param4)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    this.books \u003d books"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    // Do something with param 2, 3, 4"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "// Without use of Object Initializer"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "BookShelf shelf1 \u003d new BookShelf(books, param2, param3, param4)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "// With use of Object Initializer"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "BookShelf shelf2 \u003d new BookShelf() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    books \u003d { book1, book2 };"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "};"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "```"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "In the above example, we want to test a `BookShelf`\u0027s behaviors only related to the `Book[] array`. Instead of having to unnecessarily use param2, 3, 4 in construction, we can initialize a `BookShelf` only with the `Book[]` that we wanted to use."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "### Closures"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Sometimes, it may be useful to [defer execution](http://www.informit.com/articles/article.aspx?p\u003d2171751 \"Code that is executed only when results need to be evaluated. There are many reasons for executing code later\") or capture a local context for later execution. Context capturing is reflected below:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "```csharp"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "//Capturing local context"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public class Context"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    //GetCounter returns a nullary (0 argument) function. The function returns an integer when executed."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    public static Func\u003cInt\u003e GetCounter()"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //Inside the context of this function, there is an integer variable count."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        int count \u003d 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        //GetCounter is returning a function."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        return () \u003d\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            //The function increments the count variable inside this context, which is initialized to 0."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            count++;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            //It then returns the current count value."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "            return count;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Func\u003cInt\u003e counter \u003d Context.GetCounter();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "//Every time the function is called, the variable count in the captured context would increment by 1, and its new value will be returned."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "counter(); //Returns 1"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "counter(); //Returns 2"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The ability to capture the value `count` outside of the defined function scope that returns `count`, is called a closure. If you wish to read more about closures, you may consult [this article by dixin](https://weblogs.asp.net/dixin/understanding-csharp-features-6-closure)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "### Nullable type"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Normally to guard against null pointers, an `if` branch or a guard clause that checks against `null` is used. Below is a code example of conventional null pointer handling."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "```csharp"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public static Car ManufactureCar() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    return (hasError) ? null : new Car(param1, param2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public void AddFuelTank() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    fuelTank \u003d  (hasError) ? null : new FuelTank(param3);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Car car \u003d Car.ManufactureCar();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Double fuelLeft \u003d 0;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "if (car !\u003d null)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "{"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    car.AddFuelTank();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\tfuelTank \u003d car.GetFuelTank()"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\tif (fuelTank !\u003d null) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "        fuelLeft \u003d fuelTank.GetFuel();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "DoSomethingTo(fuelLeft);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "```"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "In C#, `null` handling does not need to be done the conventional way. C# has `Nullable` features, such as collaescing operators `??` and null conditional operators `.?`. Some may find this similar to `optionals` in Swift. Applying these features appropriately not only results in shorter and more concise code in general. It makes it easier to reduce the use of indentation as well. Nullables may appear less intuitive to new users, so its value may differ between communities."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "```csharp"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public static Car ManufactureCar() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    return (hasError) ? null : new Car(param1, param2);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "public void AddFuelTank() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "    fuelTank \u003d  (hasError) ? null : new FuelTank(param3);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Car car \u003d Car.ManufactureCar();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "//Call Drive method of car if not null"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "car?.AddFuelTank();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "//Get amount of fuel left with default value 0"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Double fuelLeft \u003d car?.GetFuelTank()?.GetFuel() ?? 0;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "DoSomethingTo(fuelLeft);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "```"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Some explanation of what `Double fuelLeft \u003d car?.GetFuel() ?? 0` does:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* If car is not null, one can expect the statement to evaluate to `car.GetFuel()`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* If car is null, `car?.GetFuel()` evaluates to null."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* If GetFuelTank() returns null, or car evaluates to null, car?.GetFuelTank()?.GetFuel() evaluates to null."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "* `??` operator sees null, so the entire expression defaults to 0. If `??` sees a non-null value, the default value is not used."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "More can be read about Nullables [here](https://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/nullable-types/)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "### Other features"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "The list of features in C# can be quite long. This article only shows you selected features for their usefulness and ability to represent code more concisely. Some features that were not listed are [Async/Await](https://docs.microsoft.com/en-us/dotnet/csharp/async) and [Default Interface Implementation](https://www.infoq.com/articles/default-interface-methods-cs8). If you wish to explore other features, you may consult this [article](https://stackify.com/csharp-8-features/) and others online."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "## Why Learn C#"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "C# is high in demand (as per [source1](https://medium.com/sololearn/why-is-c-among-the-most-popular-programming-languages-in-the-world-ccf26824ffcb), [source 2](https://mashable.com/2018/03/17/coding-course-class-bootcamp/#om2xRzXFHGqJ)). It is especially well-suited for Windows apps. It also thrives in game programming because the popualr game engine Unity has great cross-platform compatibility for desktop, web, mobile and console, and has extensive support for 2D/3D games, VR/AR games and games that require networking. C# can even be used on non-Windows environments as the .NET framework has [cross platform](https://en.wikipedia.org/wiki/Cross-platform_software \"In computing, cross-platform software (also multi-platform software or platform-independent software) is computer software that is implemented on multiple computing platforms.\") support via the [Mono project](https://www.mono-project.com/)."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "## How to Get Started"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "Getting started with C# is not difficult. You can download Visual Studio and follow the setup instructions for C# programming [here](https://www.guru99.com/download-install-visual-studio.html). If you are new to C# but have some familiarity with Java, you may follow the tutorial at [Sololearn](https://www.sololearn.com/Play/CSharp). It is a rather comprehensive tutorial that teaches fundamental syntax and concepts in C#. If you feel that certain parts of the tutorial are too simple, you can also skip them."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "If you are entirely new to programming, you may find more hands on practice with simpler steps at [CSharp net](https://csharp.net-tutorials.com/getting-started/introduction/). This tutorial tends to be more rigorous and goes through in great detail the steps, starting from installing a development environment, to writing basic C# programs and finally topics commonly used in real applications, such as file handling and debugging. If you wish to skip certain parts of the tutorial, the structured contents are displayed on the right side of the website."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "If you want to have a go at maintaining and enhancing a small project, you may find this [fictitious airline reservation system](http://1000projects.org/airline-reservation-system-a-net-project-with-code.html) project"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "to be a good starting point. It covers commonly used components of a software, such as UI (Application User Interface), data storage and handling, and the logic behind the program (such as buying a ticket). More similar projects can be found at [1000projects.org](http://1000projects.org/c-projects.html)."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "If you feel that you have a grasp of C# fundamentals but find it difficult to write programs of bigger scale, you may consult"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "[CSharp corner](https://www.c-sharpcorner.com/UploadFile/bd5be5/design-patterns-in-net/) for a list of design patterns that you may employ to better organise and plan your program structure. Sometimes, you may find that you have problems collaborating on a C# project. This may be due to some common misconceptions and mistakes you are commiting without realisation. You may reduce these problems by reading about [some common mistakes in C# programming](https://www.upwork.com/hiring/development/common-mistakes-in-c-sharp-programming/)."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "If you want to develop a desktop application for Windows, you may consult [Microsoft\u0027s documentation](https://docs.microsoft.com/en-us/visualstudio/get-started/csharp/tutorial-wpf?view\u003dvs-2019) on creating an application with the `Windows Presentation Foundation`, a framework that is commonly used for creating UI for Windows Applications that has many useful features for building your UI."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YuPeiHenry"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "YuPeiHenry": 191
    }
  },
  {
    "path": "contents/data/sql/SQL.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "  title: Introduction to SQL"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "# Introduction to SQL"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "**Author(s): [Amrut Prabhu](https://github.com/amrut-prabhu)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "Reviewers: [Ronak Lakhotia](https://github.com/RonakLakhotia), [Rahul Rajesh](https://github.com/rrtheonlyone)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "## What is SQL?"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "A Relational Database Management System (RDBMS) is a popular database solution used by software applications to manage their data."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "**Structured Query Language** (**SQL**) is a programming language that is specifically designed for interacting with an RDBMS. Unlike other languages, SQL doesn\u0027t come as a standalone installation."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "Rather, RDBMSs %%like MySQL, Oracle, SQL Server and PostgreSQL%% come with an _implementation_ of SQL."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "---"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "### How does SQL work?"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "SQL uses **queries** to retrieve data. Here is an example of how an SQL query is used."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "Suppose we have the data table `Students` shown here:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "| ID | Name  | Course | Faculty |"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "| -- | ----- | ------ | ------- |"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "| 1  | Alex  | CS202  | CS      |"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "| 2  | Bob   | MA303  | MA      |"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "| 3  | Cathy | CS202  | CS      |"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "| 4  | Daren | CS202  | CS      |"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "| 5  | Ellie | CS101  | CS      |"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "| 6  | Fred  | MA303  | MA      |"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "| 7  | Gary  | CS101  | CS      |"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "| 8  | Henry | CS404  | CS      |"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "We can use this SQL query to retrieve information from this table:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "SELECT Course, COUNT(*) num"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "FROM Students"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "WHERE Faculty \u003d \u0027CS\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "GROUP BY Course"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "HAVING COUNT(*) \u003e 1"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "ORDER BY num;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "```"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "This query first filters the entries in the `Students` table such that only entries that have `CS` as the faculty are considered."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "After that, it groups those entries into the 3 courses: `CS101`, `CS202` and `CS404`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "Then, it removes courses that do not have more than 1 student, i.e., `CS404` is removed from consideration."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "Finally, it returns a list of courses with a count of the number of students, ordered in increasing order."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "So, the output of the query is:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "| Course | num |"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "| ------ | --- |"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "| CS101  | 2   |"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "| CS202  | 3   |"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "You can see how this simple query can prove to be extremely useful for getting this information when the table has a large number of rows. Queries can also be used to retrieve data that span across multiple tables. Apart from retrieving information, SQL can be used for creating, deleting and manipulating data with commands like `INSERT`, `DELETE` and `UPDATE` for entries, in addition to `CREATE`, `DROP` and `ALTER` for tables as a whole."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "For example, you can set up the structure of the table shown in Table 1 by executing the `CREATE TABLE` query shown here."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "It creates a new data table `Students`, with 4 fields (`ID`, `Name`, `Course` and `Faculty`) and specifies their data types."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "CREATE TABLE Students(ID int, Name varchar(255), Course varchar(255), Faculty varchar(255));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "We can also remove rows containing the `MA` faculty from Table 1 with this `DELETE` query."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "DELETE"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "FROM Students"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "WHERE Faculty\u003d\u0027MA\u0027;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "\u003cbox type\u003d\"info\"\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "  You can experiment with \u003ca href\u003d\"https://www.db-fiddle.com/f/kHqV2edUGxCc1dU6vE6CmS/1\"\u003ethis example on DB Fiddle\u003c/a\u003e (shown in Figure 1 below) by entering SQL queries and then running them."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "\u003cimg src\u003d\"DBFiddle.png\" alt\u003d\"Running queries on DB Fiddle\" width\u003d\"100%\"\u003e  "
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "_Figure 1. Using DB Fiddle to run queries in MySQL_"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "**Online editors** like DB Fiddle can be used while learning SQL. However, to use SQL in application development, you need to consider other alternatives for running SQL queries:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "- **RDBMS software**: RDBMS installations usually come with a \u003ctooltip content\u003d\"Graphical User Interface\"\u003eGUI\u003c/tooltip\u003e (see Figure 2), but can also be accessed from the command line (see Figure 3)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "\u003cimg src\u003d\"MySQL_Workbench.png\" alt\u003d\"MySQL Workbench GUI Software\" width\u003d\"100%\"\u003e  "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "_Figure 2. MySQL (an RDBMS) can be used in the MySQL Workbench GUI application_ ([source](https://www.mysql.com/products/workbench/))  "
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "\u003cimg src\u003d\"MySQL_CLI.png\" alt\u003d\"Running MySQL from the command line\" width\u003d\"75%\"\u003e  "
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "_Figure 3. Logging in to the MySQL RDBMS and viewing tables from the command line_ ([source](https://www.researchgate.net/figure/The-MySQL-command-line-tool_fig5_328093393))  "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "- **APIs**: You can use APIs in programming languages or independent ones like [SQL API](https://carto.com/developers/sql-api/) (shown in Figure 4) to interact with databases. For example, the [SQLite3](https://www.pythoncentral.io/introduction-to-sqlite-in-python/) library can be used to interact with a database through Python."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "    \u003ccenter\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "    \u003cimg src\u003d\"SQL_API.png\" alt\u003d\"Using SQL API to execute queries\" width\u003d\"95%\"\u003e  "
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "    _Figure 4. An example of how to use CARTO\u0027s SQL API, which uses a PostgreSQL database_ ([source](https://carto.com/developers/sql-api/))  "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "    \u003c/center\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "---"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "## Why learn SQL?"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "The main reason why you should learn SQL is because of its widespread adoption. As SQL is not limited to any particular operating system or programming language, RDBMSs (which use SQL)  are **widely used** by a lot of software applications %%(web, mobile etc.)%%. Hence, in order to utilize almost any relational database or RDBMS available today, you need to know the SQL language."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "## Disadvantage"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "The biggest issue in SQL is with regards to the syntax and features."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "Although SQL databases use established \u003ctooltip content\u003d\"American National Standard Institutes\"\u003eANSI\u003c/tooltip\u003e \u0026 \u003ctooltip content\u003d\"International Organization for Standardization\"\u003eISO\u003c/tooltip\u003e standards, some RDBMSs %%(like PostgreSQL, for example)%% add proprietary extensions to standard SQL."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "Due to this, the available feature set can vary according to what you\u0027re using."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "Furthermore, there may be \u003ctooltip content\u003d\"case-sensitivity, date and time format, functions available out-of-the-box, etc.\"\u003eminor changes in the syntaxes\u003c/tooltip\u003e across RDBMSs."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "These factors can make SQL confusing and frustrating to use when switching across RDBMSs, since you would have to change your SQL queries."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "---"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "## How to get started with SQL?"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "As you saw in the example in the earlier section, SQL is really not that complex. It is easy to learn, even for beginners who do not have any prior experience with databases."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "To get started with SQL, you can either just use an online SQL playground or install an RDBMS. There are many free RDBMSs available like [PostgreSQL](https://www.postgresql.org/) and [MySQL](https://dev.mysql.com/downloads/)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "At the early stages of learning SQL, you can even use online editors like [DB Fiddle](https://www.db-fiddle.com/) %%(supports MySQL and SQLite)%% or [SqliteOnline](https://sqliteonline.com/) %%(supports SQLite)%% since they allow you to start learning without the hassle of setting up anything."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "Here are some recommended steps for learning SQL:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "1. **Understand RDBMS**: Before jumping into the SQL language, refer to this book\u0027s [\u003ctooltip content\u003d\"DataBase Management System\"\u003e**DBMS**\u003c/tooltip\u003e]({{baseUrl}}/contents/data/databases/databases.html) chapter to understand the basic database concepts. More specifically, understand the basic concepts of RDBMS by going through Tutorials Point\u0027s [**SQL- RDBMS Concepts**](https://www.tutorialspoint.com/sql/sql-rdbms-concepts.htm) page. This is not _essential_, but will give you a better high-level understanding before diving into programming."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "1. **Learn SQL Syntax**: These are some recommended resources that you can use to learn the SQL language."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "    - The [**Guru99 SQL Tutorial for Beginners**](https://www.guru99.com/sql.html) is a good course for beginners. It is well organized and provides comprehensive information, which will ensure that you know the basics well."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "    - The [**W3Schools SQL Tutorial**](https://www.w3schools.com/sql/default.asp) is a useful, interactive written tutorial in which you can run and modify SQL queries to see the examples in action."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "    - In order to keep track of and remember the syntaxes that you\u0027re learning, you can refer to the [**W3Schools SQL Quick Reference Guide**](https://www.w3schools.com/sql/sql_ref_mysql.asp). This is particularly useful when you want to look up specific information quickly."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "1. **Use SQL in practice**: Look into different RDBMSs and decide which one you want to work with. You can start by comparing the 3 mentioned in this [**Oracle vs MySQL vs SQL Server**](https://blog.udemy.com/oracle-vs-mysql-vs-sql-server/) post and work from there. Then, set up the corresponding RDBMS and integrate it with an application. This will give you good experience and exposure to how databases are used in practice."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amrut-prabhu"
        },
        "content": "    In the case of MySQL, a good resource for getting started with this is [**MySQLTutorial.org**](http://www.mysqltutorial.org/). The `Interfaces` section of the website contains multiple tutorials explaining how to integrate and work with MySQL from [Node.js](http://www.mysqltutorial.org/mysql-nodejs/), [Java](http://www.mysqltutorial.org/mysql-jdbc-tutorial/), [Python](http://www.mysqltutorial.org/python-mysql/) and more."
      }
    ],
    "authorContributionMap": {
      "amrut-prabhu": 152
    }
  },
  {
    "path": "contents/docker/Docker.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  title: Docker"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "# Docker"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "**Authors: [Rahul Rajesh](https://github.com/rrtheonlyone)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "Reviewers: [Monika Manuela Hengki](https://github.com/monmanuela), [Wang Junming](https://github.com/junming403)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "### What is Docker?"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cpic src\u003d\"Docker_Logo.png\" alt\u003d\"Docker Logo\" width\u003d\"45%\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  \u003csub\u003e_Figure 1. Docker Logo_ [(source)](https://www.theverge.com/circuitbreaker/2018/5/25/17386716/docker-kubernetes-containers-explained)\u003c/sub\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "Docker is a platform that is used to develop, deploy and run applications inside “containers”."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003e A container is a standard unit of software that packages up code and all its dependencies so the application runs quickly and reliably from one computing environment to another. \u003csub\u003e--[Docker Website](https://www.docker.com/resources/what-container)\u003c/sub\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "The idea of containers is not so different from _Virtual Machines_ (VM). Before the rise of Docker, people used VMs. A VM is an emulation of a real computer that is used to isolate an application and its dependencies into a self-contained unit that can run anywhere.  For example, you could use a VM to run an application on a Linux system even though you are running Windows."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "However, a container posses some advantages over a VM. As per the [Docker Documentation](https://docs.docker.com/get-started/), a container runs natively on Linux and shares the kernel of the host machine with other containers. It runs a discrete process, taking no more memory than any other executable, making it lightweight."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cpic src\u003d\"Docker_Architecture.png\" alt\u003d\"Docker Architecture\" width\u003d\"100%\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  \u003csub\u003e_Figure 2. Difference between a container and a VM_ [(source)](https://docs.docker.com/get-started)\u003c/sub\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "By contrast, a virtual machine (VM) runs a full-blown “guest” operating system with virtual access to host resources through a hypervisor. In general, VMs provide an environment with more resources than most applications need. "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "The idea behind Docker is to spin up a lightweight container that is able to execute services quickly without the overhead of a full-blown VM. With this in mind, let us move onto the the reasons to switch over to Docker. The subtleties between a container and VM will become more clear as you read the next few sections."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "### Why Docker?"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "Docker is a powerful tool that is rapidly gaining popularity. These are some statistics for Docker:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cpic src\u003d\"Docker_Statistics.png\" alt\u003d\"Docker Statistics\" width\u003d\"60%\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  \u003csub\u003e_Figure 3. Usage of Docker_ [(source)](https://www.docker.com/company)\u003c/sub\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "Many leading companies (e.g. Spotify, Nginx, ElasticSearch etc.) are using Docker for their deployment!"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "If the numbers aren\u0027t enough to convince you to get started on Docker, as compiled by [RedHat](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/7.0_release_notes/sect-red_hat_enterprise_linux-7.0_release_notes-linux_containers_with_docker_format-advantages_of_using_docker) here are some of the notable advantages that Docker is able to provide:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "- **Rapid application deployment** – containers include the minimal runtime requirements of the application, reducing their size and allowing them to be deployed quickly."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "- **Portability across machines** – an application and all its dependencies can be bundled into a single container that is independent from the host version of Linux kernel, platform distribution, or deployment model. This container can be transferred to another machine that runs Docker, and executed there without compatibility issues."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "- **Version control and component reuse** – you can track successive versions of a container, inspect differences, or roll-back to previous versions. Containers reuse components from the preceding layers, which makes them noticeably lightweight."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "- **Sharing** – you can use a remote repository to share your container with others.Red Hat provides a registry for this purpose, and it is also possible to configure your own private repository."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "- **Lightweight footprint and minimal overhead** – Docker images are typically very small, which facilitates rapid delivery and reduces the time to deploy new application containers."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "- **Simplified maintenance** – Docker reduces effort and risk of problems with application dependencies."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cbox type\u003d\"danger\"\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "As you can read from above, Docker is undeniably a powerful tool that can alleviate your deployment troubles. However, be aware that Docker is not a one-size-fits-all solution to your problems. Docker also has its limitations e.g. refer to this \u003ca href\u003d\"https://www.channelfutures.com/open-source/when-not-to-use-docker-understanding-the-limitations-of-containers/\"\u003earticle\u003c/a\u003e. Carefully consider your use case before turning to Docker."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "Now that we have a good idea of how Docker works and a summary of the notable advantages it is able to provide, let us take a closer look at some of the unique features that Docker is able to provide."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#### Feature: Docker is lightweight "
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": " "
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "We have discussed above that Docker makes use of a container instead of a full-fledged VM to run your application. We have briefly covered the differences between a VM and a container above."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "The table below lists some of the differences between a VM and a container:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cpic src\u003d\"VMvsContainer.png\" alt\u003d\"VM vs Container\" width\u003d\"100%\"\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  \u003csub\u003e_Figure 4. VM vs Container_ [(source)](https://www.backblaze.com/blog/vm-vs-containers/)\u003c/sub\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "The image listed previously in the “What is Docker” section helps to give a pictorial representation of the points listed above in the table. To summarise, a Docker container shares the host OS and runs a discrete process on your operating system (much like any other application). As a result, Docker has a minimal footprint and is much more lightweight. This also makes it faster to run."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#### Feature: Docker allows for sharing and reuse"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "Docker containers require a base image to run. An image corresponds to the service you want e.g. python image / ubuntu image etc. An image helps to define what you want your packaged application and its dependencies to look like."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "One of the reasons why Docker is so great is that it provides a shared resource known as the [Docker Hub](https://hub.docker.com/) to download prebuilt images. The docker hub has over a hundred thousand images created by the community that are readily available for use. "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003cpic src\u003d\"DockerHub.png\" alt\u003d\"Docker Hub\" width\u003d\"100%\"\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  "
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  \u003csub\u003e_Figure 5. Docker Hub_ [(source)](https://hub.docker.com/)\u003c/sub\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "Hence, no matter what your use case is, there is a good chance that someone else has already built an image for it on the Docker Hub. With Docker, you do not have to spend hours thinking about how to configure your images. On top of that, you are free to augment existing images to fit you exact needs. You can then, share your new image back to the Docker Hub for others to use! "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#### Feature: Docker is accessible"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "On top of the abovementioned advantages, Docker has made it much easier for anyone from developers to system admins to take advantage of containers to quickly build and run applications. Docker allows anyone to package an application on their laptop which in turn can run unmodified on any public cloud or private cloud. Hence the mantra, “build once, run anywhere”."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "Docker is able to do this through what is known as a DockerFile. A DockerFile is  where you write the instructions to build a Docker image. Once a DockerFile is set-up, run `docker build` to build the container. "
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "An example of a simple DockerFile is as follows:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#FROM - Image to start building on."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "FROM ubuntu:14.04"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#RUN - Runs a command in the container"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "RUN echo \"Hello Docker!\" \u003e /tmp/hello_docker.txt"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#CMD - Identifies the command that should be used by default when running the image as a container."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "CMD [\"cat\", \"/tmp/hello_docker.txt\"]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "As you can see from above, a DockerFile is a series of instructions that is used to build the container. You start with a base image (ubuntu for the example above) and then add more “layers” to the image, with layers representing a portion of the images file system that either adds to or replaces the layer above it. "
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "For the example used, the layers are simple bash commands that help print “Hello Docker”. A DockerFile is also able to do much more than this! It can install specific dependencies, it can run a couple of servers, set up configuration files etc. There are plenty of guides available out there that covers the fundamentals behind getting started with this (refer to next section for some links)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "As a result, Docker is easy to get started with. Once you have configured a DockerFile, you can reuse it everywhere else to run your container! The process for creating a DockerFile is also made easier due to the plethora of resources available and the Docker Hub."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "#### Feature: Docker is modular and scalable"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "As mentioned earlier, Docker makes it much easier to deploy an application that is using a microservices based architecture. For example, you may have Postgres database running in one container, Redis server in another and a Python Flask application in another. Docker makes it much easier to group these containers together and scale/update individual components easily in the future."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "In order to provide a little more clarity to this, let us consider a simple blog application that is running using Nginx, WordPress and MariaDB. We can organise this as follows:"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cpic src\u003d\"Docker_Microservices.jpg\" alt\u003d\"Docker Microservice Architecture\" width\u003d\"100%\"\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "  \u003csub\u003e_Figure 6. Docker Architecture_ [(source)](https://rubygarage.org/blog/advantages-of-using-docker-for-microservices)\u003c/sub\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/pic\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "Each of the above services is encapsulated in a container using Docker. Docker provides an added functionality called `docker-compose` that allows you to run all the containers at once. `docker-compose` also has added advantages:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "- Preserve volume data when containers are created"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "- Only recreate containers that have changed"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "- Variables and moving a composition between environments"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "The set-up to use `docker-compose` involves the creation of a YAML file. Detailed information on this is available [here](https://docs.docker.com/compose/overview/)."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "### How to use Docker?"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "At this point, you would have realised the advantages that Docker is able to give you and might be considering to switch over to Docker for your own projects. "
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "Here is a learning path that you can follow to pick up Docker:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "- [Docker\u0027s getting started guide](https://docs.docker.com/get-started/) : Docker\u0027s offical documentation is a good place to start out. It is a good overview of the fundamentals behind Docker. They will take you through setting up your own docker environment, building an image, scaling and deploying."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "- [Article covering important concepts behind Docker](https://medium.freecodecamp.org/a-beginner-friendly-introduction-to-containers-vms-and-docker-79a9e3e119b) : After reading the official documentation, this is another excellent article to look through. It covers how Docker works in detail with good examples. "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "- [Books covering specific use cases with Docker](https://github.com/eduleboss/the-best-docker-books) : Once you have a clearer picture on the fundamentals behind Docker, this resource will provide you with a collection of books that show you how to use Docker in a practical setting.  "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "### Additional tools - Docker Swarm and Kubernetes"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "If you have managed to familiarise yourself with the functionality that Docker is able to provide and have used Docker for your own projects, here are some additional tools that you might want to look into that make use of Docker."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "Kubernetes is open-source platform created by Google for container deployment operations, scaling up and down, and automation across the clusters of hosts. It is a tool that can help you manage many docker containers. You can read up more about it in their official documentation [here](https://kubernetes.io/docs/tutorials/kubernetes-basics/)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "Docker Swarm is another alternate tool that is Docker’s own native clustering solution for Docker containers. It monitors the number of containers spread across clusters of servers and is a way to create clustered docker application without additional hardware. The [docker official documentation](https://docs.docker.com/get-started/part4/) gives more information on this."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "### Conclusion / Further Readings"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "In a nutshell, Docker is a lightweight solution to run you application in an isolated environment. Docker provides a convenient out-of-the-box setup to deploy your applications and has added functionality to deploy complex microservices based applications."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "Apart from those listed in the article, here are some further readings/references to get moving with Docker:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "- [Full Guide on multiple aspects of docker](https://docker-curriculum.com/)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "- [Video Series on Docker](https://medium.freecodecamp.org/docker-quick-start-video-tutorials-1dfc575522a0)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "- [Internals of Docker](http://docker-saigon.github.io/post/Docker-Internals/)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "rrtheonlyone"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "rrtheonlyone": 172,
      "-": 1
    }
  },
  {
    "path": "contents/gpgpu/cuda.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: An Introduction to CUDA"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# An Introduction to CUDA"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "###### Author: [Pierce Anderson Fu](https://github.com/PierceAndy)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "- [Disclaimer](#-0-disclaimer)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "- [CUDA](#-1-cuda)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    - [What is CUDA?](#-11-what-is-cuda)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    - [CUDA Terminologies](#-12-cuda-terminologies)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        - [Host](#host)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        - [Host code](#host-code)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        - [Device](#device)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        - [Device code](#device-code)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        - [Streaming Multiprocessors (SMs)](#streaming-multiprocessors-sms)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        - [Kernels](#kernels)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        - [Threads](#threads)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        - [Blocks](#blocks)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        - [Grids](#grids)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            - [NVIDIA\u0027s official word on Kernels, Threads, Blocks, and Grids](#nvidias-official-word-on-kernels-threads-blocks-and-grids)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Kernel Implementations in C](#-13-kernel-implementations-in-c)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        - [Keywords that let kernels get indexes of running threads](#-131-keywords-that-let-kernels-get-indexes-of-running-threads)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            - [gridDim](#griddim)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            - [blockDim](#blockdim)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            - [blockIdx](#blockidx)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            - [threadIdx](#threadidx)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Introductory Tutorial](#-14-introductory-tutorial)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "- [PyCUDA](#-2-pycuda)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    - [What is PyCUDA?](#-21-what-is-pycuda)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Does this mean not having to use C, and coding entirely in Python?](#-22-does-this-mean-not-having-to-use-c-and-coding-entirely-in-python)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    - [So Why bother with PyCUDA?](#-23-so-why-bother-with-pycuda)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Installing PyCUDA](#-24-installing-pycuda)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Minor PyCUDA Terminologies](#-25-minor-pycuda-terminologies)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        - [dtoh](#dtoh)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        - [htod](#htod)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Introductory Tutorial](#-26-introductory-tutorial)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "- [CUDA vs OpenCL](#-3-cuda-vs-opencl)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    - [What is OpenCL?](#-31-what-is-opencl)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Differences between CUDA and OpenCL](#-32-differences-between-cuda-and-opencl)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "- [Further Readings](#-4-further-readings)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "- [References](#-5-references)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "## § 0. Disclaimer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "This learning resource assumes that you understand what GPGPU is."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "If not, find out more about GPGPU at [se-edu\u0027s learning resource on GPGPU](gpgpu.html)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "## § 1. CUDA"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "### § 1.1 What is CUDA?"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "CUDA is a parallel computing platform and programming model from NVIDIA.\u003csup\u003e[[1]](#footnote1)\u003c/sup\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "It allows us to use a CUDA-enabled GPU for GPGPU. The list of GPUs that support CUDA can be found here: https://developer.nvidia.com/cuda-gpus."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "### § 1.2 CUDA Terminologies"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "#### Host"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Refers to CPU and its memory"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "#### Host code"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "Code that runs on CPU"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "#### Device"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Refers to GPU and its memory"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "#### Device code"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Code that runs on GPU"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "#### Streaming Multiprocessors (SMs)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "CUDA GPUs have many parallel processors grouped into SMs"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Each SM can run multiple concurrent thread blocks that execute independently from each other."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "#### Kernels"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "CUDA C extends C by allowing the programmer to define C functions, called kernels, that are run by the GPU."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "When called, kernels are executed `N` times in parallel by `N` different CUDA threads, as opposed to only once like regular C functions.\u003csup\u003e[[2]](#footnote2)\u003c/sup\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "CUDA executes kernels using a grid of blocks of threads."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "#### Threads"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "An execution of a kernel with a given index."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "Each thread uses its index to access elements in array such that the collection of all threads cooperatively processes the entire data set.\u003csup\u003e[[3]](#footnote3)\u003c/sup\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "#### Blocks"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "A logical group of threads."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The threads in a block can be arranged into 1D, 2D, or 3D arrays, and can be identified using 1D (`x`), 2D (`x`, `y`), or 3D (`x`, `y`, `z`) indexes, respectively."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Each block is atomically assigned to and run by a single SM. A single block will never be split up, and it will never be processed by more than one SM. However, note that it isn\u0027t a one-to-one relationship, and one SM can concurrently process more than one block. There is no synchronization between blocks, and they are executed independently from each other.\u003csup\u003e[[3]](#footnote3)\u003c/sup\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "#### Grids"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "A logical group of blocks."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "The blocks in a grid can be arranged into 1D, or 2D arrays, and can be identified using 1D (`x`), or 2D (`x`, `y`) indexes, respectively."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "##### NVIDIA\u0027s official word on Kernels, Threads, Blocks, and Grids"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e When a CUDA program on the host CPU invokes a kernel grid, the blocks of the grid are enumerated and distributed to multiprocessors with available execution capacity. The threads of a thread block execute concurrently on one multiprocessor, and multiple thread blocks can execute concurrently on one multiprocessor. As thread blocks terminate, new blocks are launched on the vacated multiprocessors.\u003csup\u003e[[4]](#footnote4)\u003c/sup\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "![alt text](gpgpu_architecture.png \"GPGPU architecture\")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "### § 1.3 Kernel Implementations in C"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "A kernel is defined using the `__global__` declaration specifier. This tells the CUDA C++ compiler that this is a function that runs on the GPU and can be called from CPU code."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "The number of CUDA threads that execute that kernel for a given kernel call is specified using the `\u003c\u003c\u003c...\u003e\u003e\u003e` execution configuration.\u003csup\u003e[[2]](#footnote2)\u003c/sup\u003e A kernel called `myKernel` can be launched with the following syntax in C:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "`myKernel\u003c\u003c\u003cnumBlocks, numThreadsPerBlock\u003e\u003e\u003e(args)`"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e ##### Definitions:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e *`numBlocks`* refers to the number of thread blocks in the grid."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e *`numThreadsPerBlock`* refers to the number of threads in each thread block."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Note that different GPUs work optimally with different dimension parameters.\u003csup\u003e[[5]](#footnote5)\u003c/sup\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Each thread that executes the kernel is given a unique thread ID that is accessible within the kernel through the built-in `threadIdx` variable."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "As an illustration, the following sample code adds two vectors `A` and `B` of size `N` and stores the result into vector `results`:\u003csup\u003e[[2]](#footnote2)\u003c/sup\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "// Kernel definition"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "__global__ void VecAdd(float* A, float* B, float* results)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    int i \u003d threadIdx.x;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    results[i] \u003d A[i] + B[i];"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "int main()"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    // Kernel invocation of 1D block with N threads"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    VecAdd\u003c\u003c\u003c1, N\u003e\u003e\u003e(A, B, results);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "#### § 1.3.1 Keywords that let kernels get indexes of running threads"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "##### `gridDim`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Dimensions of the grid in blocks."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "First dimension of blocks is accessed with `gridDim.x`, and second dimension is accessed with `gridDim.y`. `gridDim.z` is unused as blocks can either be 1D or 2D only."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "##### `blockDim`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Dimensions of the block in threads."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "First dimension of threads is accessed with `gridDim.x`, second dimension is accessed with `gridDim.y`, and third dimension is accessed with `gridDim.z`."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "##### `blockIdx`"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Block index within the grid. Is grid-level unique."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "##### `threadIdx`"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Thread index within the block. Is block-level unique."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "For instance, the index of a thread in a 1D grid of a 1D block of threads can be determined using"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "`blockIdx.x * blockDim.x + threadIdx.x`"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "### § 1.4 Introductory Tutorial"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to the excellent tutorial by the Chief Technologist for GPU Computing Software at NVIDIA here: [An Even Easier Introduction to CUDA](https://devblogs.nvidia.com/parallelforall/even-easier-introduction-cuda/)."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "Should you have trouble understanding any terms, you can refer to [section 1.2 of this guide on CUDA terminologies](#-12-cuda-terminologies)."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "## § 2. PyCUDA"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "### § 2.1 What is PyCUDA?"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "PyCUDA lets you access NVIDIA‘s CUDA parallel computation API from Python.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "### § 2.2 Does this mean not having to use C, and coding entirely in Python?"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Not entirely so."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "While kernels will have to be written in CUDA C, PyCUDA has helper interfaces that make it easier to write CUDA code (e.g. with memory management and cleanup). However, with the right helpers, you can write CUDA code without needing to write any C code at all. For instance, [see this example from the Wiki that performs a 2D fast Fourier transform (FFT) without any CUDA C code](https://wiki.tiker.net/PyCuda/Examples/2DFFT).\u003csup\u003e[[7]](#footnote7)\u003c/sup\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "### § 2.3 So Why bother with PyCUDA?"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "- Object cleanup tied to lifetime of objects. This idiom, often called [RAII](https://en.wikipedia.org/wiki/Resource_Acquisition_Is_Initialization) in C++, makes it much easier to write correct, leak- and crash-free code. PyCUDA knows about dependencies, too, so (for example) it won’t detach from a context before all memory allocated in it is also freed.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "- Convenience. Abstractions like pycuda.driver.SourceModule and pycuda.gpuarray.GPUArray make CUDA programming even more convenient than with NVIDIA’s C-based runtime.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "- Completeness. PyCUDA puts the full power of CUDA’s driver API at your disposal, if you wish.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "- Automatic Error Checking. All CUDA errors are automatically translated into Python exceptions.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "- Speed. PyCUDA’s base layer is written in C++, so all the niceties above are virtually free.\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "- Helpful [documentation](https://documen.tician.de/pycuda/) and [Wiki](https://wiki.tiker.net/PyCuda).\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "- [Open sourced on GitHub](https://github.com/inducer/pycuda)."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "Thus, if you\u0027re not familiar with C, it would be easier to learn about CUDA through PyCUDA, especially if you have prior experience with Python."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "### § 2.4 Installing PyCUDA"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Official installation instructions here: https://wiki.tiker.net/PyCuda/Installation"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "### § 2.5 Minor PyCUDA Terminologies"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "#### dtoh"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Device to host, *i.e.* GPU to CPU."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "#### htod"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "Host to device, *i.e.* CPU to GPU."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "### § 2.6 Introductory Tutorial"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "Official tutorial here: https://documen.tician.de/pycuda/tutorial.html"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e ##### Note:"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e While still useful and relevant, this tutorial was originally written in 2008, and contains some outdated information."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Specifically, the point about how \"most nVidia [*sic*] devices only support single precision\" is incorrect. All NVIDIA GPUs since GT200 (released in Sep 2008), with compute capability 1.3 or higher, provide hardware support for double precision floating point values and operations.\u003csup\u003e[[8]](#footnote8)\u003c/sup\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e You can find out the compute capability of your NVIDIA card from the [official website](https://developer.nvidia.com/cuda-gpus) or [this table from Wikipedia](https://en.wikipedia.org/wiki/CUDA#GPUs_supported)."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e You can also find out more about the features and specifications of each compute capability version from the [official documentation](http://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html#compute-capabilities) or [these tables from Wikipedia](https://en.wikipedia.org/wiki/CUDA#Version_features_and_specifications)."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "## § 3. CUDA vs OpenCL"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "### § 3.1 What is OpenCL?"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "OpenCL (Open Computing Language) is an open standard for cross-platform, parallel programming of diverse processors found in personal computers, servers, mobile devices and embedded platforms.\u003csup\u003e[[9]](#footnote9)\u003c/sup\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "### § 3.2 Differences between CUDA and OpenCL"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "First and foremost, the most distinctive difference is in how CUDA is proprietary to NVIDIA, whereas OpenCL, while owned by the Khronos Group, is open-sourced. The implications are that if you have an NVIDIA GPU, it supports both CUDA and OpenCL, but if not, and you\u0027re using an AMD GPU, it only supports OpenCL."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, they use different terms. For instance, what NIVIDIA refers to as a \"thread\", OpenCL refers to as a \"work item\"."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "This topic is widely covered. Here are some good references on what the differences are, and what the implications are when choosing one over the other:"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "- https://wiki.tiker.net/CudaVsOpenCL"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "- http://create.pro/blog/opencl-vs-cuda/"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "- https://streamcomputing.eu/blog/2010-04-22/difference-between-cuda-and-opencl/"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "## § 4. Further Readings"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "- [Official CUDA C developer resources](https://developer.nvidia.com/cuda-zone)"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "- [Official CUDA C programming guide](http://docs.nvidia.com/cuda/cuda-c-programming-guide)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "- [Lightning talk slides: GPU Programming Made Easy with Python](https://github.com/nus-oss/lightningtalks/issues/44)"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "- [se-edu\u0027s learning resource on GPGPU](gpgpu.html)"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "## § 5. References"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote1\"\u003e[1]\u003c/a\u003e: http://www.nvidia.com/object/cuda_home_new.html\u003cbr /\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote2\"\u003e[2]\u003c/a\u003e: http://docs.nvidia.com/cuda/cuda-c-programming-guide/#kernels\u003cbr /\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote3\"\u003e[3]\u003c/a\u003e: https://llpanorama.wordpress.com/2008/06/11/threads-and-blocks-and-grids-oh-my/\u003cbr /\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote4\"\u003e[4]\u003c/a\u003e: http://docs.nvidia.com/cuda/cuda-c-programming-guide/#hardware-implementation\u003cbr /\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote5\"\u003e[5]\u003c/a\u003e: http://docs.nvidia.com/gameworks/content/developertools/desktop/analysis/report/cudaexperiments/kernellevel/achievedoccupancy.htm\u003cbr /\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote6\"\u003e[6]\u003c/a\u003e: https://mathema.tician.de/software/pycuda/\u003cbr /\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote7\"\u003e[7]\u003c/a\u003e: http://stackoverflow.com/a/5957647\u003cbr /\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote8\"\u003e[8]\u003c/a\u003e: https://developer.nvidia.com/cuda-faq#Programming\u003cbr /\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote9\"\u003e[9]\u003c/a\u003e: https://www.khronos.org/opencl/\u003cbr /\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 258,
      "luyangkenneth": 2
    }
  },
  {
    "path": "contents/gpgpu/gpgpu.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: An Introduction to GPGPU"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# An Introduction to GPGPU"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "###### Authors: [Pierce Anderson Fu](https://github.com/PierceAndy), [Nguyen Quoc Bao](https://github.com/bqnguyen94)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "- [GPGPU](#-1-gpgpu)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    - [What is GPGPU?](#-11-what-is-gpgpu)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Why bother with parallel processing?](#-12-why-bother-with-parallel-processing)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Aren\u0027t multicore CPUs enough?](#-13-arent-multicore-cpus-enough)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    - [What are the challenges with GPGPU?](#-14-what-are-the-challenges-with-gpgpu)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    - [Implementations](#-15-implementations)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    - [GPGPU in action](#-16-gpgpu-in-action)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "- [Further Readings](#-2-further-readings)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "- [References](#-3-references)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "## § 1. GPGPU"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "### § 1.1 What is GPGPU?"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "GPGPU stands for General-purpose computing on graphics processing units. It is the use of a graphics processing unit (GPU), which typically handles computation only for computer graphics, to perform computation in applications traditionally handled by the central processing unit (CPU).\u003csup\u003e[[1]](#footnote1)\u003c/sup\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Simply put, it\u0027s a kind of parallel processing where we\u0027re trying to exploit the data-parallel hardware on GPUs to improve the throughput of our computers."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "### § 1.2 Why bother with parallel processing?"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Moore\u0027s law is the observation made by Gordon Moore that the density of transistors in an integrated circuit board doubles approximately every two years. It has long been co-opted by the semiconductor industry as a target, and consumers have taken this growth for granted."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Because it suggests exponential growth, it is unsustainable and it cannot be expected to continue indefinitely. In the words of Moore himself, \"It can\u0027t continue forever.\".\u003csup\u003e[[2]](#footnote2)\u003c/sup\u003e There are hard physical limits to this scaling such as heat dissipation rate\u003csup\u003e[[3]](#footnote3)\u003c/sup\u003e and size of microprocessor features.\u003csup\u003e[[4]](#footnote4)\u003c/sup\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "As software engineers, this means that free and regular performance gains can no longer be expected.\u003csup\u003e[[5]](#footnote5)\u003c/sup\u003e To fully exploit CPU throughput gains, we need to code differently."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "### § 1.3 Aren\u0027t multicore CPUs enough?"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Between CPUs and GPUs, there are differences in **scale** and **architecture**."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "- In terms of **scale**, CPUs only have several cores while GPUs house up to thousands of cores."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "- In terms of **architecture**, CPUs are designed to handle sequential processing and branches effectively, while GPUs excel at performing simpler computations on large amounts of data."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This means that CPUs and GPUs excel at different tasks. You\u0027ll typically want to utilize GPGPU on tasks that are data parallel and compute intensive (e.g. graphics, matrix operations)."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e ##### Definitions:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e *Data parallelism* refers to how a processor executes the same operation on different data elements simultaneously."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e *Compute intensive* refers to how the algorithm will have to process lots of data elements."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "### § 1.4 What are the challenges with GPGPU?"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "Not all problems are inherently parallelizable."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "The SIMT (Single Instruction, Multiple Threads) architecture of GPUs means that they don\u0027t handle branches and inter-thread communication well."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "### § 1.5 Implementations"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "- CUDA: [Official website](http://www.nvidia.com/object/cuda_home_new.html)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "- OpenCL: [Official website](https://www.khronos.org/opencl/)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "### § 1.6 GPGPU in action"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "The benefits of GPGPU are even more pronounced when it comes to embedded systems and Internet of Things (IoT) applications, where computing power is often compromised for physical space, weight, and power consumption. For instance, NVIDIA\u0027s Jetson TX2, a computation processor board that delivers the processing capability of the Pascal GPU architecture in a package the size of a business card\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e. The Pascal architecture is used in many desktop computers, data centres, and supercomputers\u003csup\u003e[[7]](#footnote7)\u003c/sup\u003e. Along with its small form factor, this makes the Jetson ideal for embedded systems that require intensive processing power."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "![NVIDIA\u0027s Jetson TX2](jetson_tx2.jpg \"NVIDIA\u0027s Jetson TX2\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "*[NVIDIA Jetson TX2 embedded system-on-module with Thermal Transfer Plate (TTP)](https://devblogs.nvidia.com/jetson-tx2-delivers-twice-intelligence-edge/)*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "Packed with a NVIDIA Pascal GPU with 256 CUDA cores at maximally 1300 MHz\u003csup\u003e[[6]](#footnote6)\u003c/sup\u003e, the TX2 is capable of intensive parallel computational tasks such as real-time vision processing or deploying deep neural networks, allowing mobile platforms to solve complex, real-world problems."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "![DRIVENet](drivenet.jpg \"NVIDIA DRIVENet Demo\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "*[CES 2016: NVIDIA DRIVENet Demo - Visualizing a Self-Driving Future](https://www.youtube.com/watch?v\u003dHJ58dbd5g8g)*"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Compatible with a range of components and large ecosystem products\u003csup\u003e[[8]](#footnote8)\u003c/sup\u003e, the Jetson platform is now widely used for deploying vision and neural network processing onboard mobile platforms like self-driving cars, autonomous robots, drones, IoT, handheld medical devices, etc\u003csup\u003e[[9]](#footnote9)\u003c/sup\u003e."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "## § 2. Further Readings"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "- [How concurrency is the next big change in software development since OO](http://www.gotw.ca/publications/concurrency-ddj.htm)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "- [Official CUDA C programming guide: What GPUs excel at processing, and why](http://docs.nvidia.com/cuda/cuda-c-programming-guide/#from-graphics-processing-to-general-purpose-parallel-computing)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "- [Official CUDA C programming guide: Architecture of NVIDIA GPUs](http://docs.nvidia.com/cuda/cuda-c-programming-guide/#simt-architecture)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "- [Lightning talk slides: An Introduction to GPGPU](https://github.com/nus-oss/lightningtalks/issues/10)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "- [se-edu\u0027s learning resource on CUDA](cuda.html)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "## § 3. References"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote1\"\u003e[1]\u003c/a\u003e: https://en.wikipedia.org/wiki/General-purpose_computing_on_graphics_processing_units\u003cbr /\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote2\"\u003e[2]\u003c/a\u003e: http://www.techworld.com/news/operating-systems/moores-law-is-dead-says-gordon-moore-3576581/\u003cbr /\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote3\"\u003e[3]\u003c/a\u003e: http://theory.physics.lehigh.edu/rotkin/newdata/mypreprs/spie-09b.pdf\u003cbr /\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote4\"\u003e[4]\u003c/a\u003e: https://arstechnica.com/gadgets/2016/07/itrs-roadmap-2021-moores-law/\u003cbr /\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote5\"\u003e[5]\u003c/a\u003e: http://www.gotw.ca/publications/concurrency-ddj.htm\u003cbr /\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote6\"\u003e[6]\u003c/a\u003e: https://www.nvidia.com/en-us/autonomous-machines/embedded-systems-dev-kits-modules/\u003cbr /\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote7\"\u003e[7]\u003c/a\u003e: https://en.wikipedia.org/wiki/Tegra#Tegra_X1/\u003cbr /\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote8\"\u003e[8]\u003c/a\u003e: https://elinux.org/Jetson_TX2#Ecosystem_Products\u003cbr /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003ca name\u003d\"footnote9\"\u003e[9]\u003c/a\u003e: https://developer.nvidia.com/embedded/learn/success-stories\u003cbr /\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 98,
      "luyangkenneth": 1
    }
  },
  {
    "path": "contents/java/JavaConcurrency.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Java Concurrency"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Java Concurrency"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Authors: Vivek Lakshmanan"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* [What is Java Concurrency](#what-is-java-concurrency)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* [Getting started](#getting-started)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Understanding Threads](#understanding-threads)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Creating and Starting Threads](#creating-and-starting-threads)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Operations on Threads](#operations-on-threads)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Thread Interference](#thread-interference)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Executors](#executors)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* [Disadvantages of Java Concurrency](#disadvantages-of-java-concurrency)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* [Resources](#resources)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    * [Further Reading](#further-reading)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "## What is Java Concurrency"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "_Concurrency_ is the ability to run several programs or several parts of a program **out-of-order**, in an **interleaved fashion**. Simply put, if a program is running concurrently, the processor will execute one part of the program, pause it, execute another part and repeat. "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "As such, Java Concurrency enables you to perform tasks using multi-threading in your code and therefore:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. improving responsiveness"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "1. allowing you to better utilize resources "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Do note that _Concurrency_ often gets confused with _Parallelism_ which is **a different property altogether**. _Parallelism_ is where parts of the program are executed at the **same time**, for example, on a multi-core processor. This [StackOverflow post](https://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods/36604522#36604522) explains this in much greater detail."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "## Getting Started"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "There are many tutorials that cover Java Concurrency in-depth, such as the [Java tutorial by Oracle](https://docs.oracle.com/javase/tutorial/essential/concurrency/). Instead, this chapter will provide an overview and things to take note of."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "### Understanding Threads"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "First off, a process is simply a program in execution. It contains at least one thread and has it\u0027s own memory space."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "A thread: "
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* is a lightweight process that exists within a process "
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* is an independent path of execution through program code "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* has its own call stack and can access shared data of other threads in the same process. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Creating and Starting Threads"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "There are two ways to create a thread in Java:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "1. Extend the `Thread` class"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "1. Implement the `Runnable` interface"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "After which, override the `run()` method which contains the code that will be executed when the thread starts. "
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "Depending on how you created the `Thread` you can either create the class that extends the `Thread` class or pass the class that implements the `Runnable` interface into the `Thread` constructor and then start it."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "When deciding which method to use to create a `Thread`, it is always advisable to implement the `Runnable` interface as this results in composition which will allow your code to be more loosely coupled as compared to inheritance. Furthermore, you can extend another class if need be. Shown below are the two ways to create a `Thread`. "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "Extending the `Thread` class:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "public class AnotherThread extends Thread {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"This class extends the Thread class\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "Implemeting the `Runnable` interface:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "public class MyRunnable implements Runnable {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void run() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        System.out.println(\"This class implements the Runnable interface\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Do note that this is only for illustration and can be simplified using lambdas."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "### Operations on Threads"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After creating and starting threads, you can carry out operations on them. There are several such operations you can use to manipulate threads:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* Making a thread sleep for a given amount of time. This is useful for pausing the execution of a thread for a certain amount of time to free up resources for other threads or delaying the execution of the thread.  "
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    Thread.sleep(1000);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "} catch (InterruptedException e){"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    // handle interruption"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "* Joining one thread to the current thread. This will pause the execution of the current thread and cause it to wait until the newly joined thread has finished it\u0027s execution. This is useful in cases where there is a need for the results of another thread before moving on."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    thread2.join();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "} catch (InterruptedException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    // handle interruption"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "### Thread Interference"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "Since threads share the resources of the process they exist in, there will inevitably be conflicts when using shared resources due to the unpredictable nature of threads. When threads try to write to the same resource, thread interference occurs. To illustrate this problem, here\u0027s a sequence of execution for two threads, A and B, that increment and decrement a counter variable respectively:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "1. Thread A retrieves the value of counter and increments it to a value of 1"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "2. Thread B then retrieves the values of counter, which is still 0, and decrements it to a value of -1"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "3. Thread A stores the value of 1 to the counter variable"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "4. Thread B stores the value of -1 to the counter variable and overwrites the previous value stored by Thread A"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "![Thread Interference Sequence](thread_interference.png)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Without thread interference, the expected value of the counter variable would be 0, since one thread increments it while the other decrements it. But with thread interference, the value of counter is simply the value written by the last thread. This is due to the unpredictable nature of threads as there is no way to know when the operating system switches between the two threads. "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "To solve this issue of interference, the keyword `synchronized` is used to ensure that method or block of code can only be accessed by one thread at a time. This is done through the use of the intrinsic lock system, a mechanism put in place by Java to control access to a shared resource. Simply put, each object has it\u0027s own intrinsic lock which:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "* is acquired by the thread that works on it"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "* prevents any other thread from working on it while it\u0027s lock has been acquired"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "This can be illustrated by the following image where once Thread 2 (T2) acquires the lock for the synchronized block of code, the other two threads (T1 and T3) must wait for the synchronized block of code to release it\u0027s lock once T2 to complete its execution:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "![Synchronized block](http://www.javalearningacademy.com/wp-content/uploads/2015/10/Synchronized_Code_Block_And_Thread_Execution.jpg)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "For a deeper look, see the [Java Synchronisation](JavaSynchronization.html) section."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "### Executors"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "While it is easy to create one or two threads and run them, it becomes a problem when your application requires creating 20 or 30 threads for running tasks concurrently. This is where the `Executors` class comes in. It helps you with:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Thread Creation**\u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "It provides various methods for creating threads, more specifically a pool of threads, to run tasks concurrently."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Thread Management**\u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "It manages the life cycle of the threads in the thread pool. You don’t need to worry about whether the threads in the thread pool are active, busy or dead before submitting a task for execution. "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Task submission and execution**\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "It provides methods for submitting tasks for execution in the thread pool, and also allows you to decide when the tasks will be executed. For example, a task can be submitted to be executed instantly, scheduled to be executed later or even executed periodically. Tasks are submitted to a thread pool via an internal queue called the `Blocking Queue`. If there are more tasks than the number of active threads, they are queued until a thread becomes available. New tasks are rejected if the blocking queue is full."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "The `Executors` class provides convenient factory methods for creating the `ExecutorService` class. This class manages the lifecycle of tasks in various ways by assigning a `ThreadPool` to it. Different thread pools manage tasks in different ways along with their own advantages and disadvantages. Some of these include:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* `CachedThreadPool` - Creates new threads as they are needed. This would prove useful for short-lived tasks but otherwise would be resource intensive as it would create too many threads."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* `FixedThreadPool` -  A thread pool with a fixed number of threads. If all threads are active when a new task is submitted, they will be queued until a thread becomes available. This can come in handy when you know exactly how many threads you need, though that may be tricky by itself."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* `ThreadPoolExecutor` - This thread pool implementation adds the ability to configure parameters such as the maximum number of threads it can hold and how long to keep extra threads alive."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Shown below is an image to illustrate how `ExecutorService` and `ThreadPools` are connected (Do note that the `Executor` is not in the image as it creates the `ExecutorService`):"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "![ExecutorService and ThreadPools](https://www.callicoder.com/assets/images/post/large/executor-service-thread-pool-blocking-queue-example.jpg)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "A simple example of using the `Executors` class is shown below where after passing in the task to be executed, it is automatically managed by the `ExecutorService`. For a more detailed look at the workflow of the `ExecutorService`, see this [in-depth tutorial](https://www.callicoder.com/java-executor-service-and-thread-pool-tutorial/).  "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "ExecutorService executor \u003d Executors.newFixedThreadPool(10); "
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "executor.execute(() -\u003e {  "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    System.out.println(\"Hello from: \" + Thread.currentThread().getName());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "});"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "executor.shutdown(); // Remember to shutdown the thread."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "And the corresponding output would be `Hello from: pool-1-thread-1`."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "## Disadvantages of Java Concurrency"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "As the saying goes, _there is no free lunch_. While concurrency provides great benefits as mentioned above, it does come with several issues such as:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "* **A more complex design**\u003cbr\u003e"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Due to the creation of multiple threads and the problem of thread interference, the design becomes more complex as much more work is done to manage these threads such that no problem occurs when the application runs. For instance, take a look at these two implementations of the `Singleton` design pattern: "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Concurrent implementation where you have to ensure that thread interference does not happen"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "public class Singleton{"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Singleton singleton;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    // Create a lock so only one thread can access this object at a time."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Lock lock \u003d new ReentrantLock();  "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private Singleton() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Singleton getSingleton() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // This thread has acquired this object, so lock to ensure other threads don\u0027t interfere."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        lock.lock();  "
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            if (singleton \u003d\u003d null) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                singleton \u003d new Singleton();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            // Release lock once you\u0027re done so others can access this object."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            lock.unlock();  "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return singleton;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Vs the usual implementation"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "public class Singleton {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Singleton singleton;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private Singleton() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        //..."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Singleton getSingleton() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        if (singleton \u003d\u003d null) { "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "            singleton \u003d new Singleton();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        return singleton;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "```  "
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* **Harder debugging and testing process**\u003cbr\u003e"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "The unpredictable nature of threads result in errors that can be hard to detect, reproduce and fix as these errors don\u0027t crop up consistently like normal errors do."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "* **Context switching overhead**\u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "When a CPU switches from executing one thread to executing another, the CPU needs to save the state of the current thread, and load the state of the next thread to execute, making this process of context switching very expensive."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "The following resources are the many in-depth tutorials that will help you get a better grasp of concurrency in Java."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* [Seven part series on the basics of Concurrency in Java](https://baptiste-wicht.com/posts/2010/05/java-concurrency-part-1-threads.html)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* [High-level overview of Concurrency in Java by Vogella](http://www.vogella.com/tutorials/JavaConcurrency/article.html#concurrency)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* [Concurrency best practices](https://www.javacodegeeks.com/2015/09/concurrency-best-practices.html)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* [Java 101: Understanding Java threads](https://www.javaworld.com/article/2074217/java-concurrency/java-101--understanding-java-threads--part-1--introducing-threads-and-runnables.html)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* [Java Concurrency / Multithreading Tutorial by Jenkov](http://tutorials.jenkov.com/java-concurrency/index.html)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* [Java Concurrency Tutorial by tutorialspoint](https://www.tutorialspoint.com/java_concurrency/concurrency_overview.htm)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "### Further Reading"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "The following resources are interesting reads for a deeper understanding."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* [What is the difference between a process and a thread in Java?](https://beginnersbook.com/2015/01/what-is-the-difference-between-a-process-and-a-thread-in-java/)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* [Computer Science Stack Exchange Post on the difference between Concurrency and Parallelism](https://cs.stackexchange.com/questions/19987/difference-between-parallel-and-concurrent-programming)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* [Java Locks and Atomic Variables Tutorial](https://www.callicoder.com/java-locks-and-atomic-variables-tutorial/)"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* [A comparison between concurrency in Golang and Java](https://www.quora.com/What-is-the-advantage-of-Googles-Golang-over-Java-and-Scala)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 233,
      "luyangkenneth": 1
    }
  },
  {
    "path": "contents/javascript/Javascript-framework-Angular.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "  title: Introduction to Angular"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "# Introduction to Angular"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "**Author: [Ronak Lakhotia](https://github.com/RonakLakhotia)**                                                              "
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "Reviewers: [Tan Heng Yeow](https://github.com/tanhengyeow), [Jacob Li PengCheng](https://github.com/jacoblipech)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "## What is Angular?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "The [official website](https://angular.io/docs) describes Angular as follows:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003eAngular is a platform that makes it easy to build applications with the web. Angular combines declarative templates, dependency injection, end to end tooling, and integrated best practices to solve development challenges. Angular empowers developers to build applications that live on the web, mobile, or the desktop."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "Let us understand some key terms in that definition starting with _declarative templates_."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "### Declarative Templates and Components"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "Consider a simple web application that displays the name of a person as shown below."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003ciframe src\u003d\"https://stackblitz.com/edit/angular-3qy4j2?embed\u003d1\u0026file\u003dsrc/app/app.component.ts\u0026view\u003dpreview\" style\u003d\"width:85%; height:380px; border:0; border-radius: 4px; overflow:hidden;\" sandbox\u003d\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\u003e\u003c/iframe\u003e "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003cbox type\u003d\"info\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    The sandbox allows you to edit the code of the web application. You can enter your name in the text box and see how the UI is automatically updated. You can also view and edit the code by clicking on the \"Both\" button. "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "The UI of an Angular app is defined in _templates_ which contain a mix of HTML code and HTML-like [custom tags](https://angular.io/guide/elements). The template for the above example (defined in `person.component.html`) is given below:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "``` html"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003ch1\u003eAbout Me!\u003c/h1\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003ch2\u003eHello World! My name is {person.name}\u003c/h2\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003cdiv\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003clabel\u003eNAME: \u003cinput [(ngModel)]\u003d\"person.name\"/\u003e\u003c/label\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "  "
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "The templates used in Angular are _declarative_ because they describe _what_ the view should look like rather than give instructions on _how_ to construct the view. In the above example, we declare what we want to display (i.e., name) and Angular renders the view. A noteworthy feature about the UI rendered by Angular is its _dynamic behavior_."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "You will notice that as you change the name in the text box, the name rendered on the app is also updated. This is because the UI and the application data are automatically synchronized by Angular as explained [here](https://angular.io/guide/template-syntax#binding-syntax-an-overview)."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "Angular organizes the instructions (written in _TypeScript_) that describe _how_ the view must rendered, into _Components_. Given below is the component file `person.component.ts` of the `PersonComponent` :  "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "```typescript"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "@Component({"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "  selector: \u0027app-person\u0027,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "  templateUrl: \u0027./person.component.html\u0027,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "  styleUrls: [\u0027./person.component.css\u0027]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "})"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "export class PersonComponent {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "  person: Person \u003d {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    name: \u0027John Doe\u0027"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "  };"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "  constructor() { }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "The `@Component` tag is used to mark a component. It provides the metadata that determines how the component is processed during runtime."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "* The use of `selector: app-person` is how Angular identifies this component in a template. This is an example of a custom tag used in Angular templates. The following code constitutes the template of `app.component.html`."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    ```html"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    \u003ch1\u003ePerson Data\u003c/h1\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    \u003capp-person\u003e\u003c/app-person\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    \u003chr/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    Angular identifies the `\u003capp-person\u003e` tag, instantiates the `PersonComponent` and renders the view defined by the template `./person.component.html`."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "* The `person.name` used in the template `./person.component.html`, refers to the name property defined in the above component."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "### Dependency Injection"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "Now let us look at what _Dependency Injection_ (DI) means. Dependencies are _services_ that a class needs in order to perform its function. We can visualize this with the help of an example."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003cimg src\u003d\"dependency.png\" width\u003d\"60%\"\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "_Figure 1. What is a dependency?_ (source: [freecodecamp](https://medium.freecodecamp.org/a-quick-intro-to-dependency-injection-what-it-is-and-when-to-use-it-7578c84fa88f))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "Dependency injection is a way of providing a class with the required services. Given below is an injectable service class."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": " "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "```typescript"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "import { Injectable } from \u0027@angular/core\u0027;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "import { PERSONS } from \u0027./mock-persons\u0027;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "@Injectable({"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "  providedIn: \u0027root\u0027,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "})"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "export class PersonService {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "  getPersons() { return PERSONS; }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "}"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "```"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "The `PersonComponent` declared previously, can make use of this `PersonService` by injecting the dependency in its constructor as a parameter."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "constructor(personService: PersonService) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": " this.persons \u003d personService.getPersons();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "In the above example, we write the `getPersons` method only once in the service class and we can access this method from any component by injecting the service in the constructor."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "This way of using DI increases the efficiency and modularity (as per the [Angular official website](https://angular.io/guide/dependency-injection))."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "Declarative Templates and Dependency Injection are only a couple of noteworthy features of Angular. A more comprehensive [list](https://angular.io/features) is available on the official website. "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": " "
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "## Why Angular?"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "Now that we know what Angular is, let us look at some benefits it has to offer."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "### Benefit 1: Angular Provides Good Tooling Services"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "Angular provides developers with tools that enforce \"best practices\". Let us look at some of these tools."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "* **TypeScript** - Angular applications are built using the TypeScript language, a superset of JavaScript."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "TypeScript provides \u003ctooltip content\u003d\"Static typing involves type checking during compile-time as opposed to run-time. Types are associated with variables not values.\"\u003estatic typing\u003c/tooltip\u003e."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "This helps the compiler show warnings about any potential errors in the code, before the app runs. Consider the following example: "
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    ```typescript"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    function add(x : number, y : number) : number {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "        return x + y;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    add(\u0027a\u0027, \u0027b\u0027); // compiler flags an error"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    In the code above, parameters `x` and `y` are declared to have the type `number`. Thus, the compiler shows an error when the function is called with strings as inputs to the function."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    "
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    Another advantage of TypeScript is _Type Inference_ - TypeScript makes typing a bit easier and less explicit by the usage of type inference. Let us see how."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    "
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    ```typescript"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    let a \u003d \"some text\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    let b \u003d 123;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    a \u003d b; // Compiler Error: Type \u0027number\u0027 is not assignable to type \u0027string\u0027"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    ```    "
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    "
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    In the above code snippet, we are not explicitly defining `a: string` with a type annotation. TypeScript infers the type of the variable based on the value assigned to the variable. The value of `a` is a string and hence the type of `a` is inferred as `string`."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    Similarly, the type of `b` is inferred as `number`. Therefore, while inferring types, the compiler flags an error saying a `number` type cannot be assigned to a `string` type."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    "
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    You can read this [article](https://medium.com/tech-tajawal/typescript-why-should-one-use-it-a539faa92010) to learn more about the features that TypeScript has to offer."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    "
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "* **Angular CLI** - Angular CLI stands for Angular Command Line Interface. It is a command line tool for managing Angular apps. "
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    With the CLI you can perform the following commands to ease the development process."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "     - Generate a new Angular application with - `ng new`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "     - Generate Angular files - `ng generate`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "     - Build your application for deployment - `ng build`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "     "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    You can refer to the [official documentation](https://cli.angular.io/) for a complete list of the CLI commands."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    "
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    The Angular CLI also helps developers follow good development practices. For example, "
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    The Angular CLI has out-of-the-box integration with \u003ctooltip content\u003d\"Codelyzer is an open source tool that checks whether the pre-defined coding guidelines have been followed\"\u003e**Codelyzer**\u003c/tooltip\u003e."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    Codelyzer lints your code against the [official Angular style guide](https://angular.io/guide/styleguide). With Angular CLI, you can simply run the command `ng lint` to get an analysis of whether your code follows the \"best practices\"."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "        "
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "This [article](https://medium.freecodecamp.org/best-practices-for-a-clean-and-performant-angular-application-288e7b39eb6f) provides a comprehensive list of best tooling services offered by Angular."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": " "
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "### Benefit 2: Angular Allows Cross-Platform Development"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "Using the modern versions of Angular, developers can build applications that live on the web, mobile, or the desktop."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "* **Progressive Web Apps** - PWAs are web-based applications that contain most of the benefits of a typical mobile app. The [official documentation](https://developers.google.com/web/progressive-web-apps/) written by Google describes PWAs to be reliable, fast and engaging. With Angular you can develop PWAs and provide an immersive user experience."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "This [article](https://medium.com/@nsmirnova/creating-pwa-with-angular-5-e36ea2378b5d) is a good place to learn the basics of building PWAs using Angular."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "* **Native Apps** - Angular can be used to build \u003ctooltip content\u003d\"a smartphone application that is coded in a specific programming language, such as Swift for iOS or Java for Android operating systems\"\u003enative mobile applications\u003c/tooltip\u003e. There are many frameworks such as [NativeScript](https://www.nativescript.org/) and [Ionic](https://ionicframework.com/)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "that can be integrated with Angular for mobile application development. As per the [official Ionic website](https://ionicframework.com/docs/intro), it is easy to integrate Ionic with the Angular."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "* **Desktop Apps** - With Angular you can create desktop applications across Mac, Windows and Linux systems. In order for your application to be compatible with the different Operating Systems, you can use the \u003ctooltip content\u003d\"Electron is a framework that provides a set of APIs to interact with the Windows, OS X, and Linux operating systems. It makes cross-platform development easier.\"\u003e[Electron](https://electronjs.org/)\u003c/tooltip\u003e framework."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "You can integrate the Electron framework in your project using the Angular CLI and start building your application."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "This [article](https://medium.com/@yannmjl/how-to-build-native-cross-platform-desktop-apps-with-angular-electron-bd1d6e3919b2) is a good introduction to building desktop apps with Angular and Electron."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "### Benefit 3: Angular Provides Two-way Data Binding"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "Web apps have two main components, a _View_ and a _Model_. The View component is responsible for displaying data (i.e., the part users see). The Model is concerned with the logic implementation of the application. It updates and retrieves the data to and from the database."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "_Data binding_ refers to the exchange of data between the View and Model components. There are two types of data binding as shown below."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003ccenter\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003cimg src\u003d\"data.jpg\" width\u003d\"50%\"\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "_Figure 2. Types of data binding_ ([source](https://osmangoni.info/posts/one-way-and-two-way-data-binding/))"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\u003c/center\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "Some frameworks like [React](https://reactjs.org/docs/thinking-in-react.html) provide one-way data binding i.e., when there is a change to the Model, the View updates automatically."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "However, if the app allows users to change data through the view (e.g., entering your name in the textbox), the developer has to write code to propagate that change to the Model."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "In contrast, Angular provides data binding in both ways. That means even changes to the View can be propagated to the Model automatically, without writing extra code for that."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "This [article](https://medium.com/@preethi.s/angular-custom-two-way-data-binding-3e618309d6c7) on Medium provides a good introduction to two-way data binding in Angular."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "### Disadvantages of Angular"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "Like any other framework/library, Angular has its share of disadvantages."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "1. **Steep Learning Curve** - Angular requires you to learn many concepts, such as _directives_, modules, components, services and many more. "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "The large number of new concepts can be confusing to newcomers. Additionally, Angular requires you to learn a new language, TypeScript."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "2. **Opinionated Framework** - Angular is opinionated about how you structure your code. This means that Angular provides you defaults for building applications. For instance, there are in-built services to perform data fetching, state management and much more. It is also opinionated about the development language as it requires you to use TypeScript.\u003cbr/\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "In contrast, React allows you to integrate any third party services in your application."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "    "
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "### Comparison with other popular frontend frameworks"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "[React](\"https://reactjs.org/\") and [Vue](\"https://vuejs.org/\") are two popular alternatives to Angular."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "React is a popular Javascript library, open sourced by Facebook. The ease of learning React is a key advantage over Angular."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "It also provides more flexibility as it allows integration of third party libraries."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "Vue, another open-source JavaScript framework, offers some advantages over Angular, like increased flexibility, simple structure and ease of integration. This makes it easier to learn Vue as compared to Angular or React."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "Below are a few resources that give a brief comparison between these popular frontend frameworks."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "1. [React vs Angular vs Vue](https://medium.com/@TechMagic/reactjs-vs-angular5-vs-vue-js-what-to-choose-in-2018-b91e028fa91d) - A brief comparison between the three most popular frontend tools."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "2. [Why use Vue](https://medium.com/@brainmobi/advantages-of-using-vue-js-for-your-web-applications-7e460cadfffc) - Advantages of using Vue."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "3. [Angular vs React](https://programmingwithmosh.com/react/react-vs-angular/) - A comprehensive comparison between React and Angular."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "## How to get started with Angular?"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "Given below are a few steps that will help you ease into the Angular environment:"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "1. [Different versions of Angular](https://www.simplilearn.com/angularjs-vs-angular-2-vs-angular-4-differences-article) - Before you start learning Angular, you must have a clear idea of its different versions."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "2. [Start learning TypeScript](https://www.typescriptlang.org/docs/home.html) - Development in Angular relies heavily on TypeScript. You can start learning the basics of the new language from its official website."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "3. [The official Angular website](https://angular.io/guide/quickstart) - offers a good tutorial to get started. It shows you how to build and run a simple \"Hello World\" application in Angular."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "4. [Build your first Angular app](https://scrimba.com/g/gyourfirstangularapp) - You are recommended to complete this course taught by an Angular expert. It teaches you the important concepts of Angular in the form of interactive tutorials."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "5. [StackOverflow Questions on Angular](https://stackoverflow.com/questions/tagged/angular?sort\u003dvotes\u0026pageSize\u003d50) - You can also refer to this list of top voted questions on Angular if you need help while developing your own Angular application."
      }
    ],
    "authorContributionMap": {
      "RonakLakhotia": 233
    }
  },
  {
    "path": "contents/javascript/Javascript-framework-React.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "amad-person"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "amad-person"
        },
        "content": "  title: React"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "amad-person"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "amad-person"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "amad-person"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "amad-person"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "amad-person"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "amad-person"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "amad-person"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "amad-person"
        },
        "content": "  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "amad-person"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "amad-person"
        },
        "content": "# React"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "amad-person"
        },
        "content": "**Author: [Aadyaa Maddi](https://github.com/amad-person)** \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "amad-person"
        },
        "content": "Reviewers: [Amrut Prabhu](https://github.com/amrut-prabhu), [Marvin Chin](https://github.com/marvinchin)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "amad-person"
        },
        "content": "### What is React?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "amad-person"
        },
        "content": "The [official website](https://reactjs.org/tutorial/tutorial.html#what-is-react) describes React as follows:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "amad-person"
        },
        "content": "\u003e React is a declarative, efficient, and flexible JavaScript library for building user interfaces. It lets you compose complex UIs from small and isolated pieces of code called \u0027components\u0027. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "amad-person"
        },
        "content": "Let us understand some key features of React with the help of an example. A web application that displays the name of a person is given below:  "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "amad-person"
        },
        "content": "\u003ciframe src\u003d\"https://codesandbox.io/embed/8kxx088nx2?fontsize\u003d12\u0026view\u003dpreview\" style\u003d\"width:100%; height:400px; border:0; border-radius: 4px; overflow:hidden;\" sandbox\u003d\"allow-modals allow-forms allow-popups allow-scripts allow-same-origin\"\u003e\u003c/iframe\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "amad-person"
        },
        "content": "\u003cbox type\u003d\"info\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "amad-person"
        },
        "content": "    The sandbox above is editable. You can change the name using the textbox in the application and see how the UI automatically gets updated. You can view the application code by clicking the blue button next to \"React: An Introductory Example\". "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "amad-person"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "amad-person"
        },
        "content": "#### Declarative"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "amad-person"
        },
        "content": "The UI of a React application is defined using a mix of HTML code and HTML-like syntax, called [JSX](https://reactjs.org/docs/introducing-jsx.html). The main view of the application above (defined in the `App.render()` method in `index.js`) is given as follows:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "amad-person"
        },
        "content": "```jsx"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "amad-person"
        },
        "content": "\u003cdiv className\u003d\"App\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "amad-person"
        },
        "content": "  \u003ch1\u003ePerson Data\u003c/h1\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "amad-person"
        },
        "content": "  \u003cPersonComponent"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "amad-person"
        },
        "content": "    name\u003d{this.state.name}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "amad-person"
        },
        "content": "    changeHandler\u003d{this.handleChange}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "amad-person"
        },
        "content": "  /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "amad-person"
        },
        "content": "\u003c/div\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "amad-person"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "amad-person"
        },
        "content": "In the above example, we declare what we want to display (i.e. `name`) and React renders the appropriate view based on the updated application data. This is known as the \u003ctooltip content\u003d\"Declarative programming focuses on what the program should accomplish without specifying how the program should achieve the result.\"\u003e*declarative*\u003c/tooltip\u003e approach. With the declarative approach, you just need to specify *what* you want to show in the UI when the application data changes, rather than giving instructions on *how* to update the UI. "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "amad-person"
        },
        "content": "#### Components"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "amad-person"
        },
        "content": "React encapsulates application views and relevant data and logic for updating the views using *components*. A combination of components that exchange information with one another is used to build the UI of a React application. "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "amad-person"
        },
        "content": "For example, the application above is divided into two components: "
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "amad-person"
        },
        "content": "1. **App**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "amad-person"
        },
        "content": "    The `App` component (defined in `index.js`) contains the main view of the application. It stores the application data (i.e. `name`) in an object called *`state`* and has a method to update the it every time the value in the textbox changes. It passes the application data and the method to the `PersonComponent`."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "amad-person"
        },
        "content": "    "
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "amad-person"
        },
        "content": "    ```jsx"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "amad-person"
        },
        "content": "    class App extends Component {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "amad-person"
        },
        "content": "      state \u003d {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "amad-person"
        },
        "content": "        name: \"John Doe\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "amad-person"
        },
        "content": "      };"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "amad-person"
        },
        "content": "    "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "amad-person"
        },
        "content": "      handleChange \u003d event \u003d\u003e {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "amad-person"
        },
        "content": "        this.setState({"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "amad-person"
        },
        "content": "          name: event.target.value"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "amad-person"
        },
        "content": "        });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "amad-person"
        },
        "content": "      };"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "amad-person"
        },
        "content": "    "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "amad-person"
        },
        "content": "      render() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "amad-person"
        },
        "content": "        return ("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "amad-person"
        },
        "content": "          \u003cdiv className\u003d\"App\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "amad-person"
        },
        "content": "            \u003ch1\u003ePerson Data\u003c/h1\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "amad-person"
        },
        "content": "            \u003cPersonComponent"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "amad-person"
        },
        "content": "              name\u003d{this.state.name}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "amad-person"
        },
        "content": "              changeHandler\u003d{this.handleChange}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "amad-person"
        },
        "content": "            /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "amad-person"
        },
        "content": "          \u003c/div\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "amad-person"
        },
        "content": "        );"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "amad-person"
        },
        "content": "      }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "amad-person"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "amad-person"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "amad-person"
        },
        "content": "1. **PersonComponent**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "amad-person"
        },
        "content": "    `PersonComponent` (defined in `personComponent.js`) renders the details of the person. It accepts input from the `App` component in the form of *`props`*."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "amad-person"
        },
        "content": "    "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "amad-person"
        },
        "content": "    ```jsx"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "amad-person"
        },
        "content": "    const PersonComponent \u003d props \u003d\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "amad-person"
        },
        "content": "      return ("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "amad-person"
        },
        "content": "        \u003cdiv className\u003d\"Person\"\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "amad-person"
        },
        "content": "          \u003ch2\u003eAbout Me\u003c/h2\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "amad-person"
        },
        "content": "          \u003cp\u003eMy name is {props.name}.\u003c/p\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "amad-person"
        },
        "content": "          \u003clabel htmlFor\u003d\"name\"\u003eName: \u003c/label\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "amad-person"
        },
        "content": "          \u003cinput id\u003d\"name\" onChange\u003d{props.changeHandler} value\u003d{props.name} /\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "amad-person"
        },
        "content": "        \u003c/div\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "amad-person"
        },
        "content": "      );"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "amad-person"
        },
        "content": "    };"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "amad-person"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "amad-person"
        },
        "content": "As you can see, React components are just JavaScript functions that accept arbitrary input and return a declarative view describing what should appear in the application\u0027s UI. "
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "amad-person"
        },
        "content": "#### One-Way Data Binding"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "amad-person"
        },
        "content": "*Data binding* refers to the exchange of information between the application data and the UI. React provides *one-way* data binding. In applications that use one-way data binding, changes to the application data are automatically reflected in the UI. However, changes to the UI need to be manually propagated to the application data. "
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "amad-person"
        },
        "content": "In the above application, you can see that the UI is updated whenever a different name is entered in the textbox. These updates do not happen in a single step - the application data is first updated using the `handleChange()` method, and then the UI is updated to reflect these changes. "
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "amad-person"
        },
        "content": "### Why use React?"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "amad-person"
        },
        "content": "Now that we know what React is, let us take a look at some of its benefits."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "amad-person"
        },
        "content": "#### Benefit 1: Better Performance"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "amad-person"
        },
        "content": "Web applications can have a lot of user interaction and data updates, which results in changes being made to the \u003ctooltip content\u003d\"The Document Object Model, or the \u0027DOM\u0027, is an interface to web pages. It represents the page as nodes and objects, allowing programs to read and manipulate the page\u0027s content, structure, and styles.\"\u003eDOM\u003c/tooltip\u003e. Adding and removing DOM nodes isn\u0027t slow, but the performance-bottleneck arises because the browser needs to \u003ctooltip content\u003d\"A reflow occurs when the structure of the DOM tree changes, and a repaint occurs on style changes. These operations can get quite expensive for large DOM trees.\"\u003e*[reflow and repaint](https://www.phpied.com/rendering-repaint-reflowrelayout-restyle/)*\u003c/tooltip\u003e the UI every time the DOM is changed."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "amad-person"
        },
        "content": "React minimizes this update time by using a *virtual DOM*. The virtual DOM is a JavaScript object that is kept in the memory of your application."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "amad-person"
        },
        "content": "![React\u0027s Virtual DOM](javascript-framework-react-images/ReactVirtualDOM.png \"React\u0027s Virtual DOM\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "amad-person"
        },
        "content": "_Figure 1. How React\u0027s actual DOM gets updated._"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "amad-person"
        },
        "content": "As shown in Figure 1 above, updates to the UI will first be made to the virtual DOM. Then, React will compare the virtual DOM with the actual DOM using a *[diffing algorithm](https://reactjs.org/docs/reconciliation.html#the-diffing-algorithm)*. "
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "amad-person"
        },
        "content": "Finally, React updates the actual DOM only in places it differs with the virtual DOM. It batches multiple changes together and updates the actual DOM in one go, minimizing update time. "
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "amad-person"
        },
        "content": "#### Benefit 2: Abstraction"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "amad-person"
        },
        "content": "The traditional \u003ctooltip content\u003d\"Imperative programming focuses on explicitly describing how a program operates.\"\u003e*imperative*\u003c/tooltip\u003e approach of building a web application requires you to describe how you want your UI to change when your application data changes. "
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "amad-person"
        },
        "content": "Most web applications usually have to interact with a lot of DOM elements and events. Also, different browsers have variations in their implementations of the \u003ctooltip content\u003d\"The core DOM consists of the properties and methods of the DOM (nodeName, getElementById(), etc).\"\u003e[core DOM](https://quirksmode.org/dom/core/)\u003c/tooltip\u003e, \u003ctooltip content\u003d\"The events system consists of different kinds of events that the DOM supports (blur, change, etc).\"\u003e[events system](https://www.quirksmode.org/dom/events/index.html)\u003c/tooltip\u003e and even [styles](https://www.quirksmode.org/dom/w3c_css.html) that can be applied to DOM elements! If you want your application to work across different browsers, you would need to manually take care of these variations with the imperative approach. "
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "amad-person"
        },
        "content": "React\u0027s declarative approach simplifies this process because it abstracts the complexity of interacting with the actual DOM elements and events. For example, the virtual DOM helps React abstract browser-specific operations on DOM elements. Additionally, React provides its own [events system](https://reactjs.org/docs/events.html) so that events can work in the same way across different browsers."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "amad-person"
        },
        "content": "#### Benefit 3: Testability"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "amad-person"
        },
        "content": "A React application is made up of a combination of components. Components are independent from each other, and like functions, they map the same input to the same output. This makes it easy to write unit tests for your application."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "amad-person"
        },
        "content": "Additionally, React only allows data to flow downwards (one-way data binding) using `state` and `props`, which makes your application [easier to debug](https://reactjs.org/docs/design-principles.html#debugging) as you can be sure that the data updates the UI, and never the other way around. "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "amad-person"
        },
        "content": "#### Other Advantages of React"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "amad-person"
        },
        "content": "Besides the three main benefits explained above, React has the following advantages:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "amad-person"
        },
        "content": " - React is not an \u003ctooltip content\u003d\"An opiniated framework guides or locks you into their preferred way of doing things.\"\u003e*opinionated*\u003c/tooltip\u003e framework, which gives you the flexibility to choose your application stack."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "amad-person"
        },
        "content": " - React is constantly being updated with new features (e.g. [hooks](https://reactjs.org/docs/hooks-intro.html) were released in v16.8) and performance optimizations."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "amad-person"
        },
        "content": "### Disadvantages of React"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "amad-person"
        },
        "content": "Some of React\u0027s disadvantages are given below:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "amad-person"
        },
        "content": " - The high pace of development of React means that you would need to regularly relearn how to do things."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "amad-person"
        },
        "content": " - React is just a UI library. As React only allows one-way data binding, you can\u0027t use it in applications that follow the \u003ctooltip content\u003d\"MVC, or Model-View-Controller is a popular application structure for building web applications. It separates the UI and the data of your application, and changes can be made to your application using controllers.\"\u003e*MVC*\u003c/tooltip\u003e architecture. You would have to use [Flux](https://github.com/facebook/flux), an application architecture that favors one-way data binding instead."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "amad-person"
        },
        "content": "### React and Other Competing Alternatives"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "amad-person"
        },
        "content": "There are a lot of JavaScript frameworks and libraries that you can use to build your next web application. Some popular alternatives to React are [Angular](https://se-education.org/learningresources/contents/javascript/Javascript-framework-Angular.html) and [Vue](https://se-education.org/learningresources/contents/javascript/Javascript-framework-VueJs.html)."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "amad-person"
        },
        "content": "How do you decide which one to use? Here are some resources to help you choose between them:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "amad-person"
        },
        "content": "- [React, Angular, Vue: What they can do and which one is for you](https://blog.teamtreehouse.com/react-angular-vue) - This article has guidelines for choosing which technology to learn."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "amad-person"
        },
        "content": "- [Angular vs Vue vs React](https://www.codeinwp.com/blog/angular-vs-vue-vs-react/) - In addition to comparing the three technologies, this article aims to give a general structure for comparing JavaScript frameworks and libraries. Hence, you can use this structure to choose between any new frameworks that may arrive in the future."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "amad-person"
        },
        "content": "- [State of JS 2018: Front-end Frameworks](https://2018.stateofjs.com/front-end-frameworks/overview/) - This survey compares the average salaries, company size, developer satisfaction, etc. for the most used JavaScript front-end technologies, so you can decide which technology will be worth learning for a career in front-end software engineering."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "amad-person"
        },
        "content": "Every framework has its pros and cons, but hopefully you have managed to see that React [removes some of the complexity](https://jlongster.com/Removing-User-Interface-Complexity,-or-Why-React-is-Awesome) that comes with building user interfaces. "
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "amad-person"
        },
        "content": "### Getting Started with React"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "amad-person"
        },
        "content": "The official React [website](https://reactjs.org/) is a great place to get started. It includes:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "amad-person"
        },
        "content": " - A step-by-step [tutorial](https://reactjs.org/tutorial/tutorial.html) for building a React application, if you prefer to learn by doing."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "amad-person"
        },
        "content": " - A [guide](https://reactjs.org/docs/hello-world.html) to master the main concepts of React, if you prefer to learn by reading instead."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "amad-person"
        },
        "content": " "
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "amad-person"
        },
        "content": "If you want to add React to an existing project, you can take a look at React\u0027s official [guide](https://reactjs.org/docs/add-react-to-a-website.html) for doing so. Alternatively, if you are creating a new React application, you can use one of the [recommended toolchains](https://reactjs.org/docs/create-a-new-react-app.html) to get the best user and developer experience."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "amad-person"
        },
        "content": "[Create React App](https://github.com/facebook/create-react-app) is a convenient environment for learning React, and it is the recommended way to create \u003ctooltip content\u003d\"A single-page application is an app that works inside a browser and does not require page reloading during use.\"\u003e*single-page applications*\u003c/tooltip\u003e with React."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "amad-person"
        },
        "content": "The official website also has [advanced guides](https://reactjs.org/docs/getting-started.html#advanced-concepts) if you want to understand how React works behind the scenes."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "amad-person"
        },
        "content": "### Other React Resources"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "amad-person"
        },
        "content": "As React is a fairly popular library, you can find a lot of comprehensive resources online. Here are some resources that can be useful:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "amad-person"
        },
        "content": " - [The React Handbook](https://medium.freecodecamp.org/the-react-handbook-b71c27b0a795) - This article provides a well-rounded overview of React."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "amad-person"
        },
        "content": " - A list of officially [recommended courses](https://reactjs.org/community/courses.html) (some of which are free) - You can learn React from one of these resources if you prefer third-party books or video tutorials. "
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "amad-person"
        },
        "content": " - The React [Blog](https://reactjs.org/blog/) - Updates about React\u0027s latest features will be available here."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "amad-person"
        },
        "content": " - React\u0027s [API Reference](https://reactjs.org/docs/react-api.html) - You can learn more about React\u0027s API here."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "amad-person"
        },
        "content": " - The [React DevTools](https://github.com/facebook/react-devtools) browser extension - This is used for inspecting and debugging React applications from within your browser\u0027s developer tools."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "amad-person"
        },
        "content": " \u003c/box\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "amad-person"
        },
        "content": "If you need help with React, you can get support from React\u0027s [community](https://reactjs.org/community/support.html) of millions of developers that are active on [Stack Overflow](https://stackoverflow.com/questions/tagged/reactjs)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "amad-person"
        },
        "content": "and discussion forums like [Dev](https://dev.to/t/react) and [Hashnode](https://hashnode.com/n/reactjs)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "amad-person"
        },
        "content": "Lastly, if you want to know what to learn after getting familiar with React, [here is a comprehensive roadmap](https://github.com/adam-golab/react-developer-roadmap) that you can follow to become a full-fledged React developer."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "amad-person"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "amad-person"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "amad-person": 190
    }
  },
  {
    "path": "contents/javascript/Javascript-framework-VueJs.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: VueJs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# VueJs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "**Authors: [Chelsey Ong](https://github.com/chelseyong), [Lu Lechuan](https://github.com/LuLechuan)** \u003cbr\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Reviewers: [Gilbert Emerson](https://github.com/emer7), [Ong Shu Peng](https://github.com/ongspxm)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003cbox type\u003d\"info\"\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "This article assumes the reader has a basic knowledge of HTML and JavaScript."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "## What is VueJs?"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "VueJs (also known as Vue) is an open-source [JavaScript framework](https://en.wikipedia.org/wiki/JavaScript_framework) for building user interfaces. It is designed to improve code quality and maintainability."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "This is a simple example to show how easy it is to integrate VueJs into your web project:\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "The main HTML file:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```HTML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv id\u003d\"root\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    \u003ch2\u003e{\\{ message }\\}\u003c/h2\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscript src\u003d\"https://unpkg.com/vue@2.5.13/dist/vue.js\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscript src\u003d\"the_path_to_the_javacript_file.js\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "This is inside the JavaScript file:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "new Vue ({"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "  el: \u0027#root\u0027,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "  data: {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    message: \"Hello World\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "});"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003cbox type\u003d\"warning\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Note that `{\\{` and `}\\}` should not have the slash in your actual code."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "Step-by-step explanation of the code:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003cb\u003eStep 1:\u003c/b\u003e Import VueJs \u003ctooltip content\u003d\"Content Delivery Network\" placement\u003d\"top\"\u003eCDN\u003c/tooltip\u003e and the JavaScript file in the main HTML file."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "```HTML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscript src\u003d\"https://unpkg.com/vue@2.5.13/dist/vue.js\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscript src\u003d\"the_path_to_the_javacript_file.js\"\u003e\u003c/script\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cb\u003eStep 2:\u003c/b\u003e Create an instance of Vue (Vue is an object) in the JavaScript file; bind the instance to one of the component in our html file (e.g. create a component with id `root` and bind it with the instance of Vue).\u003cbr/\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "In this case, only the `root` component can be accessed in VueJs while the rest are unaffected. This is how we progressively plug in VueJs into our projects."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "  new Vue ({"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    el: \u0027#root\u0027,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  });"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "```HTML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv id\u003d\"root\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cb\u003eStep 3:\u003c/b\u003e Specify our data (message: \"Hello World\") in the instance of Vue Class."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "```js"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "  data: {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    message: \"Hello World\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cb\u003eStep 4:\u003c/b\u003e Pass the message to the HTML file using double curly brackets."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "```HTML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cdiv id\u003d\"root\"\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    \u003ch2\u003e{\\{message}\\{\u003c/h2\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/div\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cb\u003eStep 5:\u003c/b\u003e Open the brower and we will see \"Hello World\" being displayed:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e \u003ch2\u003eHello World\u003c/h2\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "## VueJs Features"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "1. **Mutating of data in the DOM**\u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    In Vue, the state of the data can be directly modified."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    Let\u0027s say, there is a variable called `message` in your app. To modify `message`, you can do the following:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    ```js"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    this.message \u003d \u0027Hello Space\u0027;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    When `message` is changed, the view will be re-rendered to show the new message. So you can say, DOM is \"reacting\" to `message`."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "2. **2-way binding**\u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    `v-model` is a [Vue directive](https://vuejs.org/v2/api/#v-model) used to bind the DOM input field to its data variable."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    This allows the DOM variables and data to be \"in sync\", regardless of which one is being updated first."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    In other words, if you change the input value, the bound data will change, and vice versa."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    ```html"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    \u003cinput type\u003d\"checkbox\", v-model\u003disChecked\"\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        \u003clabel for\u003d\"checked\"\u003eSelect\u003c/label\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    When the checkbox is selected, `isChecked` is set to `true`. If the program sets `isChecked` to `false`, then checkbox will be unselected."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    This reduces any extra step required to manually update the data."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    2-way binding is useful for updating input form bindings such as checkboxes or drop-downs, where new data is entered by users and then updated in the view."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "3. **Passing data from outer to inner components**\u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    When you have components that are nested within each other, data is passed from the outer component to the inner component via `props`, where `props` are just custom data shared between the components."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    This follows the [1-way data flow](https://vuejs.org/v2/guide/components-props.html#One-Way-Data-Flow) encouraged by Vue, which"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    ensures that data can only be changed by the component itself and also allows bugs to be easily traced in the code."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    ```js"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    Vue.component(\u0027todo-list\u0027, {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        props: [\u0027item\u0027],"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        data: [\u0027totalCount\u0027],"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        template:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "          \u003cdiv class\u003d\u0027todo-list\u0027\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cp\u003eTotal:{\\{this.totalCount}\\{\u003c/p\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            \u003cp\u003e{\\{item.name}\\{: {\\{item.count}\\{\u003c/p\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    })"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    \u003ctodo-list"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "      v-for\u003d\u0027item in items\u0027"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "      v-bind:key\u003d\u0027item.id\u0027"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "      v-bind:item\u003d\u0027item\u0027"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    \u003e\u003c/todo-list\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    `to-do list` contains `item`, i.e. `to-do list` is the outer component and `item` is the inner component."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    \u003cbox type\u003d\"tip\"\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    Note that `props` is passed from the outer component to the inner component while `data` is kept private within a component."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    \u003c/box\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "4. **Emitting events**\u003cbr\u003e"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    However, what if the user decides to update the `item.count`? The data for `item.count` has to be passed from `item` to `todo-list` so that `totalCount` can be updated inside `todo-list` ."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    How do we do that if we have to follow the 1-way data flow rule?"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    In situations where the inner component has to pass data back to the outer component, the inner component has to [emit custom events](https://vuejs.org/v2/guide/components.html#Emitting-a-Value-With-an-Event)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    and the outer component will update after listening to these events."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    You can think of emitting events like putting out a flyer about an event. If someone is interested in this event, he or she can gather more information through reading the flyer."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    ```js"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    Vue.component(\u0027item\u0027, {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "      data: [\u0027count\u0027, \u0027name\u0027],"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "      template: {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        \u003cbutton v-on:click\u003d\"$emit(\u0027increased-count\u0027, count+1)\"\u003eIncrement item count\u003c/button\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "      }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    /* Inside todo-list component */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    template: {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        v-on:increased-count\u003d\"updateCount\""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "5. **Computed properties**\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    This is useful when you want to compose new data based on the data that has changed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    Instead of calling methods to do that whenever data has changed, computed properties will do it for you automatically."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    ```js"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    computed: totalCount() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        let result \u003d 0;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        this.items.forEach((item) \u003d\u003e result +\u003d item.count);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    Unlike the use of methods, this updating of `totalCount` will only be triggered when the number of `items` in the list or any `item`\u0027s `count` changed."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    Since computed properties are cached and will not be processed every time the page refreshes, this can greatly improve the efficiency of your application."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    \u003cbox type\u003d\"warning\"\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        Note: computed properties must return the new data i.e. reactive properties."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        It cannot perform other operations in response to the change in data."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    \u003c/box\u003e"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "6. **Watched properties**\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    Watched properties are used to call other functions when a particular data has been updated, such as \u003ctooltip content\u003d\"independent operations\"\u003easynchronous operations\u003c/tooltip\u003e."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    For example, when a new `item` is added, we want to send a notification to our friend to alert him or her about the change."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    A watched property on `items` can be added so that a notification can be sent whenever `items` has changed."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    ```js"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    watch: {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        totalCount: function() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            let result \u003d 0"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            this.items.forEach((item) \u003d\u003e result +\u003d item.count);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            this.totalCount \u003d result;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "            // notify friend about the change"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    This may look quite similar to `Computed properties`."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    To decide which is more suitable for your feature, here is a brief comparison:"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    Watched property | Computed property"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    :-------------- | :----------------"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    used for running expensive operations | used for updating data for dependencies"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    executed every time page refreshes | uses cached data and executes only when changed"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "    **watches** for change in 1 property | **creates** a new property that is updated when 1 or more dependencies change"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "\u003cbr\u003e"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "## VueJs Advantages"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Approachable:**\u003cbr/\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "VueJs is very easy to learn. Compared to other framework such as Angular and ReactJs, VueJs is simple in term of API and design. Learning enough to build non-trivial applications typically takes less than a day. An example is provided below:\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "How is iteration like in ReactJs:\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "The JavaScript file in ReactJs"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    ```js"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    var Iteration \u003d React.createClass({"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "       getInitialState() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "         return {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "           array: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "         }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "       },"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "       render() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "         this.state.array.map(function(date) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "           return ("
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "             \u003cspan\u003e{date}\u003c/span\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "           )"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "         });"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "       }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    ReactDOM.render(\u003cIteration /\u003e, document.getElementById(\u0027array\u0027));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    The HTML file in ReactJs"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    ```html"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cdiv id\u003d\"array\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    How is iteration like in VueJs:\u003cbr/\u003e\u003cbr/\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    The JavaScript file in VueJs"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    ```js"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    var Iteration \u003d new Vue({"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "      el: \u0027#array\u0027,"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "      data: {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        array: [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "      }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    The HTML file in VueJs"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    ```html"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cdiv id\u003d\"array\"\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "      \u003cspan v-for\u003d\"date in array\"\u003e{date}\u003c/span\u003e"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/div\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "2. **Progressive:**\u003cbr/\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "VueJs is designed from the ground up to be incrementally adoptable. The core library is focused on the view layer only, and is easy to pick up and integrate with other libraries or existing projects. This means that if you have a large application, you can plug VueJs into just a part of your application without disturbing the other components. A quote from Evan You - the founder of VueJs is as follow:"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003e Vue.js is a more flexible, less opinionated solution (than Angular). That allows you to structure your app the way you want it to be, instead of being forced to do everything the Angular way (Angular requires a certain way to structure an application, making it hard to introduce Angular into an already built project). It’s only an interface layer so you can use it as a light feature in pages instead of a full blown SPA (single-page application)."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003e -- [[source]](https://www.valuecoders.com/blog/technology-and-apps/vue-js-comparison-angular-react/)"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "3. **Versatile:**\u003cbr/\u003e"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "VueJs is perfectly capable of powering sophisticated single-page applications when used in combination with modern tooling and supporting libraries."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "4. **Clean:**\u003cbr/\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "VueJs syntax is simple and this can make the HTML pages very clean. This would allow user interfaces built by VueJs to be more maintainable and testable."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "## VueJs Drawbacks"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "1. **Relatively small size community:**\u003cbr/\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "VueJs is a relatively new JavaScript framework as compared to Angular and React. The size of the community for VueJs is therefore relatively small. Although small size community means you can differentiate yourself from other JavaScript developers, it also means there are fewer resources such as tutorials and problem-shooting guides."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "2. **Language barriers:**\u003cbr/\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "A majority of users of VueJs are the Chinese as VueJs is developed by a Chinese American. He is supportive of the Chinese community and hence a lot of the existing plugins are written in Chinese. There might be some language barriers for an English speaking developer seeking for VueJs resources."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "chelseyong"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Detailed Comparison of VueJs with other JavaScript frameworks can be found from:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "- [Vue Guild: Comparison with Other Frameworks](https://vuejs.org/v2/guide/comparison.html)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "- [Angular vs React vs Vue](https://medium.com/unicorn-supplies/angular-vs-react-vs-vue-a-2017-comparison-c5c52d620176)"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "Links to VueJs tutorials and practices:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "chelseyong"
        },
        "content": "- [VueJS Official Website](https://vuejs.org)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "- [VueSchool](https://vuejs.org/)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "- [Laracast](https://laracasts.com/series/learn-vue-2-step-by-step)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "- [Vuetify](https://vuetifyjs.com/zh-Hans/)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 144,
      "chelseyong": 163
    }
  },
  {
    "path": "contents/javascript/Javascript-promises.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: \"Javascript: Promises\""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Javascript: Promises"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "**Authors: Daniel Berzin Chua, Ong Shu Peng**\u003cbr/\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "Reviewers: Chelsey Ong, Damith C, Gilbert Emerson, Tan Heng Yeow"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "## Why Promises?"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "Typically, code we write executes in _synchronous_ manner i.e., the current operation completes its work before proceeding with next operation. However, take an HTTP request for example. It is an operation that takes a while to process, depending on your internet speed and where you are in the world. If such an operation was to be executed in a synchronous manner, your application would be slow because it has to wait for this request to complete and it would not make for a particularly good user experience. Instead, we can make HTTP requests to operate *asynchronously* in order to improve the speed and user experience of your program. Asynchronous operations do not wait for their work to be finished before proceeding on with other operations; it allow those operations to continue processing in the background while other operations are executed. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "However, programming and debugging of asynchronous operations is more difficult compared to synchronous operations, because you would need some way to know when the operation has finished, or in the case of debugging, the point at which the operation is called. It can be especially confusing to trace the code since it may not run in the sequence that you would normally expect."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "To illustrate this problem, we\u0027ll use `setTimeout()`: a function that has 3 parameters, a callback, a time (in milliseconds) to wait before the callback is executed, and an additional parameters to pass to the *callback*. A callback is a function that is passed as a parameter to another function, and it will be executed after that function finishes. `setTimeout()` is asynchronous as the code below it will execute while the timer is counting down, as you will see in the following code snippet."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "You would probably expect `console.log(x)` to print `I have been updated` after 1 second has passed. Instead, it prints `I have not been updated.` Give it a try in Google Chrome\u0027s developer console."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "var x \u003d \"I have not been updated\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "setTimeout(function (){"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    x \u003d \"I have been updated\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}, 1000);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "console.log(x);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "To fix this problem, we can simply shift the `console.log(x)` into the callback to get the expected result. It will now print the correct value."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "var x \u003d \"I have not been updated\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "setTimeout(function (){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    x \u003d \"I have been updated\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    console.log(x);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}, 1000);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "However, this fix will only go so far. If we had another `setTimeout()` that depended on the result of the earlier `setTimeout()`, we would have to nest the functions within each other which would make for hard-to-read code as follows."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "var x \u003d \"I have not been updated\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "setTimeout(function (){"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    x \u003d \"I have been updated\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    console.log(x);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    setTimeout(function () {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        x \u003d \"I have been updated 2 times.\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        console.log(x);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        setTimeout(function () {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            x \u003d \"I have been updated 3 times.\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            console.log(x);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            // and so on..."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        }, 1000);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }, 1000);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}, 1000);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "This is what\u0027s infamously known as *callback hell*. It\u0027s a natural result of using too many callbacks, as this would result in the code becoming deeply nested. It would be difficult for anyone to read your code and to understand what exactly is going on."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "We can instead use Promises for cleaner code that would be easier to read, write and debug."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "## What is a Promise?"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "The following example is adapted from [JavaScript Promises for Dummies](https://scotch.io/tutorials/javascript-promises-for-dummies)."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Promises in Javascript behave the same way as Promises do in real life. Imagine that your friend promises to return you money that you have lent him. At the time this promise was made, you would not know if your friend would really return your money. Your friend could either return your money on time, or he could just not do it."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "These situations correspond to the 3 states of Promises in Javascript."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "| State | Description |"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "| ------ | ----------- |"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "|Pending | You don\u0027t know if he would return your money. |"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "|Fulfilled | He returned your money. |"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "|Rejected | He refused to return your money. |"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Promises provide the ability to specify how the execution of some part of your code would depend on the status of an asynchronous operation. It can now wait for the asynchronous operation to resolve first before doing any work on its result."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "## How Promises Work "
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "Let\u0027s learn how promises work by starting with an example that uses callbacks and converting it to use promises."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "Say we have two functions, `getData()` and `filterData()` which require some time to complete. You will have to get the data from some server using `getData()`, then process it using `filterData()`, before you can start displaying the results."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "How would such functions be implemented using the callback method? The callback method utilizes the fact that we can easily pass functions into javascript as parameters and then use them within the function, effectively \"passing\" any form of data out, without explicitly returning any value."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "We will implement the above use case in the callback-style (mimicking the long return time of the functions using `setTimeout`):"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ongspxm"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "function executeWithDelay(val, callback) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    // return val after a short wait"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    setTimeout(function(){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        callback(val);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }, 1000);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "/** Delayed function calls **/"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "function getData(callback) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    executeWithDelay(\u0027some random data\u0027, callback);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "function filterData(data, callback) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    executeWithDelay(data.split(\u0027 \u0027), callback);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "function main() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    getData(function(data){"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        filterData(function(filtered){"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            // will print array of splitted text"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            console.log(filtered);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        })"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    });"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "main();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "Now we will rewrite all these using promises. We will be using the same function and variable names, to show how exactly promise compare to callbacks. "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "function executeWithDelay(val) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    // return val after a short wait"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    return new Promise(resolve \u003d\u003e {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        setTimeout(function(){"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "            resolve(val);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }, 1000);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "/** note these functions now return a promise **/"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "function getdata() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    return executeWithDelay(\u0027some random data\u0027);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "function filterdata(data, callback) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    return executeWithDelay(data.split(\u0027 \u0027));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "function main() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    return getData()"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        .then(data \u003d\u003e filterData(data))"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        .then(filtered \u003d\u003e console.log(filtered));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "main();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "## Imperative Style Promises: `async-await`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "The example above uses `.then()` to pass data from one function to the next is often seen in *functional programming*. The original promise is passed from one `.then()` to the other, and with each `.then()`, a new promise is returned for the next `.then()` to work on."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "That is somewhat different from the imperative programming style most programmers are more familiar with. The `async` and `await` keywords facilitate a imperative way of using promises."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "Consider the `main` function from the previous example:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "function main() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    return getData()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        .then(data \u003d\u003e filterData(data))"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "        .then(fltered \u003d\u003e console.log(filtered));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "}"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "It can be rewritten in the async-await-style as follows:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```javascript"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "async function main() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    const data \u003d await getData();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    const filtered \u003d await filterData(data);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    console.log(filtered);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "    return filtered;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "The `async` keyword ensures that the `main()` function returns a promise. In our case, this will cause `main()` to return a promise with `filtered` as its data. The information can then be used like so `main().then(filtered \u003d\u003e alert(filtered));`. "
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "Another interesting thing to note: `await` will wait for the promise to return before executing anything below. In this case, `console.log` will be executed after the two `await` calls, even when it doesn\u0027t depend on the results of those calls."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "In the promise-style, we handle errors using the `.catch()` block. However when using the async-await-style, we handle the errors using the more conventional `try ... catch` block. These can be explored further in [here](https://javascript.info/async-await#error-handling)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "## Where Promises can be used"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are some examples where JavaScript promises can be used:"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* **HTTP Requests**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "  Earlier in this chapter, HTTP requests were mentioned as an example of an asynchronous operation. By using Promises, you would be able to act on the result from the request without having to use callbacks or wait an arbitrarily set amount of time for the response to be returned."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "  The following code sends a GET request to a URL and logs the body of the response using Promises. By using Promises instead of callbacks, we have clean code and improved performance as the code is able to run in the background."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "  Code adapted from [Promise MDN docs](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "  ```javascript"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "  function fetchPage(url) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    return new Promise((resolve, reject) \u003d\u003e {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "      const xhr \u003d new XMLHttpRequest();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "      xhr.open(\"GET\", url);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "      xhr.onload \u003d () \u003d\u003e resolve(xhr.responseText);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "      xhr.onerror \u003d () \u003d\u003e reject(xhr.statusText);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "      xhr.send();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "  }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "  fetchPage(\u0027path/to/resource\u0027)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "      .then(response \u003d\u003e console.log(response))"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "      .catch(err \u003d\u003e console.log(err));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* **Disk I/O**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "  Reading a file, especially a large one may take some time to complete. If we were to use a synchronous file reading function, the rest of your program wouldn\u0027t be able to run because it is stuck waiting for the file to be read. Instead, we can use asynchronous file reading functions which allow for background loading of the file, whilst keeping your program humming along."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "  ```javascript"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "  const fs \u003d require(\u0027fs\u0027);   // this is the in-built filesystem module from Node.js"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "  function readFileWithPromise(filePath) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "      return new Promise(function(resolve, reject) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "          fs.readFile(filePath, \u0027utf8\u0027, function(err, data) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "              if (err) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                  reject(err);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "              } else {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "                  resolve(data);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "              }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "          });"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "      })"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "  };"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "  "
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "  readFileWithPromise(\u0027path/to/file\u0027)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "      .then(data \u003d\u003e console.log(data))"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "      .catch(err \u003d\u003e console.log(err));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "  ```"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "## Doing more with Promises"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Sometimes multiple promises may have to be used at a time, and Javascript provides excellent support with the `Promise.all` and `Promise.race` functions."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "If multiple asynchronous operations have to be performed, and these operations are independent in that they do not rely on each other\u0027s values, `Promise.all()`can be used to execute all these operations at a go. It takes in an array of Promises and returns either an array with all the resolved values, or the value of the first rejected Promise. After which, `then()` which was previously mentioned, can be used to act on all these resolved values."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "There is an excellent write up on these methods [here](https://davidwalsh.name/promises), which go through how best to use these functions."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "In addition, there are other libraries such as [Bluebird](http://bluebirdjs.com/docs/getting-started.html) and [Q](https://github.com/kriskowal/q) which offer even more functionality such as Promise monitoring and synchronous inspection of Promises."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "## Further Reading"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "You may read more about Promises, and how to use them at the following pages:"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "- [JavaScript Promises: an Introduction](https://developers.google.com/web/fundamentals/primers/promises)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "- [JavaScript Promises for Dummies](https://scotch.io/tutorials/javascript-promises-for-dummies)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "ongspxm"
        },
        "content": "- [Javascript Async/Await](https://javascript.info/async-await)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "ongspxm": 80,
      "-": 184
    }
  },
  {
    "path": "contents/kotlin/NullSafety.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Null Safety in Kotlin"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Null Safety in Kotlin"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Pan Haozhe](https://github.com/Haozhe321)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e“I call it my billion-dollar mistake. It was the invention of the null reference…My goal was to ensure that all use of references should be absolutely safe, with **checking performed automatically by the compiler**. But I couldn\u0027t resist the temptation to put in a null reference, simply because it was so easy to implement.”  "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "-Tony Hoare"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "This document explains Kotlin\u0027s null safety feature. For an overview of Kotlin, see [here](kotlin.html)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "# What is Null Safety?"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "_Null Safety_ (or _void safety_) is the guarantee that no object reference will have a `null` value."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "In object-oriented languages, access to objects is achieved through references. A typical function call is of the form `object.func()`; `object` denotes a reference to a certain object, and `func` denotes a function call. At execution time, the reference to `object` can be `void`, leading to run-time exceptions (In the case of Java, a NullPointerException) and often abnormal termination of the program."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "## NullPointerException"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " When developing Android applications in Java, [NullPointerException (NPE)](https://docs.oracle.com/javase/9/docs/api/java/lang/NullPointerException.html) was a big problem. In fact, About [one third of app crashes can be attributed to NPE](https://image.slidesharecdn.com/droidcon-bugsense-130408170720-phpapp01/95/droid-con-bugsense-16-638.jpg?cb\u003d1365440918). To see how it happens, let\u0027s take a look at the piece of Java code below:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "String a \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "if(a.length \u003e 5) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    //do something"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "When the above code is run, an NPE will be thrown on line 2 because a `null` object has no methods. To prevent an object from taking on a `null` value, programmers typically resort to doing additional checks like this:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "String a \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "if(a !\u003d null \u0026\u0026 a.length \u003e 5) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        //do something"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "And of course, that\u0027s all fine, until we want to do something more complex. Say Bob belongs to a department, and we want to get the name of the department manager. That will look like this:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "String managerName \u003d bob.department.manager.name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Because each variable can be `null`, to prevent the NPE we put the code in the following code block:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "if(bob !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    Department department \u003d bob.department;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    if(department !\u003d null) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Employee manager \u003d department.manager;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        if(manager !\u003d null) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            String name \u003d manager.name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            if(name !\u003d null) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                //do something"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "The deep-nested `if` statement reduces readability of our code."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "The other way is to use [Java Optionals](http://www.oracle.com/technetwork/articles/java/java8-optional-2175753.html)."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "For the first example above, we can do"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "a.ifPresent(this::doSomething);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "And for the deeply-nested `if` statements, the verbosity can be reduced with"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "bob.map(Person::getDepartment)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    .map(Person::getManager)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    .map(Person::getName)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    .ifPresent(Person::doSomething);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "`map()` is a method in Java Optionals class that applies the function inside the parentheses to the object that is calling it. If the object is not present, it will return an empty Optional.  "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s see how Kotlin deals with this issue while maintaining a simple and readable syntax."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "# How does Kotlin handle Null Safety?"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "## Nullable and Non-nullable type"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "In Kotlin, a type can be _nullable_ or _non-nullable_, determined by the presence of a `?`. For example, an object of type `String` is non-nullable, while an object of type `String?` is nullable.  "
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "As the compiler catches `null` assignments to non-nullable objects, the following would result in compilation error."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "```Kotlin"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "var firstString: String \u003d \"hello world\""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "firstString \u003d null //compilation error"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "In comparison, the following assignment to a nullable type is allowed"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```Kotlin"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "var secondString: String? \u003d \"hello world\""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "secondString \u003d null //okay"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "In the first case, we can safely call `firstString.length` without having to worry about a NPE because `firstString` can never be `null`.   "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "In the second case, `secondString` can potentially be `null`, so `secondString.length` will result in a compilation error as the compiler see the danger of such statement and blocks it early."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "## Safety Operators in Kotlin"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "Although non-nullable type is a strong feature in Kotlin, the [interoperability](https://kotlinlang.org/docs/reference/java-interop.html) with Java means that we have to use variables as nullable type sometimes. In the previous section, we seem to have hit an obstacle as the compiler blocks the call to `secondString.length`. In this section we look at some ways of overcoming this problem."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "### Safe call operator"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Represented by `?.`, the safe call operator is used in this way  "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "```kotlin"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "secondString?.length"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "This returns the length of `secondString` if `secondString` is not `null`, and `null` otherwise."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "Now we can chain like this"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "```Kotlin"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "bob?.department?.manager?.name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "This chain will return `null` if any of the variables inside the chain is `null`."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "### Elvis Operators"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "Represented by `?:`, the Elvis operator is used in this way"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "```kotlin"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "val length \u003d secondString?.length ?: -1"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "If the expression to the left of `?:` is not null, the Elvis operator (`?.`) will return it as it is; else it will return a default value supplied (-1 in this case)."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "We also notice the use of safe call operator together with Elvis operator in the same statement."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "But the Elvis operator is more powerful than this. `return` and `throw` statements are legitimate default values on the right side of the Elvis operator. So you can define your own error message to aid debugging. For example:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "```kotlin"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "fun myFunc(node: Node): String? {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    val parent \u003d node.getParent() ?: return null"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    val name \u003d node.getName() ?: throw IllegalArgumentException(\"Name expected\")"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Doing so like this can help programmers to check for function arguments before carrying on with the required computation."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "At this point you may ask, \"What if I still want my NPE?\""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "### Not-null assertion operator"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Represented by `!!`, the not-null assertion operator is used in this way"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "```kotlin"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "val stringLength \u003d secondString!!.length"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "The operator converts any value to a non-nullable type and throws an exception if the value is null. In the above example, `stringLength` will be assigned the length of `secondString` if `secondString` is not `null`; if secondString is `null`, a NPE is thrown. Kotlin tries to reduce the number of NPEs thrown as it is a run-time exception that is difficult to debug, in addition to creating so many app crashes. Hence NPEs in Kotlin are explicitly asked for."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "# Summary"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "1. Kotlin increases null safety of programs because some of the work required to ensure null safety is offloaded from the programmer to the compiler, which is less error prone."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "2. Null Safety is enforced by the Kotlin language. This is better compared to Java Optionals which is a Class and not a language construct like Kotlin\u0027s null-safety system."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "3. If you expect your object to **not** take on a `null` value, make it a non-nullable type!"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "4. Even if you make your object a nullable type, Kotlin handles it better than Java because it can help to prevent NPE. An generic NPE is hard to debug; in Kotlin a descriptive message could be given to make debugging easier (with the help of Elvis operator)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "# Learning resources"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "* [Null Safety in Kotlin](https://kotlinlang.org/docs/reference/null-safety.html)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "* [Comprehensive Guide to Null Safety in Kotlin](http://www.baeldung.com/kotlin-null-safety)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* [The Billion Dollar Mistake](https://www.infoq.com/presentations/Null-References-The-Billion-Dollar-Mistake-Tony-Hoare)"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 158,
      "luyangkenneth": 1
    }
  },
  {
    "path": "contents/performance/Performance.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Introduction to Performance Optimization"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to Performance Optimization"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Ian Teo](https://github.com/IanTeo), [Phang Chun Rong](https://www.github.com/Crphang)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Computer performance can be defined as the rate of work accomplished by a computer system. Even if execution time is not important for a particular application, it may be important to reduce CPU cycles so as to consume less power; from applications running in small battery operated devices to huge data centres."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e Premature optimization is the root of all evil."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "I think many people have heard of this quote from Donald Knuth before. This quote is actually misinterpreted frequently, because of the lack of context. Here is the full quote:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "You can find a nice explaination of the quote [here](http://wiki.c2.com/?PrematureOptimization)."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "This is not a guide on how to optimize that 3%, but rather, to explain standard optimization techniques that you should apply in all of your code, so that you do not create sub-optimal codes (premature pessimization). If you want to find out more about optimizing that 3%, you can find more at [Other Resources](#other-resources) below."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "The 3 techniques you should know are:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* Using appropriate Data Structures and Algorithms"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Memory Management Usage"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Using Cache Friendly Code"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Appropriate Data Structures and Algorithms"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Using appropriate Data Structures and Algorithms can improve the execution speed of your program trememdously. However, it requires time to learn and understand the nuances of each Data Structure and Algorithm and when to use them."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "A good example of how Data Structures and Algorithms can improve execution time is with [binary search](https://www.tutorialspoint.com/data_structures_algorithms/binary_search_algorithm.htm). When finding a particular element in a list, you need to search through the entire list. If it has a million entries, every find will require you to look through **1,000,000** entries. However, if you have a [sorted](https://www.tutorialspoint.com/data_structures_algorithms/sorting_algorithms.htm) list, you can use binary search to reduce the number of entries you have to look through to around **20**!"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "If you are interested in learning more about Data Structures and Algorithms, you can learn more from the following resources:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* [Geeksforgeeks.org](http://www.geeksforgeeks.org/data-structures/): Introduction to data structures with code examples"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* [Introduction to Algorithms (Book)](https://www.amazon.com/Introduction-Algorithms-3rd-MIT-Press/dp/0262033844): A good read for beginners interested in data structures and algorithms"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* [MIT online course](http://courses.csail.mit.edu/6.851/spring12/lectures/): A online course by MIT on data structures and algorithms"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* [topcoder.com](https://www.topcoder.com/community/data-science/data-science-tutorials/the-importance-of-algorithms/): A good write up on the importance of algorithms"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "## Memory Management Usage"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "Memory management is important for performance optimization for Computer systems. One of the common techniques in [algorithms optimization](#using-appropriate-data-structures-and-algorithms) is space and time trade off, where we increase runtime memory usage to decrease overall runtime. While this theoretically optimizes your system runtime, it might overall slowdown the system due to [Thrashing](https://en.wikipedia.org/wiki/Thrashing_(computer_science)). Thrashing occurs when the system runs out of Random Access Memory and the Operating System swaps main memory to disk memory resulting in  significant time spent on disk access. Detecting if the performance slowdown is memory related can be done with appropriate [memory profiling](PerformanceProfiling.html)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "If your system suffers from memory related performance issues, here are some solutions you can adopt to resolve them:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "- Using generators to reduce memory used. [Generators](https://en.wikipedia.org/wiki/Generator_(computer_programming)) are functions that generates a sequence of values. Instead of returning an explicit array upfront, a generator returns a value at each iteration. This can greatly [reduce memory usage](https://letstalkdata.com/2015/05/how-to-use-python-generators-to-save-memory/) for large arrays."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "- Sometimes memory usage of your program remains high because the unnecessary variables are yet to be freed from memory. If you are using a garbage collected language like Java, consider [tuning](https://www.javacodegeeks.com/2017/11/minimize-java-memory-usage-right-garbage-collector.html) your garbage collector to suit your needs. If such options is not good enough, you can explicitly free memory even in garbage collected language. An example from Python is shown below:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    ```python"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    import gc"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    gc.collect()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    ```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "- Using appropriate variable types can also offer memory usage improvement. For example, we should prefer to use primitive `int` over `Integer` to reduce the overhead introduce by the `Integer` Object wrapper. This [guide](http://java-performance.info/overview-of-memory-saving-techniques-java/) for Java also proposes ways to overcome obstacles introduced by the usage of primitives such as restrictions of JDK collections that requires Object wrappers."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "## Using Cache Friendly Code"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Before we can talk about this, we need to know what the computer memory is. Computer memory has different components, [registers](https://en.wikipedia.org/wiki/Processor_register), [L1/L2/L3 cache](https://www.cs.umd.edu/class/fall2001/cmsc411/proj01/cache/cache.html), [RAM](https://en.wikipedia.org/wiki/Random-access_memory), and [disk](https://en.wikipedia.org/wiki/Hard_disk_drive) in order of their speed."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e You can take a look at the extent of the difference of their access speeds [here](https://gist.github.com/jboner/2841832) \u003cbr\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e You can also check out this [infographic](http://imgur.com/8LIwV4C)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "To understand this topic, you only need to know how the cache works. It is okay if you do not understand exactly how the other components, registers, RAM and disk work. The cache is simply a place to store memory so that it can be accessed quickly. The cache is usually split into a few layers, L1, L2 and L3 cache, where the L1 cache is the fastest and L3 is the slowest. The faster a cache is, the more expensive it is. This means that the L1 cache (a few kilobytes big) is smaller than the L2 cache (a few megabytes big) and so on, until the RAM (a few gigabytes big)."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Whenever data is requested, the computer will first look in the cache for the data. If it exists, this is known as a **cache hit**. If it does not exist, this is known as a **cache miss**. When a **cache miss** happens, a contiguous block of memory containing the requested data is retrieved and stored onto the cache. Because of this, we want to remember these rules to make cache friendly codes:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* Temporal Locality"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* Spatial Locality"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* Row/Column Major Order"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "#### Temporal Locality"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "This rule states that recently used memory will likely be used in the near future. This means that making the scope of your variables smaller helps with execution times, as it will likely result in less cache misses."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "#### Spatial Locality"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "This rule states that memory stored near each other will likely be used in the near future. This means that using contiguous data structures, such as arrays, help improve the execution times. This is because the contiguous block of memory will likely contain the other elements of the array, resulting in less **cache misses**."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "An example of a Data Structure that does not do well in this aspect is [Linked List](https://www.tutorialspoint.com/data_structures_algorithms/linked_list_algorithms.htm). In a Linked List, each node can be stored anywhere on the memory. This means that there will likely be more cache misses when trying to iterate through a Linked List. This can cause Linked Lists to be much slower than what you would expect in theory."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "#### Row/Column Major Order"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "This rule is about how multidimensional arrays are stored in memory. Different programming languages have different methods of storing multidimensional arrays. [More Information](https://en.wikipedia.org/wiki/Row-_and_column-major_order)."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "Using the incorrect method of access can cause many cache misses, resulting in a much slower execution time. Thus, it is important to be aware of which major order the programming language is using."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "For example, Java uses Row Major Order. We can create a test to see how big an impact using the wrong Major Order can be on the execution time."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "```python"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "int size \u003d 10000;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "int[][] arr \u003d new int[size][size];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "int x \u003d 0;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "//Row Major order accessing"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "long time \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    for (int j \u003d 0; j \u003c size; j++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        x +\u003d arr[i][j];"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "System.out.println(\"Row major: \" + (System.currentTimeMillis() - time));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "//Column Major order accessing"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "time \u003d System.currentTimeMillis();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "for (int i \u003d 0; i \u003c size; i++) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    for (int j \u003d 0; j \u003c size; j++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        x +\u003d arr[j][i];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "System.out.println(\"Column major: \" +(System.currentTimeMillis() - time));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "In the example above, Row major takes around 100ms, while column major takes around 2000ms. You can use the codes above and try it on your own too."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e This test was done on a typical notebook. Your results may vary based on the hardware of your computer"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "[Wikipedia](https://en.wikipedia.org/wiki/Locality_of_reference) and the [University of Maryland](https://www.cs.umd.edu/class/fall2001/cmsc411/proj01/cache/matrix.html) have excellent articles which covers everything I have mentioned and more."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "## Other Resources"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "If you want to know more about Optimization, especially for that critical 3%, these other resources could be useful:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "* Finding the critical path - [Performance Profiling](PerformanceProfiling.html)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 134,
      "luyangkenneth": 2
    }
  },
  {
    "path": "contents/performance/PerformanceProfiling.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Performance Profiling"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Performance Profiling"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Ong Heng Le](https://github.com/initialshl)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "A performance profiler is a tool which collects data (such as function timings) about "
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "your program to identify the areas with performance issues, commonly used in code "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "optimization. There are two common types of performance profiling methods."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* **CPU sampling**: Collects *samples* at fixed intervals, which provides an overview of your program\u0027s performance"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* **Instrumentation**: Collects detailed *elapsed times* for your program\u0027s function calls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Learn [which profiling method to use for your program](https://blogs.msdn.microsoft.com/ejarvi/2005/04/07/the-choice-between-sampling-and-instrumentation/) "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "when choosing between CPU sampling and instrumentation."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "## Performance Profiling For The First Time"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "This article provides resources to help you identify the performance issues as you "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "perform profiling on your program for the first time. The general steps in profiling a "
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "program for the first time are:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "1. Run a performance profiling session "
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. View the performance report "
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "1. Trace down to the problem "
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Identify areas for improvements upwards "
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Most profilers are similar in their functionalities, user interface, and use of "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "technical terms. You may adapt the tutorials in this article to your preferred profiling "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "tools on your own project. "
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "* [Profiling a Desktop Application In Visual Studio 2015](ProfilingDesktopAppVS2015.html)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "## Advanced Topics"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "### Sampling Interval"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "CPU sampling captures data at fixed intervals, usually based on CPU cycles or time. Many "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "profilers offer the option to **set a custom interval or perform sampling based on events**, "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "such as page faults or system calls, in the sampling settings."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* For Visual Studio 2015: [How to: Choose Sampling Events](https://msdn.microsoft.com/en-us/library/ms182376.aspx)\u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* For YourKit Java Profiler: [YourKit Java Profiler Help - CPU sampling settings](https://www.yourkit.com/docs/java/help/sampling_settings.jsp)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "### Instrumentation Overhead"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "Instrumentation profiling incurs a substantial overhead, which is an increase in file size "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "and execution time of the program. This makes it unsuitable for large projects. In such "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "cases, it is recommended to **limit instrumentation to a specific portion of your project**. "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* For Visual Studio 2015: [How to: Limit Instrumentation to Specific Functions](https://msdn.microsoft.com/en-us/library/cc470663.aspx) "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "or [Specific DLLs](https://msdn.microsoft.com/en-us/library/bb385752.aspx)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "To reduce instrumentation overhead, some profilers may exclude *small functions*, which "
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "are short functions that do not make any function calls, and treat the time as being "
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "spent in their calling functions. This behavior is usually enabled by default, which may "
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "be undesirable when you want to **examine *small functions* carefully**. Most profilers "
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "offer the option to change this behavior."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* For Visual Studio 2015: [How to: Exclude or Include Short Functions from Instrumentation](https://msdn.microsoft.com/en-us/library/bb514150.aspx)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "## Profiling Other Types Of Data"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Other than collecting performance statistics and timing data, profilers are also able "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "to collect other information such as memory allocation and GPU usage. "
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "For Visual Studio 2015: "
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "1. List of [Profiling Tools](https://msdn.microsoft.com/en-us/library/mt210448.aspx) (A [table](https://msdn.microsoft.com/en-us/library/mt210448.aspx#Anchor_10) which shows the most suitable tool for each project)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "1. [How to: Collect Performance Data for a Web Site](https://msdn.microsoft.com/en-us/library/2s0xxa1d.aspx) (ASP.NET and JavaScript)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Collecting .NET Memory Allocation and Lifetime Data](https://msdn.microsoft.com/en-us/library/dd264934.aspx)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Collecting Thread and Process Concurrency Data](https://msdn.microsoft.com/en-us/library/dd265004.aspx)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Collecting tier interaction data](https://msdn.microsoft.com/en-us/library/dd465169.aspx)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "1. What is a software profiler?: [Profiling Overview](https://msdn.microsoft.com/en-us/library/bb384493(v\u003dvs.110).aspx)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "1. Common performance profiling methods: [Understanding Performance Collection Methods](https://msdn.microsoft.com/en-us/library/dd264994.aspx)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. Learn the best practices in profiling: [Advanced Profiling: Theory in Practice with NetBeans IDE](https://netbeans.org/community/magazine/html/04/profiler.html)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "1. Why do profilers exclude small functions from instrumentation by default?: [Excluding Small Functions From Instrumentation](https://blogs.msdn.microsoft.com/profiler/2008/07/08/excluding-small-functions-from-instrumentation/)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 93,
      "luyangkenneth": 1
    }
  },
  {
    "path": "contents/performance/ProfilingDesktopAppVS2015.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Profiling a Desktop Application In Visual Studio 2015"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Profiling a Desktop Application In Visual Studio 2015"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Ong Heng Le](https://github.com/initialshl)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "This tutorial demonstrates how to get an overview of your desktop application\u0027s performance"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "using the profiler included in [Visual Studio 2015](https://www.visualstudio.com/downloads/). "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "## 1. Run a performance profiling session"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "To start a performance profiling session, follow this guide on "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[Creating and running a performance session](https://msdn.microsoft.com/en-us/library/ms182372.aspx#Anchor_0)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "## 2. View the performance report"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The profiler will generate the performance report after the profiling session, which you "
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "can explore on your own. *Inclusive and exclusive data* provides meaningful information "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "about the execution time of each function."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* **Inclusive samples**: Collected during execution of the function itself and all functions it calls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* **Exclusive samples**: Collected during execution of the function itself only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e The Visual Studio Profiler Team Blog has a [good explanation on inclusive and exclusive data values](https://blogs.msdn.microsoft.com/profiler/2004/06/09/what-are-exclusive-and-inclusive/)."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "## 3. Trace down to the problem"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "You can identify the performance issues using the performance report. The `Summary` view "
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "shows these two useful information analyzed by the profiler."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "* **Functions With Most Individual Work**: The functions which took up the most execution time *(exclusive samples)*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* **Hot Path**: The branch of the call tree which took up the most execution time *(inclusive samples)*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "To locate performance issues quickly, the **Functions With Most Individual Work** provides "
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "a list of functions which are usually candidates for optimization."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "If you would like to trace down to the problem more carefully, the **Hot Path** is a good "
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "starting point. This will familiarize you about the most expensive execution path taken "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "by your program. "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003e You can follow this [walkthrough](https://msdn.microsoft.com/en-us/library/ms182398.aspx)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "to experience how to identify performance problems and optimize your code."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "## 4. Identify areas for improvements upwards"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "You have identified the problem, and may now want to optimize the code in the "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "function body. But before that, here\u0027s a final tip: It is sometimes easier "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "(and better) to optimize by "
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "**reducing the number of calls to that function in its calling functions.** "
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "1. The general steps in profiling your program: [Beginners Guide to Performance Profiling](https://msdn.microsoft.com/en-us/library/ms182372.aspx)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "1. Read my chapter on performance profiling for more advanced topics: [Performance Profiling](PerformanceProfiling.html)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 68,
      "luyangkenneth": 1
    }
  },
  {
    "path": "contents/performance/WebPerformance.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "  title: Web Performance"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "# Web Performance"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "**Author(s): [Marvin Chin](https://github.com/marvinchin)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "Reviewers: [Lu Yang Kenneth](https://github.com/luyangkenneth), [Monika Manuela Hengki](https://www.github.com/monmanuela)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "## What is Web Performance"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "Web Performance is a broad term that refers to how performant a web application *feels* to its users. This includes many aspects such as how long the site takes to load, how quickly the site becomes interactive, and how responsive it feels when the user interacts with the site."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "As web applications grow more complex, it becomes increasingly important for web developers to be aware of the factors that affect performance, and consider how performance can impact the user experience."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "## Why Web Performance Matters"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "The performance of your web application has a direct impact on its ability to attract and retain users:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- Sites which take more than 3 seconds to load are more likely to be abandoned by users [[source](https://developer.akamai.com/blog/2016/09/14/mobile-load-time-user-abandonment)]."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- Conversely, reducing page load times have been shown to have significant impact on improving user engagement [[source](https://medium.com/carousell-insider/how-we-made-carousells-mobile-web-experience-3x-faster-bbb3be93e006)]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- In addition, search engines have begun to use page load times as a factor in determining search rankings [[source](https://webmasters.googleblog.com/2018/01/using-page-speed-in-mobile-search.html)]."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- Improving web performance is also essential in making your web application accessible to users from emerging markets, where low-end devices and limited bandwidth are the norm [[source](https://building.calibreapp.com/beyond-the-bubble-real-world-performance-9c991dcd5342)]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "In order to deliver a positive user experience, web developers must ensure that their applications meet acceptable performance standards."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "## Key Ideas in Improving Web Performance"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "There are many factors which affect web performance. Here, we give an overview of some of the key ideas that can be used to improve the performance of your web application."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "**Idea 1: Reduce Javascript Payloads**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "Loading and executing Javascript is often the slowest part of the page load process [[source](https://medium.com/@addyosmani/the-cost-of-javascript-in-2018-7d8950fbb5d4)]. Reducing the amount of Javascript that needs to be loaded thus significantly reduces the time taken for your site to load."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "Here are some steps that web developers can take to reduce the amount of Javascript that clients need to load:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- Use code splitting to load only the Javascript required for the page being accessed [[source](https://developers.google.com/web/fundamentals/performance/optimizing-javascript/code-splitting/)]."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- Remove unused code (often parts of libraries that are not used in the application) with tree shaking [[source](https://developers.google.com/web/fundamentals/performance/optimizing-javascript/tree-shaking/)]."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- Ensure that the delivered Javascript is minified [[source](https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/javascript-startup-optimization/)]."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- Create performance budgets that specify the maximum size of Javascript payloads, and enforce them to ensure that the size of your Javascript payloads remain under control [[source](https://web.dev/fast/incorporate-performance-budgets-into-your-build-tools)]."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "**Idea 2: Optimize Images**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "Images form a significant portion of the resources loaded on web applications [[source](https://httparchive.org/reports/page-weight)]. To improve performance and speed up the site for users, web developers should thus try to reduce the amount of bandwidth used to load images."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "Images can be optimized for the web in the following ways:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- Use the correct file format that provides the appropriate balance between quality, detail, and file size. For example, you should use JPEG for photographs that contain lots of colors, PNG for logos and icons which have less colors but contain sharper details, and GIF for animated images [[source](https://medium.com/beginners-guide-to-mobile-web-development/web-image-formats-googles-webp-17e2fe5fc53e)]."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- Compress your images to reduce the amount of data that needs to be loaded [[source](https://www.html5rocks.com/en/tutorials/speed/img-compression/)]. Be careful to strike a balance between image size and quality for optimal user experience."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- Deliver appropriately sized images based on the resolution of the client device [[source](https://developer.mozilla.org/en-US/docs/Learn/HTML/Multimedia_and_embedding/Responsive_images)]. This prevents smaller (often mobile or lower-end) devices from wasting bandwidth loading large images that cannot be displayed at their full resolution on the device."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "**Idea 3: Use Progressive Rendering**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "The sooner the user sees content being displayed on the page, the faster they perceives the site to be. Progressive rendering achieves this by avoiding rendering the entire page all at once, but instead ordering the loading of content in a manner that allows *some* parts of the page to be rendered as quickly as possible."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "Here are several ways how progressive loading can be effectively applied:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- Load only the most critical content as part of the initial render, and fetch remaining resources asynchronously after the render [[source](https://developers.google.com/web/fundamentals/performance/critical-rendering-path/)]. Code splitting can also be helpful here to reduce the amount of Javascript that needs to be loaded for the initial render [[source](https://developers.google.com/web/fundamentals/performance/optimizing-javascript/code-splitting/)]."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- Use lazy loading to defer requesting non-critical resources until they are needed [[source](https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/)]."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- Show content placeholders while fetching resources to indicate loading progress to the user [[source](https://medium.com/@praveencnaik/content-placeholder-the-new-design-trend-for-audience-involvement-e2ab533d7304)]."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "## Measuring Web Performance"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "Improving web performance is a continuous, ongoing process. The ability to measure and track performance is necessary for developers to monitor the impact of their changes over time."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "Here are some ways that you can measure the performance of your web applications:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- Test your site under various network conditions with [Chrome DevTools](https://developers.google.com/web/tools/chrome-devtools/network/network-conditions). This is helpful to get a feel for how the site feels for users on slower devices during the development process."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- Audit web performance using [Lighthouse](https://developers.google.com/web/tools/lighthouse/). This provides many useful metrics for understanding the performance of your site and identifying performance bottlenecks under controlled conditions."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- Use [WebPageTest](https://www.webpagetest.org/) to test the performance of your website from multiple locations around the world at real consumer connection speeds. This provides real-world performance indicators that is especially useful if the target audience of your site resides in a different region."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- Collect user-centric performance metrics to help you to monitor how your application actually performs in a real-world scenario, and how your site performance relates to other user engagement metrics [[source](https://developers.google.com/web/fundamentals/performance/user-centric-performance-metrics)]."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "## Additional Resources"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- [Google\u0027s Web Performance Fundamentals](https://developers.google.com/web/fundamentals/performance/why-performance-matters/) is a comprehensive resource that explains many factors that affect web performance."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- [Kinsta\u0027s Beginner Guide to Website Speed Optimization](https://kinsta.com/learn/page-speed/) is a guided resource for improving website speeds."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "- [Twitter Lite Case Studey](https://medium.com/@paularmstrong/twitter-lite-and-high-performance-react-progressive-web-apps-at-scale-d28a00e780a3) is a real-world study that highlights how web performance principles can be applied to great effect."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "marvinchin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "marvinchin"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "marvinchin": 83
    }
  },
  {
    "path": "contents/security/sqlInjection.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: SQL Injection"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# SQL Injection"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "**Authors: [Jiang Chunhui](https://github.com/Adoby7), [Lewis Koh](https://github.com/nus-cs3281/2018/blob/master/students/lewisKoh/lewisKoh-Resume.md)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "Reviewers: [Ayush Chatto](https://github.com/AyushChatto), [Monika Manuela Hengki](https://github.com/monmanuela),  [Nicholas Chua](https://github.com/nicholaschuayunzhi), [Rachael Sim](https://github.com/rachx), [Tran Tien Dat](https://github.com/tran-tien-dat), [Wen Xin](https://github.com/wenmogu)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "## SQL"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "SQL (Structured Query Language) is a common language which is used by websites to communicate with databases. Databases can be used to store persistent data, such as usernames and passwords, sensitive account data, or other important information used by the website. Typically, SQL works on relational databases, which are usually made of many \"tables\" organised in rows and columns. Each row is a separate entry in the table, and each column is a specific parameter which can be used by the entry. A sample table is shown below:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "|   UserId   |    Username   |Password|"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "|:----------:|:-------------:|:------:|"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "|      1     |     Admin     | 123456 |"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "|      2     |     Alice     | pw1234 |"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "|      3     |      ...      |   ...  |"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "SQL is used to interact with the database by sending \"queries\" which the database responds to. Some common SQL commands used include: "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* `SELECT` - retrieves information from a table"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* `UPDATE` - changes information from a table"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* `INSERT INTO` - adds a new entry into a table"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* `DELETE FROM` - deletes information from a table"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "* `DROP` - deletes the whole table"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "In addition, a query could use parameters to filter, reorder, and group the returned results. For example, the following query will only returns the records in table \"users\" whose user name is \"Admin\". Here the parameter `Username \u003d Admin` in the `WHERE clause` works as a filter."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "```SQL"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "SELECT * FROM users WHERE Username \u003d \u0027Admin\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "More information about SQL can be found [here](https://www.w3schools.com/sql/)."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "## How does SQL Injection Work?"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "\u003e**SQL injection is the placement of malicious code in SQL statements, via web page input.**\u003cbr\u003e--source: [w3schools](https://www.w3schools.com/sql/sql_injection.asp)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "To learn about SQL injection, let us suppose that a typical website connects to a database which stores user information like below:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "|   UserId   |    Username   |Password|"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "|:----------:|:-------------:|:------:|"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "|      1     |     Admin     | 123456 |"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "|      2     |     Alice     | pw1234 |"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "|      3     |      ...      |   ...  |"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "Then the website prompts a login form to require the user to enter `username` and `password`. After receiving the data, it generates the following SQL query: "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "String query \u003d \"SELECT * FROM Users WHERE Username \u003d ‘\" + input_username +\"’ "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                AND Password \u003d ‘\" + input_password + \"’\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Adoby7"
        },
        "content": " Next, the website checks whether the query returns any record to verify whether the user enters the correct password."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "As an example, if a user entered their username, `Alice`, and password, `pw1234` into the website to try to gain access:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Username: Alice"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Password: pw1234"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "The constructed query would look like this:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "SELECT * FROM Users WHERE Username \u003d ‘Alice’ "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "AND Password \u003d ‘pw1234’"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "This query would find all entries in the `Users` table in the database, and return any entries where the `Username` is `Alice` and the `Password` is `pw1234`. If the previous table was searched, it would return the details of the second row as the result. Since there was a result returned, the website would be able to tell that a legitimate username and password combination was entered since the query requires that both are matched to retrieve the data. Thus, the website would know that the user is legitimate, and the user would be allowed to log into the site."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Adoby7"
        },
        "content": " On the other hand, if no result was returned by the database, the website would know that the username and password combination does not match any of the users in the database, and would deny access to the person trying to log in."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "**However, some websites may not check the syntax of user input rigorously, and therefore a malicious user can inject SQL query via the user input.** "
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "In the example above, the website directly substitutes the information given by the user without any validation. In this case, an attacker can supply some malicious SQL code in the user input such that it changes the nature of the SQL statement executed."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Adoby7"
        },
        "content": " For example, the attacker can add more parameters to the query:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "Username: Admin"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "Password: foo’ OR ‘1’\u003d‘1"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "The SQL command string built from this input would be as follows:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "SELECT * FROM Users WHERE Username \u003d ‘Admin’ "
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "AND Password \u003d ‘foo’ OR ‘1’\u003d‘1’"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "In SQL, `AND` operations are checked before `OR` operations."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "This query will check the database for entries where:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "(Username \u003d Admin AND Password \u003d foo) OR (‘1’\u003d‘1’)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "This `where` clause will always return true, as `‘1’\u003d‘1’` is always true."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "As such, the query can be simplified to this:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "SELECT * FROM Users"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "This will return all the rows from the `Users` table in the database, regardless of username or password entered. "
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "The above technique of injecting malicious SQL code via user input is called SQL injection. If used in user authentication, the attacker is able to gain access to anyone\u0027s account. Moreover, this attacker can also modify sensitive information if the account owner has the privilege (e.g. a lecturer who can modify students\u0027 marks)."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "**In addition to adding extra parameters to compromise the authentication, a malicious user may even add custom queries to view, modify the records in database, or even delete the whole database.**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "An SQL query ends with a semicolon \";\". In the previous section the malicious user terminates one parameter by single quote \"\u0027\", and add more parameters behind it. Now, he can also terminate the query by semicolon, and adds another query at the back:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "Username: foo"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "Password: bar’; DROP TABLE Users;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "```"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "SELECT * FROM Users WHERE Username \u003d ‘foo’ AND Password \u003d ‘bar’; "
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "DROP TABLE Users;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "```"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "When the database executes these two queries, it will delete all user information. Then other users cannot access this website. In addition to the `DROP` query, the attacker may also inject `SELECT` and `INSERT` queries, which can either read sensitive data from database or add data to it. "
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "## Why is it Important to Prevent SQL Injection?"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "1. **It is the most common type of attack.** According to [Open Web Application Security Project (OWASP) report](https://www.owasp.org/images/7/72/OWASP_Top_10-2017_%28en%29.pdf.pdf), the injection attack is always the annual top 1 application security risk from 2013 to 2017. In addition, [Statistics from Akamai](https://www.akamai.com/uk/en/resources/our-thinking/state-of-the-internet-report/web-attack-visualization.jsp) shows that in one week, over 80% of attacks are SQL injection."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "1. **It can have serious consequences.** SQL injection can cause the loss of large amount of money. Based on the [Global Threat Intelligence Report](https://www.helpnetsecurity.com/2014/03/28/analysis-of-three-billion-attacks-reveals-sql-injections-cost-196000/), even a small SQL injection attack may cause hundreds of thousands dollars lost. "
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "Furthermore, information disclosure is another serious consequence. [An SQL injection attack on the toymaker company, VTech](https://coar.risc.anl.gov/consequences-of-sql-injection-attacks/), caused millions of parents\u0027 and children\u0027s profiles to be stolen. "
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "Thus, we need to pay attention to prevent this attack in our code."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "1. **It is easy to prevent.** Referring to the section below, you do not need to put too many efforts on preventing from SQL injection. As it can prevent such a common attack, why not do it now?"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "## Preventing SQL Injection"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "There are a couple of ways to protect your website against SQL injection attacks. The two most common ways are:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "1. Prepared Statements using Parameterized Queries"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "1. Whitelist Input Validation"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below explain the two options in more detail."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "### Solution 1: Prepared Statements using Parameterized Queries"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "By defining all the SQL code first and passing in the parameters afterwards, you can make the database distinguish the difference between code and data. It would treat the values entered by the user as a parameter, and would not allow it to alter the query being executed. The way to achieve this varies by language, but it is easy to implement and effective."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "For example, instead of writing this in Java:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "String query \u003d \"SELECT * FROM Users WHERE Username \u003d \" + input_username +\"’ "
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                AND Password \u003d ‘\" + input_password + \"’\";"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "Statement statement \u003d connection.createStatement();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "ResultSet results \u003d statement.executeQuery( query );"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "You can prepare the statement like this:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "```java"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": " String query \u003d \"SELECT * FROM Users WHERE Username \u003d ? "
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                AND Password \u003d ? \";"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": " PreparedStatement pstmt \u003d connection.prepareStatement( query );"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": " pstmt.setString( 1, input_username ); "
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": " pstmt.setString( 2, input_password );"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": " ResultSet results \u003d pstmt.executeQuery( );"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The `?` in the query string is a placeholder for a string value. In the example, the first `?` is substituted with the value of `input_username` using the call `pstmt.setString(1, input_username)`. If the earlier attack was attempted, The query being submitted to the database will look like this:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "```sql"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "SELECT * FROM Users WHERE Username \u003d \u0027foo\u0027 AND Password \u003d \u0027bar\u0027 OR ‘’\u003d’’"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "However, since it is treated as a value to be used, the database will not allow it to modify the query, and it would not be able to affect the structure of the SQL statement. As such, the query will check the database for entries where:"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Username \u003d foo"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "AND "
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Password \u003d bar OR ‘’\u003d’’"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "As such, the query is safe from SQL code being injected by users."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "### Solution 2: Whitelist Input Validation"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "By applying a whitelist to the values a user is allowed to use, you can remove undesired symbols in the query being passed to the database "
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "(e.g. whitelisting only alphanumeric characters for a username). This ensures that attackers won\u0027t be allowed to enter special characters "
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "which may have unwanted effects when executed. (e.g. special characters in SQL such as `\u0027`, `@`, `^` and `_`)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "References:"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://www.owasp.org/index.php/SQL_Injection"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "(Basic description of SQL Injection attack taken from here)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "1. http://projects.webappsec.org/f/WASC-TC-v2_0.pdf (page 105-110)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "(Description of the two types of SQL injection attack taken from here)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Additional Reading Resources:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "1. http://www.sqlinjection.net/"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "(Good starting point for diving deeper into SQL injection)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://www.owasp.org/index.php/Testing_for_SQL_Injection_(OTG-INPVAL-005)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "(How to test your website for SQL injection attacks)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "(Parameterized query examples for some common languages)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "(A list of possible preventions, which contains even more ways to protect your site from SQL injection attacks)."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "1. http://guides.rubyonrails.org/security.html#sql-injection"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "(Discussion of how SQL injection attacks work, some possible scenarios of such attacks, and possible preventive measures using Ruby on Rails)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://www.owasp.org/index.php/Blind_SQL_Injection"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "(Discussion about a type of SQL injection attack, when only generic messages are displayed by the website)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://cwe.mitre.org/data/definitions/89.html"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "(Comprehensive coverage of the aspects of SQL injection)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "Additional Resources:"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://github.com/sqlmapproject/sqlmap"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "(Penetration testing tool that detects and exploits SQL injection flaws)"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "1. https://find-sec-bugs.github.io/"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "(Plugin to detect security vulnerabilities in Java web applications, including SQL injection)"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 165,
      "Adoby7": 66
    }
  },
  {
    "path": "contents/shells/bash.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "junming403"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "junming403"
        },
        "content": "  title: Introduction to bash shell"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "junming403"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "junming403"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "junming403"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "junming403"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "junming403"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "junming403"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "junming403"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "junming403"
        },
        "content": "  "
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "junming403"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "junming403"
        },
        "content": "# Introduction to Linux bash shell "
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "junming403"
        },
        "content": "Author: [Wang Junming](https://github.com/junming403)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "junming403"
        },
        "content": "Reviewers: [Rahul Rajesh](https://github.com/rrtheonlyone), [Ong Shu Peng](https://github.com/ongspxm), [Jeremy Choo](https://www.github.com/ChooJeremy), [Tan Zhen Yong"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "junming403"
        },
        "content": "](https://github.com/Xenonym)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "junming403"
        },
        "content": "## What is the shell?"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "junming403"
        },
        "content": "In general, a computer can be divided into 3 abstraction layers: hardware, kernel and applications. As users, we cannot control the hardware directly. Instructions have to be given through the kernel as the kernel is the one that controls the hardware."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "junming403"
        },
        "content": "\u003cimg src\u003d\"https://cdn-images-1.medium.com/max/1200/1*zEv6mAa2wzHnz4a5uWW4gw.png\" alt\u003d\"shell-kernel\" style\u003d\"width:400px;\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "junming403"
        },
        "content": "\u003csub\u003esource of image: [What (really) happens when you type ls -l in the shell](https://medium.com/meatandmachines/what-really-happens-when-you-type-ls-l-in-the-shell-a8914950fd73)\u003c/sub\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "junming403"
        },
        "content": "The **shell** is the interface through which we pass instructions to the kernel. These instructions will then be executed through the hardware. In this article, we will look specifically into the **Linux bash shell**."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "junming403"
        },
        "content": "[**bash**](https://www.gnu.org/software/bash/manual/html_node/) stands for **Bourne Again SHell**, an enhanced version of the original Unix Shell program. It has become the standard shell of various linux distributions. "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "junming403"
        },
        "content": "\u003cimg src\u003d\"https://www.howtogeek.com/wp-content/uploads/2017/03/ximg_58c0939c2d487.png.pagespeed.gp+jp+jw+pj+ws+js+rj+rp+rw+ri+cp+md.ic.5lDzHl2vQG.png\" alt\u003d\"shell-kernel\" style\u003d\"width:600px;\"/\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "junming403"
        },
        "content": "\u003csub\u003esource of image: [The Best Keyboard Shortcuts for Bash](https://www.howtogeek.com/howto/ubuntu/keyboard-shortcuts-for-bash-command-shell-for-ubuntu-debian-suse-redhat-linux-etc/)\u003c/sub\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "junming403"
        },
        "content": "Users interact with the bash shell using various _commands_. A command is an instruction that is used to execute a specific function. The functions that a command is able to execute range from file/directory manipulation, process management to even networking!  You can also combine different commands to carry out complex operations."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "junming403"
        },
        "content": "One of the most widely used command is `ls`, which lists out all the files under the current directory. Here is a video demonstration of the `ls` command in action:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "junming403"
        },
        "content": "\u003ca href\u003d\"https://asciinema.org/a/06V6C9mg1lIAnJkzrsweojJUP\" target\u003d\"_blank\"\u003e\u003cimg src\u003d\"https://asciinema.org/a/06V6C9mg1lIAnJkzrsweojJUP.svg\" alt\u003d\"ls\" style\u003d\"width:500px;height:320px;\"/\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "junming403"
        },
        "content": "### Bash scripts"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "junming403"
        },
        "content": "Bash supports a powerful language for writing scripts, usually referred to as **bash scripts**."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "junming403"
        },
        "content": "Bash scripts are able to carry out a range of operations by executing different commands. Let us consider an example: suppose you want to check if a given file exists. The following script will be able to do that; you input the filename and it will tell you the answer."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "junming403"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "junming403"
        },
        "content": "#!/bin/bash"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "junming403"
        },
        "content": " "
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "junming403"
        },
        "content": "echo -e \"Please input a filename, I will check if the file exists.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "junming403"
        },
        "content": "# waiting for user input."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "junming403"
        },
        "content": "read -p \"Input a filename : \" filename"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "junming403"
        },
        "content": "# check if file exists."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "junming403"
        },
        "content": "test ! -e $filename \u0026\u0026 echo \"The file \u0027$filename\u0027 DO NOT EXIST\" \u0026\u0026 exit 0"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "junming403"
        },
        "content": "test -f $filename \u0026\u0026 filetype\u003d\"regular file\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "junming403"
        },
        "content": "test -d $filename \u0026\u0026 filetype\u003d\"directory\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "junming403"
        },
        "content": "# output result."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "junming403"
        },
        "content": "echo \"The file: $filename is a $filetype\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "junming403"
        },
        "content": "```"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "junming403"
        },
        "content": "Here is an video demonstration of running the script."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "junming403"
        },
        "content": "\u003ca href\u003d\"https://asciinema.org/a/gGqI8rPSGTRM7Ndot7B6aLNEF\" target\u003d\"_blank\"\u003e\u003cimg src\u003d\"https://asciinema.org/a/gGqI8rPSGTRM7Ndot7B6aLNEF.svg\" alt\u003d\"check-file\" style\u003d\"width:500px;height:320px;\"/\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "junming403"
        },
        "content": "The above bash script is still just a collection of bash commands; this means you can get the same result by typing those commands one at a time. However, the true advantage of using a bash script is due to its support for `conditionals`, `loops` and `functions`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "junming403"
        },
        "content": "The following is an example of a bash script that make use of conditionals and loops. Suppose you want to let the user input a directory name, check if it exists, and then output the write permission for all files inside that directory."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "junming403"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "junming403"
        },
        "content": "#!bin/bash"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "junming403"
        },
        "content": "# read user input and check if directory exists."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "junming403"
        },
        "content": "read -p \"Please enter a directory name: \" dir"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "junming403"
        },
        "content": "if [ \"$dir\" \u003d\u003d \"\" -o ! -d \"$dir\" ]; then"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "junming403"
        },
        "content": "  echo \"The $dir is NOT exist in your system\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "junming403"
        },
        "content": "  exit 1"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "junming403"
        },
        "content": "fi"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "junming403"
        },
        "content": "# output permissions for each of the file under the directory."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "junming403"
        },
        "content": "filelist\u003d$(ls $dir)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "junming403"
        },
        "content": "for filename in $filelist"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "junming403"
        },
        "content": "do "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "junming403"
        },
        "content": "  perm\u003d\"readable\""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "junming403"
        },
        "content": "  test -w \"$dir/$filename\" \u0026\u0026 perm\u003d\"$perm writable\""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "junming403"
        },
        "content": "  echo \"The file $dir/$filename \u0027s permission is $perm\" "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "junming403"
        },
        "content": "done"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "junming403"
        },
        "content": "```"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "junming403"
        },
        "content": "Here is an video demonstration of the script in action."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "junming403"
        },
        "content": "\u003ca href\u003d\"https://asciinema.org/a/pNnG9krPxUBmQpJ00nWr8pvxM\" target\u003d\"_blank\"\u003e\u003cimg src\u003d\"https://asciinema.org/a/pNnG9krPxUBmQpJ00nWr8pvxM.svg\" alt\u003d\"check-permission\" style\u003d\"width:500px;height:320px;\"/\u003e\u003c/a\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "junming403"
        },
        "content": "**Functions** in bash scripts are just like functions in normal programming languages. More information about bash scripts can be found [here](https://www.gnu.org/software/bash/manual/html_node/). "
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "junming403"
        },
        "content": "### Combining of scripts via stream redirection"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "junming403"
        },
        "content": "In Linux, you can _redirect_ the output of one application to the input of another, combining the two applications together as if there is a _pipe_ between them. In fact, Linux can _pipe_ data between programs, files, and input/output devices seamlessly. You can take advantage of these abilities in your shell commands/scripts to perform complex tasks with just a few commands."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "junming403"
        },
        "content": "For example, suppose you wrote an executable `calculate` that takes in a user input, does a calculation, and gives the output. To run it, you simply type:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "junming403"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "junming403"
        },
        "content": "./calculate"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "junming403"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "junming403"
        },
        "content": "However, you do not want to manually test this program. Instead, you want to test with a larger data set known as `DataBundle`. You verify the output with another executable `verify`, which takes in the result as input, verifies its correctness and outputs **PASS** or **FAIL**. Here\u0027s how we can do it."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "junming403"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "junming403"
        },
        "content": "./calculate \u003c DataBundle \u003e result"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "junming403"
        },
        "content": "./verify \u003c result"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "junming403"
        },
        "content": "```"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "junming403"
        },
        "content": "Notice in this case, `calculate` uses the data in `DataBundle` as input, and output the results to the file `result`. Then, `result` is taken as input to `verify`, and the final verification result is printed on screen."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "junming403"
        },
        "content": "Furthermore, if the code of `calculate` is buggy, it throws an exception and the error message will be redirected to the error output. As a result, our result file will be empty! In order to handle this properly, we can also redirect our error output to a file `errors`, and verify that it is empty (so that no errors have occurred during execution) before we execute `verify`."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "junming403"
        },
        "content": "```bash"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "junming403"
        },
        "content": "#!/bin/bash"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "junming403"
        },
        "content": "./calculate \u003c DataBundle \u003e result 2\u003e errors"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "junming403"
        },
        "content": "if [ -s errors ]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "junming403"
        },
        "content": "then"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "junming403"
        },
        "content": "     ./verify \u003c result"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "junming403"
        },
        "content": "else"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "junming403"
        },
        "content": "     echo \"error occured during execution.\""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "junming403"
        },
        "content": "fi"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "junming403"
        },
        "content": "```"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "junming403"
        },
        "content": "Furthermore, you can use the `|` symbol to chain various Linux commands together such that the output of the previous commands is passed as input to the next command."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "junming403"
        },
        "content": "The following example make use of shell commands [ps](http://man7.org/linux/man-pages/man1/ps.1.html) and [grep](http://man7.org/linux/man-pages/man1/grep.1.html). ps displays information about a selection of the active processes and grep searches for the pattern in the given input. "
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "junming403"
        },
        "content": "Let us say you want to check the status of process `p` running on your system. The `ps aux` command by itself lists all the processes currently running. If there are too many processes listed and you cannot find `p`, you can pass the result of `ps aux` to `grep \u0027p\u0027` to as `ps aux | grep \u0027p\u0027` to capture process `p`\u0027s status."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "junming403"
        },
        "content": "A more detailed introduction to I/O stream redirection can be found [here](https://www.digitalocean.com/community/tutorials/an-introduction-to-linux-i-o-redirection)."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "junming403"
        },
        "content": "## Why use the shell?"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "junming403"
        },
        "content": "A common question many people ask is: Why type commands in a shell when we can do the same things using GUI applications? Here are some reasons:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "junming403"
        },
        "content": "- **Faster**: Often, performing a task via the shell is faster than doing the same via a GUI application. This is because the shell does not get slowed down by other factors like GUI rendering. For example, when performing tasks on a remote server using a shell, the lag will be less."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "junming403"
        },
        "content": "- **Uniform**: Unlike GUI apps whose availability and usage can vary between Linux distributions, the shell is always available and the usage is almost the same across different Linux distributions. "
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "junming403"
        },
        "content": "- **More powerful**: GUIs tends to simplify things, giving the user fewer options. With a shell, you will have complete control of every option. While the shell has a steep learning curve, once you are familiar with it, you can do more things efficiently as compared to a GUI application. For example, you can automate things with a shell, something not easy to do with a GUI application."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "junming403"
        },
        "content": "## How to get started?"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "junming403"
        },
        "content": "In our opinion, there is no need to learn the shell in one go. Instead, whenever you use a GUI tool to accomplish a task, try to learn how to do the same using the shell. For example, when using git, use it via the shell instead of a GUI tool such as Source Tree. That way, you can learn the shell incrementally, over time."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "junming403"
        },
        "content": "However, if you really wish to learn bash systematically, below are some resources you might find useful."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "junming403"
        },
        "content": "- [Bash Reference Manual](https://www.gnu.org/software/bash/manual/html_node/) is a good reference manual of linux bash shell. "
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "junming403"
        },
        "content": "- The [Google Shell Style Guide](https://google.github.io/styleguide/shell.xml) is a good baseline for good shell scripting style."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "junming403"
        },
        "content": "- Gentoo has a good [`bash` shell reference](https://devmanual.gentoo.org/tools-reference/bash/)."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "junming403"
        },
        "content": "- Apple\u0027s [Shell Scripting Primer](https://developer.apple.com/library/archive/documentation/OpenSource/Conceptual/ShellScripting/Introduction/Introduction.html) is a in-depth introduction to shell scripting for beginners."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "junming403"
        },
        "content": "In addition, you can always use the [`man`](https://en.wikipedia.org/wiki/Man_page) command to find more information about a bash command. For example, the command `man grep` will give you the built-in help page about the `grep` command. These help pages are written in a programmer-friendly format and are very comprehensive."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "junming403"
        },
        "content": "Below is an example showing the man page for `grep` command."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "junming403"
        },
        "content": "```"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "junming403"
        },
        "content": "GREP(1)                   BSD General Commands Manual                  GREP(1)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "junming403"
        },
        "content": "NAME"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "junming403"
        },
        "content": "     grep, egrep, fgrep, zgrep, zegrep, zfgrep -- file pattern searcher"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "junming403"
        },
        "content": "SYNOPSIS"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "junming403"
        },
        "content": "     grep [-abcdDEFGHhIiJLlmnOopqRSsUVvwxZ] [-A num] [-B num] [-C[num]]"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "junming403"
        },
        "content": "          [-e pattern] [-f file] [--binary-files\u003dvalue] [--color[\u003dwhen]]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "junming403"
        },
        "content": "          [--colour[\u003dwhen]] [--context[\u003dnum]] [--label] [--line-buffered]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "junming403"
        },
        "content": "          [--null] [pattern] [file ...]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "junming403"
        },
        "content": "DESCRIPTION"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "junming403"
        },
        "content": "     The grep utility searches any given input files, selecting lines that"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "junming403"
        },
        "content": "     match one or more patterns.  By default, a pattern matches an input line"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "junming403"
        },
        "content": "     if the regular expression (RE) in the pattern matches the input line"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "junming403"
        },
        "content": "     without its trailing newline.  An empty expression matches every line."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "junming403"
        },
        "content": "     Each input line that matches at least one of the patterns is written to"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "junming403"
        },
        "content": "     the standard output ......"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "junming403"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "junming403"
        },
        "content": "```"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "junming403"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "junming403": 183
    }
  },
  {
    "path": "contents/staticAnalysis/FindBugs.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: FindBugs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# FindBugs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Xiao Pu](https://nus-oss.github.io/cs3281-website/students/AY1617S2/xiaoPu/xiaoPu-Resume.html), [Shradheya Thakre](https://github.com/tshradheya)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "FindBugs is a static analysis tool to find bugs in **Java** programs. It looks for \u0027bug patterns\u0027 in the code and signals possible violations. Potential errors are classified in four ranks:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "1. scariest"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "1. scary"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "1. troubling"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "1. of concern"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "This is a hint to the developer about their possible impact or severity. For example, the bug \u0027null pointer dereference\u0027 has the pattern — A program declares a non-nullable variable but assigns `null` to the variable somewhere and uses it later."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "The \"bug patterns\" can be divided into nine groups:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Bad practice"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "1. Correctness"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "1. Experimental"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "1. Internationalization"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "1. Malicious code vulnerability"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "1. Multithreaded correctness"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "1. Performance"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "1. Security"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "1. Dodgy code"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to [FindBugs official documentation](http://findbugs.sourceforge.net/bugDescriptions.html) for a comprehensive list of bugs and the explanation of each bug."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "FindBugs analyses bytecode in compiled Java `.class` file and checks multiple files at the same time. This is unlike [CheckStyle](checkStyle.html) or [PMD](PMD.html) which can only check files one by one and analyse Java source code, allowing FindBugs to spot errors that would have been missed by CheckStyle and PMD. For example, one of the bug patterns in FindBugs is `RCN: Redundant nullcheck of value known to be non-null`. FindBugs will analyse all the assignments to a particular variable in the code base and then check whether the `nullcheck` for the variable is redundant or not."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "## Examples of Bugs that can be found using FindBugs"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "### Incorrectly overriding methods"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the following code:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "class Foo {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    //... data members ..."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //... methods ..."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //Overriding equals method - the wrong way"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Foo foo) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        //... logic ..."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "In the above code, if `foo.equals()` method is called, the `equals()` method of `Object` class rather than `Foo` class will be called. This is due to the way the Java code resolves overloaded methods at compile-time. FindBugs warns the developer of possible cases when a class defines a co-variant version of the `equals()` or `compareTo()` method."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "### Find hash-equals mismatch"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "The hashCode() and equals() method are called by many `Collection` based classes like - List, Maps, Sets, etc. FindBugs helps in finding problems when a class **overrides the `equals()` but not the `hashCode()` method or vice-versa**. Overriding only one of the `equals()` or `hashCode()` method can cause methods of Collection based classes to fail and hence FindBugs helps in reporting these errors at an early stage"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "### Return value of method ignored"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "FindBugs helps in finding places where your code has ignored the return value of method when it shouldn\u0027t have been."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "1 String s \u003d \"bob\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "2 s.replace(\u0027b\u0027, \u0027p\u0027);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "3 boolean isCorrect \u003d s.equals(\"pop\"); //isCorrect is `false`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "In the above examples, one would assume that the variable `isCorrect` is assigned `true` because the `line 2` replaces `b` with `p`. However since strings are immutable, the `replace()` function actually returns a new string with updated value rather than updating the string the method is called on."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Hence, `line 2` should be `String newString  \u003d s.replace(\u0027b\u0027, \u0027p\u0027); //newString \u003d\"pop\"`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "### Null pointer dereference"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "FindBugs looks for cases where a code path will or could cause a null pointer exception."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "1  Person person \u003d aMap.get(\"bob\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "2  if (person !\u003d null) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "3      person.updateAccessTime();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "4  }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "5  String name \u003d person.getName();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "In the above example, the `aMap` may or may not contain \"bob\", so FindBugs will report *possible* `NullPointerException` at `line 5`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "## How to use it"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "### Configuration"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "You can tell FindBugs which bug patterns to exclude and include by using [FilterFiles](http://findbugs.sourceforge.net/manual/filter.html). By default, if no filter files are provided, FindBugs will run all checks."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "### Suppress Warnings"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "You can use filter files with `exclude` option in FindBugs as discussed above to suppress warnings."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "In addition, you can also use `SuppressWarnings` [annotation](http://findbugs.sourceforge.net/manual/annotations.html) to filter out unwanted violations."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "### Running"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "There are several ways to run FindBugs."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "GUI:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "- [Using the FindBugs GUI](http://findbugs.sourceforge.net/manual/gui.html)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Command Line:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "- [Command Line](http://findbugs.sourceforge.net/manual/running.html)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "Build Automation Tools:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "- [Ant Task](http://findbugs.sourceforge.net/manual/anttask.html)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "- [FindBugs Maven Plugin](http://gleclaire.github.io/findbugs-maven-plugin/)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "- [Gradle FindBugs](https://docs.gradle.org/current/userguide/findbugs_plugin.html)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "IDE Integration:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "- [Eclipse Integration](http://findbugs.sourceforge.net/manual/eclipse.html)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "- [IntelliJ Integration](https://plugins.jetbrains.com/plugin/3847-findbugs-idea)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "- [NetBeans Integration](https://netbeans.org/kb/docs/java/code-inspect.html)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "## SpotBugs - The successor of Findbugs"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "On November 2016, FindBugs was [declared dead](https://mailman.cs.umd.edu/pipermail/findbugs-discuss/2016-November/004321.html) and [SpotBugs](https://spotbugs.github.io/) was [declared as its successor](https://mailman.cs.umd.edu/pipermail/findbugs-discuss/2017-September/004383.html) in September 2017."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "The current projects using `FindBugs` can make a shift to `SpotBugs` by following the [migration manual](http://spotbugs.readthedocs.io/en/latest/migration.html)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "## Advanced Topics"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "- [Data mining of bugs with FindBugs](http://findbugs.sourceforge.net/manual/datamining.html): The data for each analysis will be collected and you can use these statistics for data mining."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "- [Configure Analysis Properties](http://findbugs.sourceforge.net/manual/analysisprops.html#analysisproptable): You can define properties to configure options for some checks. For example, you can define the assertion methods in your project so that null pointer dereference bug detector will not raise violations if assertion methods are used."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "- [Use annotations](http://findbugs.sourceforge.net/manual/annotations.html): You can use annotations to indicate your intents so that FindBugs can issue warnings more appropriately."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "- [Writing custom detectors](https://www.ibm.com/developerworks/library/j-findbug2/): You can follow the tutorial step by step to write your customised detector."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "- [FindBugs Official Website](http://findbugs.sourceforge.net): Official website of FindBugs. You can find more documentations here."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "- [An Evaluation of FindBugs](http://www.cs.cmu.edu/~aldrich/courses/654/tools/Sandcastle-FindBugs-2009.pdf): Analysis of FindBugs in 2009\u0027s version, some content may be outdated. Useful for understanding the benefits and drawbacks."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "- [Improve the quality of your code](https://www.ibm.com/developerworks/library/j-findbug1/): Some examples showing the bugs reported by FindBugs. You can get a rough idea of how FindBugs will help you in your project."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 151,
      "luyangkenneth": 1
    }
  },
  {
    "path": "contents/staticAnalysis/PMD.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: PMD"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# PMD"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Xiao Pu](https://nus-oss.github.io/cs3281-website/students/AY1617S2/xiaoPu/xiaoPu-Resume.html)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "PMD is a static analyser for Java, JavaScript, Salesforce.com Apex, PL/SQL, Apache Velocity, XML, XSL. The copy/paste-detector([CPD](http://pmd.sourceforge.net/pmd-4.3.0/cpd.html)), which helps to find duplicated code, is also included as an add-on in PMD."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*Note that the links in this chapter is based on [PMD version 5.5.3](https://pmd.github.io/pmd-5.5.3/). You can check the latest version and documentation at its [GitHub Page](https://pmd.github.io/).*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Rules in PMD represent patterns in code. PMD is supposed to check these rules(patterns) and signal violations to programmers. For example, the `OverrideBothEqualsAndHashcode` rule requires programmers to override both `public boolean Object.equals(Object other)`, and `public int Object.hashCode()`, or override neither. "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "PMD supports checking rules for the following languages."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "- [Java](https://pmd.github.io/pmd-5.5.3/pmd-java/index.html) (includes [JSP](https://pmd.github.io/pmd-5.5.3/pmd-java/index.html) with [limitations](https://pmd.github.io/pmd-5.5.3/pmd-jsp/index.html))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "- [JavaScript](https://pmd.github.io/pmd-5.5.3/pmd-javascript/index.html)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "- [Apex](https://pmd.github.io/pmd-5.5.3/pmd-apex/index.html)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "- [PL/SQL](https://pmd.github.io/pmd-5.5.3/pmd-plsql/index.html)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "- [Velocity](https://pmd.github.io/pmd-5.4.1/pmd-vm/index.html)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "- [XML and XSL](https://pmd.github.io/pmd-5.5.3/pmd-xml/index.html)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "PMD doesn\u0027t support checking rules for the following languages. Only Copy/Paste Detector ([CPD](http://pmd.sourceforge.net/pmd-4.3.0/cpd.html)) is supported for them."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "- [C++](https://pmd.github.io/pmd-5.5.3/pmd-cs/index.html)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "- [C#](https://pmd.github.io/pmd-5.5.3/pmd-cpp/index.html)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "- [Fortran](https://pmd.github.io/pmd-5.5.3/pmd-fortran/index.html)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "- [Go](https://pmd.github.io/pmd-5.5.3/pmd-go/index.html)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "- [Groovy](https://pmd.github.io/pmd-5.5.3/pmd-groovy/index.html)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "- [Matlab](https://pmd.github.io/pmd-5.5.3/pmd-matlab/index.html)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "- [Objective-C](https://pmd.github.io/pmd-5.5.3/pmd-objectivec/index.html)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "- [Perl](https://pmd.github.io/pmd-5.5.3/pmd-perl/index.html) (only very basic CPD support)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "- [PHP](https://pmd.github.io/pmd-5.5.3/pmd-php/index.html)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "- [Python](https://pmd.github.io/pmd-5.5.3/pmd-python/index.html)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "- [Ruby](https://pmd.github.io/pmd-5.5.3/pmd-ruby/index.html)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "- [Swift](https://pmd.github.io/pmd-5.5.3/pmd-swift/index.html)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "- [Scala](https://pmd.github.io/pmd-5.5.3/pmd-scala/index.html)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "## Limitation"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "Limitations are almost the same as [CheckStyle](CheckStyle.html)."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "- The examined code has to be compilable. The reason is described in [How does it work](#how-does-it-work) section."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "- Files will be examined one by one, which means you cannot check multiple files at the same time. "
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\t- For example, you cannot determine the full inheritance hierarchy of a class as you need to examine the parent class while checking the child class."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "## How to use it"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "### Download"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "PMD can be run on both Windows and Linux/Unix operating system with the help of [Java JRE](http://www.oracle.com/technetwork/java/javase/overview/index.html) 1.7 or higher. Refer to [How to install PMD and CPD](https://pmd.github.io/pmd-5.5.3/usage/installing.html) for more details."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "### Configuration"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "You can configure PMD to only include the rules that your want (see [How to make a new rule set](https://pmd.github.io/pmd-5.5.3/customizing/howtomakearuleset.html))."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "### Suppress Warnings"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "PMD supports suppressing warnings in four ways:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "- Annotations"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "- Comments"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "- Violation Suppress Regex"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "- Violation Suppress XPath"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "The details are described [here](https://pmd.github.io/pmd-5.5.3/usage/suppressing.html)."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "### Command Line Usage"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "PMD can be launched by using command line with various arguments. For details, please refer to [Running PMD via command line](https://pmd.github.io/pmd-5.5.3/usage/running.html)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "### Integration with Build Automation Tools"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "- [Ant task usage](https://pmd.github.io/pmd-5.5.3/usage/ant-task.html)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "- [The PMD Plugin in Gradle](https://docs.gradle.org/current/userguide/pmd_plugin.html)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "- [Maven 1 PMD plugin](https://pmd.github.io/pmd-5.5.3/usage/maven-plugin.html)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "- [Maven 2 PMD plugin](https://pmd.github.io/pmd-5.5.3/usage/mvn-plugin.html)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "### Integration with IDEs"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "PMD can be integrated with most of IDEs, inlcuding BlueJ, CodeGuide, Eclipse, eclipse-pmd, Emacs, Gel, IntelliJ IDEA, IntelliJ IDEA - QAPlug, JBuilder, JCreator, JDeveloper, JEdit, Maven, Maven 2, NetBeans, TextPad, WebLOgic Workshop 8.1.x. For instruction to integrate with those IDEs, please refer to [PMD integrations](https://pmd.github.io/pmd-5.5.3/usage/integrations.html)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "## Available Rulesets"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "There is not pre-defined rules set. You need to [define your rule sets](https://pmd.github.io/pmd-5.5.3/customizing/howtomakearuleset.html) by yourself."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "PMD has organised rules into different categories. For example, the rules for Java has been categorised into 26 sections, which will help you quickly find the rules that you want."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "You may refer to the [Features](#features) section to view the rules according to your languages and refer to [Configuration](#configuration) section to configure your rulesets."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "## How does it work"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "PMD use [JavaCC](http://javacc.org) to parse your code to a [AST(Abstract Syntax Tree)](https://en.wikipedia.org/wiki/Abstract_syntax_tree) and visited it recursively ([more details](https://pmd.github.io/pmd-5.4.1/customizing/howitworks.html)). Thus, one of the requirements for PMD to work is that the code must be in valid Java syntax. You can view the syntax tree by using [bin/designer.bat](https://pmd.github.io/pmd-5.5.3/customizing/howtowritearule.html)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "## Customization"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "- [How to write a PMD rule](https://pmd.github.io/pmd-5.5.3/customizing/howtowritearule.html) (A quicker way to write rule sets [Using XPath in PMD](https://pmd.github.io/pmd-5.4.1/customizing/xpathruletutorial.html), [XPath Rule tutorial](https://pmd.github.io/pmd-5.4.1/customizing/xpathruletutorial.html))"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "- [Add supports for new language](https://pmd.github.io/pmd-5.4.1/customizing/new-language.html) ([Add supports for CPD](https://pmd.github.io/pmd-5.4.1/customizing/cpd-parser-howto.html))"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "- [PMD](https://pmd.github.io/): PMD official website. You can download the latest version, view online documentation there."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "- [PMD Github](https://github.com/pmd/pmd): PMD GitHub page. You can contribute to the project or report bugs there."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "- [StackOverflow PMD](https://stackoverflow.com/questions/tagged/pmd): Question/Answer forum in StackOverflow for PMD. You can ask question related to the using of PMD."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 106,
      "luyangkenneth": 1
    }
  },
  {
    "path": "contents/staticAnalysis/checkStyle.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: CheckStyle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# CheckStyle"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Xiao Pu](https://nus-oss.github.io/cs3281-website/students/AY1617S2/xiaoPu/xiaoPu-Resume.html)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "CheckStyle is a static analyser for **Java**. It can be used to assist developers in [static analysis](intro.html) process."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "## Features"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "CheckStyle will examine code based on different rules(or checks)."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "According to the [checks list](http://checkstyle.sourceforge.net/checks.html) provided by CheckStyle, the checks(rules) can be divided into 14 sections."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "- Annotations"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "- Block Checks"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "- Class Design"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "- Coding"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "- Headers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "- Imports"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "- Javadoc Comments"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "- Metrics"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "- Miscellaneous"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "- Modifiers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "- Naming Conventions"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "- Regexp"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "- Size Violations"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "- Whitespace"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "## Limitations"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "As described [here](http://checkstyle.sourceforge.net/writingchecks.html#Limitations), there are several limitations in CheckStyle."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "- The code must be written in ASCII characters only."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "- The examined code has to be compilable. The reason is described in [How does it work](#how-does-it-work) section."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "- Files will be examined one by one, which means you cannot check multiple files at the same time."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\t- For example, you cannot determine the full inheritance hierarchy of a class as you need to examine the parent class while checking the child class."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "## How to use it"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "### Configuration"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "CheckStyle uses a [configuration file](http://checkstyle.sourceforge.net/config.html) to know all the rules that it is supposed to check."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "### Suppress Warnings"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "CheckStyle supports suppressing warnings in four ways:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "- [Annotations](http://checkstyle.sourceforge.net/config_filters.html#SuppressWarningsFilter)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "- [Comments](http://checkstyle.sourceforge.net/config_filters.html#SuppressionCommentFilter)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "- [File Filter](http://checkstyle.sourceforge.net/config_filefilters.html#BeforeExecutionExclusionFileFilter)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "- [Configuration File](http://checkstyle.sourceforge.net/config_filters.html#SuppressionFilter)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "### Running"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "There are several ways to run CheckStyle."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Command Line:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "- [Command Line](http://checkstyle.sourceforge.net/cmdline.html)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Build Automation Tools:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "- [Ant Task](http://checkstyle.sourceforge.net/anttask.html)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "- [Maven Checkstyle](https://maven.apache.org/plugins/maven-checkstyle-plugin/)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "- [Gradle Checkstyle](https://docs.gradle.org/current/userguide/checkstyle_plugin.html)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "IDE Integration:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "- [Eclipse Integration](http://eclipse-cs.sourceforge.net/#!/)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "- [IntelliJ Integration](https://plugins.jetbrains.com/idea/plugin/1065-checkstyle-idea)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "## Available Configurations"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "There are two widely used configurations: [Sun Code Conversions](http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html) and [Google Java Style](http://checkstyle.sourceforge.net/reports/google-java-style.html). Some common rules are already included in these configurations."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "## How does it work"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "CheckStyle will use [ANTLR](http://www.antlr.org) to parse your code into a [AST(Abstract Syntax Tree)](https://en.wikipedia.org/wiki/Abstract_syntax_tree) and visit it in a [DFS(Depth First Search)](https://en.wikipedia.org/wiki/Depth-first_search) pattern to check violations. Thus, it is necessary to make the code compilable in order for the ANTLR to work.  You can view the syntax tree using [CheckStyle Grammar Tree Viewer](http://checkstyle.sourceforge.net/writingchecks.html#The_Checkstyle_SDK_Gui)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "## Customisation"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "- [Writing Checks](http://checkstyle.sourceforge.net/writingchecks.html) (I want to write my own check for Java code.)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "- [Writing Javadoc Checks](http://checkstyle.sourceforge.net/writingjavadocchecks.html) (I want to enforce new rules for writing Javadoc header comment.)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "- [Writing Filters](http://checkstyle.sourceforge.net/writingfilters.html) (I will do something when violations are found.)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "- [Writing File Filters](http://checkstyle.sourceforge.net/writingfilefilters.html) (I want to check the rules against specific files.)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "- [Writing Listeners](http://checkstyle.sourceforge.net/writinglisteners.html) (I want different notifications (verbose printer, sending emails, etc) when violations are thrown.)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "## Resources"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "- [CheckStyle](http://checkstyle.sourceforge.net/): CheckStyle official website. You can download the latest version, view online documentation there."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "- [CheckStyle Github](https://github.com/checkstyle/checkstyle): CheckStyle GitHub page. You can contribute to the project or report bugs there."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "- [StackOverflow CheckStyle](http://stackoverflow.com/questions/tagged/checkstyle): Question/Answer forum in StackOverflow for CheckStyle. You can ask question related to the using of CheckStyle."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 97,
      "luyangkenneth": 1
    }
  },
  {
    "path": "contents/staticAnalysis/intro.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Static Analysis"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Introduction to Static Analysis"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Xiao Pu](https://nus-oss.github.io/cs3281-website/students/AY1617S2/xiaoPu/xiaoPu-Resume.html)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Static analysis is the process of analysing computer programme **without** executing the code. This practice is often used to ensure that codes follow certain structures or standards (e.g coding standards)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "It is possible to do static analysis manually, but there are automated tools(static analysers) that can assist developers in this process. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "## Why Static Analysis?"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "### Analyse Thoroughly"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "In some situations, it is impossible to achieve 100% test coverage. There will be some sections in the code that are not covered by test cases, which may result in bugs ([see](#find-potential-bugs-early) how static analysis will help you find bugs). In static analysis, all the related files/codes will be analysed."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "### Find Potential Bugs Early"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "Static analysis can find bugs before the execution. For example, some programmers may forget to add `break` statement in `switch` statement."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "switch(colour) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "case \u0027blue\u0027:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\tvalue \u003d 1;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "case \u0027green\u0027:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\tvalue \u003d 2;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Static analysis tools will automatically alert the programmers about the potential problems/bugs."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "### Enforce a Standard in Project"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "Many projects enforce certain coding standards. For example, some project require the following format for `if` statement."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "if (condition) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\t// true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "} else {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\t// false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "``` "
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "While others enforce the following standard:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "if (condition) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\t// true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\t// false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Such standards can be configured in static analysis tools and the tools will help you enforce the standards."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "### Improve Code Quality"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Static analysis will pick up common pitfalls in coding and suggest changes to help you improve your code quality. For example, for the following Java code:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "if (isConditionTrue()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\treturn true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "} else {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "\treturn false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Majority of static analysis tools will point out that this can be simplified to:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "return isConditionTrue();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "## Limitation of Static Analysis"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "### False positives"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Since static analysis tools only recognize patterns, there might be false positives introduced."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\t// logic part"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "} catch (Throwable t) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "\t// alert user"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the above code will catch any `Throwable` object and alert users that a fatal error has occurred in the system. In many static analysis tools, catching `Throwable` is regarded as a bad practice and thus the tools will prompt the error to developers. However, in this case, we want to provide a friendly alert for system crash instead of showing an ugly stack track. It is acceptable to catch `Throwable` and thus the violation detected by static analysis tools is a false positive."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "**Solution**: Many static analysis tools provide ways to suppress the warnings. For example, in [PMD](PMD.html) (a static analysis tool), `@SuppressWarnings` annotation can be used. In this case,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "``` java "
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "@SuppressWarnings(\"PMD.AvoidCatchingThrowable\") // used as fallback"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "is the correct way to suppress warnings."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "### Cannot Catch Error Introduced in Runtime Environment"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Since static analysis is done without executing the programme. Some vulnerabilities that are introduced in the runtime cannot be caught. Thus, you should **not** merely depend on static analysis tools to find bugs. Comprehensive test cases are also needed to verify the functionalities in logic, UI and etc."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "## How to Do Static Analysis (Static Analysis Tools)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "There are several static analysis tools that can be used to assist the process."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "- [List of tools for static code analysis - Wikipedia](https://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis): You can find static analysis tools that supports the language you use."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "- [Codacy - Automated code reviews \u0026 code analytics](https://www.codacy.com/): A code reviews tool that has integrated different static analysis tools. It can show data or statistics reported by different static analysis tools for each commit."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Here, we will introduce several well-known ones in detail. You can click the hyperlinks to look through them. We organised them by languages."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "- Java"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\t- [CheckStyle](checkStyle.html)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\t- [PMD](PMD.html)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\t- [FindBugs](FindBugs.html)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "- JavaScript"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "RonakLakhotia"
        },
        "content": "\t- [eslint](ESLint.html)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "## References"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "- [Why Static Code Analysis is Important?](http://javarevisited.blogspot.sg/2014/02/why-static-code-analysis-is-important.html)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "RonakLakhotia": 4,
      "-": 120,
      "luyangkenneth": 1
    }
  },
  {
    "path": "contents/swift/welcome-to-swift.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Swift"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Swift"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "**Authors: [Ch\u0027ng Ming Shin](https://github.com/ablyx/cs3281-website/blob/mingshin-week6-progress/students/AY1617S2/ch\u0027ngMingShin/Ch\u0027ngMingShin-Resume.md), [Jiang Chunhui](https://github.com/Adoby7), [Yong Zhi Yuan](https://github.com/Zhiyuan-Amos)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "Reviewers: [Aaron Chong](https://github.com/acjh), [Bryan Lew](https://github.com/blewjy), [Dickson Tan](https://github.com/Neurrone), [Rachael Sim](https://github.com/rachx), [Rahul Rajesh](https://github.com/rrtheonlyone), [Sam Yong](https://github.com/mauris), [Tan Wang Leng](https://github.com/yamgent), [Vivek Lakshmanan](https://github.com/vivekscl), [Wang Junming](https://github.com/junming403), [Xiao Pu](https://github.com/xpdavid)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "## Swift Overview"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "**Swift is the main programming language used for iOS programming.** Introduced in 2014 by Apple, Swift has more concise and more expressive syntax compared to its predecessor language [Objective-C](). Unlike most other software by Apple, Swift is [open source](https://github.com/apple/swift)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "**One main attraction to learn Swift\u0027s is that iOS developers are well paid** ([example](https://www.indeed.com/salaries/iOS-Developer-Salaries))."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "Swift syntax is not too different from other mainstream languages such as Python, Java or C++, which means switching to Swift is not difficult. On top of that, Swift also supports [_playgrounds_](), a feature that allows programmers to experiment with Swift code and see the results immediately, without the overhead of building and running an app."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "## Noteworthy Swift Features"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "Here are some noteworthy Swift features for you to get a feel of Swift."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "### Type Inference"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Swift supports type inference whereby the compiler automatically deduces the type of a variable during compilation by examining the values assigned to it. "
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "var str1: String \u003d \"foo\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "var str2 \u003d \"foo\" // compiler infers that str2 is of type String"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "Unlike **Python** or **JavaScript** which are dynamically typed, variables in Swift are statically typed. Statically-typed languages have will have the code checked at compile-time instead of run-time, which eliminates many (often) trivial bugs early, which in turn makes debugging the program easier."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "var str2 \u003d \"foo\" // compiler infers that str2 is of type String"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "str2 \u003d 5 // compilation error"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "### Optionals"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "Swift allows the use of `Optionals`, so that you can choose to either return nil or a data value, instead of returning a special value to indicate the absence of a value."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "func yearAlbumReleased(name: String) -\u003e Int {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    switch name {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"Taylor Swift\": return 2006"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"Fearless\": return 2008"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"Speak Now\": return 2010"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"Red\": return 2012"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"1989\": return 2014"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "        return -1 // Special value, but is not meaningful to other developers"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "Without Optionals, you might consider using -1 to indicate that there was no such album. However, if someone else uses this function, he may not know that -1 means \"no such album\", and it would be better if we could return nil?"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "func yearAlbumReleased(name: String) -\u003e Int? { // \"?\" indicates the return value type is an optional."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    switch name {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"Taylor Swift\": return 2006"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"Fearless\": return 2008"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"Speak Now\": return 2010"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"Red\": return 2012"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    case \"1989\": return 2014"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    default:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return nil"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "#### Optional Binding"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "Then, you can unwrap the Optional safely using an `if-let` statement to distinguish whether it is `nil` or not, and handle them separately:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "func timeTravel(album: String) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    let year \u003d yearAlbumReleased(album)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    if let past \u003d year { "
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // year contains a non-nil value"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // past is of type Int (not Int?) with the value stored in year"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    } else { "
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // year contains a nil value"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "If you would like to read up more about optionals, take a look at these articles:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "* [Swift optionals explained simply](https://hackernoon.com/swift-optionals-explained-simply-e109a4297298)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "* [What is an optional value in Swift?](http://stackoverflow.com/questions/24003642/what-is-an-optional-value-in-swift)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "#### Guard Statements"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Notice that the [happy path](http://xunitpatterns.com/happy%20path.html) in the code above is indented:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "func timeTravel(album: String) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    let year \u003d yearAlbumReleased(album)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    if let past \u003d year {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // happy path is indented"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // past contains the non-nil value of year; proceed to do something with past"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    } else { "
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // failure case"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    // past is no longer defined; unable to use past here"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "With the guard statement, the happy path is not indented:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "func timeTravel(album: String) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    let year \u003d yearAlbumReleased(album)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    guard let past \u003d year else {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // failure case"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    // happy path is not indented"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    // past contains the non-nil value of year; proceed to do something with past"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    // past remains defined till the function exits"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s understand how the code above works:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "1. The code within a `guard` block is only executed if `year` contains a nil value."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "1. As the `guard` statement is used to transfer program control out of a scope, you must call one of the following functions within the `guard` block: `return`, `break`, `continue`, `throw`. As such, the `guard` statement is meant to enforce the pre-conditions of a method and to perform early return."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some of the benefits of using `guard` statement over `if-let` statement:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "1. Unlike the `if-let` statement, using the `guard` statement causes `past` to remain defined and can be used till the function exits."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "1. While using `if-let` statements can lead to deeply nested `if-let` statements (i.e. pyramid of doom), `guard` statements allow us to have the happy path to be not indented, thereby increasing code readability."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "### Defer Statements"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "The `defer` key word in Swift provides an easy and safe way to execute some code before leaving current scope. It is helpful when you need to do post-operations in a function which has many points of return."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "The following code is an example of using a file:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "let fileDescriptor \u003d open(url.path, O_EVTONLY)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "if fileDescriptor \u003d\u003d -1 {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "\tclose(fileDescriptor)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "\treturn \"Failed\""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "// Use file descriptor"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "close(fileDescriptor)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "return \"Success\""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "As you can see from above, we have to close the `fileDescriptor` for every case we consider. This can be problematic when the number of cases increases. Instead, we can use the `defer` statement:"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "let fileDescriptor \u003d open(url.path, O_EVTONLY)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "defer {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "    close(fileDescriptor)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "}"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "if fileDescriptor \u003d\u003d -1 {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "\treturn \"Failed\""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "// Use file descriptor"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "return \"Success\""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "```"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "Using `defer` statement, the file will be closed no matter which branch the program returns. It also has the added advantage of preventing the developer from forgetting to close the file in some cases."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "This [document](https://docs.swift.org/swift-book/ReferenceManual/Statements.html#grammar_defer-statement) explains more about `defer` statement in Swift."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "### Data Types"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "#### Structs"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "Apart from the classes (something you are familiar with if you have already learned languages like Java / Python) which you use for creating instances of Reference type, Swift also provides the use of Structs to create instances of Value type. "
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s use a simple example (from [Apple\u0027s own blog on Swift](https://developer.apple.com/swift/blog/?id\u003d10)) to illustrate the difference between Reference types (Classes) and Value types (Structs). "
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "// Value type example"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "struct S { var data: Int \u003d -1 }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "var a \u003d S()"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "var b \u003d a                       // a is copied to b"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "a.data \u003d 42                     // changes a, not b"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "print(\"\\(a.data), \\(b.data)\")   // prints \"42, -1\\n\""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "// Reference type example"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "class C { var data: Int \u003d -1 }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "var x \u003d C()"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "var y \u003d x                       // x is copied to y"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "x.data \u003d 42                     // changes the instance referred to by x (and y)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "print(\"\\(x.data), \\(y.data)\")   // prints \"42, 42\\n\""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "In the example above, when you assign a reference type variable to another (i.e. `x` and `y`) they both refer to the same memory space. Later when you modify one of the variables, the other one will refer to the new value too. This may not be the desired behavior in some cases. In those cases, value-type variables (e.g., `a` and `b`) can be used to avoid implicit data sharing."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "You can think of Structs as a way to create instances that have their own unique copies of data, which can help to make things a lot easier."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "If you wish to find out more, here is an [article](https://medium.com/capital-one-developers/reference-and-value-types-in-swift-de792db330b2) that explains the difference between the 2 types, as well as the benefits of value types and when to use them."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "#### Enums"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "An enum is a data type that represents of a set of values. For example, we can use `String` to represent the possible types of a barcode. However, this allows us to assign invalid values to it:"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "var barcode \u003d \"qzCode\" // supposed to be \"qrCode\", but we accidentally assigned an invalid value"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "As such, we create an enum to restrict the values that we can assign to a barcode."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "enum Barcode {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    case upc"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    case qrCode"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "var barcode \u003d Barcode.qrCode "
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "barcode \u003d Barcode.qzCode // compilation error"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "Swift\u0027s enums can have associated values. This enables you to store additional custom information along with each case value, and permits this information to vary each time you use that case in your code. For example, we can have an enum `Barcode` with case values `upc` and `qrCode`. We want to be able to distinguish within each value as each `upc` and `qrCode` can take on different values:"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "enum Barcode {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    case upc(Int, Int, Int, Int)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    case qrCode(String)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    func printCode() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        switch self {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        case let .upc(numberSystem, manufacturer, product, check):"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            print(\"UPC : \\(numberSystem), \\(manufacturer), \\(product), \\(check).\")"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        case let .qrCode(productCode):"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            print(\"QR code: \\(productCode).\")"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "let barcode1 \u003d Barcode.qrCode(\"foo\")"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "let barcode2 \u003d Barcode.qrCode(\"bar\")"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "barcode1.printCode() // prints \"QR code: foo.\""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "barcode2.printCode() // prints \"QR code: bar.\""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "Also, enums with associated values is not supported in languages such as [Java](https://stackoverflow.com/questions/30044334/how-can-i-create-a-java-enum-with-associated-values-like-swift-enum), and using a workaround to implement enums with associated values results in code verbosity. Take a look at [Swift\u0027s documentation on Enums](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Enumerations.html) for more information about enums."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "### Protocol Oriented Programming"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "The heart of Swift is Protocol Oriented Programming (POP). POP helps to solve the [bloat that is sometimes caused by Object Oriented Programming (OOP)](http://blogs.perl.org/users/sid_burn/2014/03/inheritance-is-bad-code-reuse-part-1.html) by using composition instead of inheritance for defining new classes based on existing classes."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "Here\u0027s some code to serve as a brief introduction to POP:"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "First, we first define our protocols."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "protocol Bird {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "  var canFly: Bool { get }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": " "
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "protocol Flyable {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "  var airspeedVelocity: Double { get }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "Next, we define the structs that conform to the protocols above."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "// Penguins can\u0027t fly ):"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "struct Penguin: Bird {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    let canFly \u003d false"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "struct Eagle: Bird, Flyable {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    let canFly \u003d true"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    let airspeedVelocity \u003d 160.0"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "And if you haven\u0027t noticed, protocols are extremely similar to interfaces in Java. "
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "To understand more about POP, watching this [WWDC 2015 talk](https://www.youtube.com/watch?v\u003dg2LwFZatfTI) is highly recommended."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "### Extensions"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "Extensions allow us to add new functionalities to an existing class, structure, enumeration, or protocol type. Suppose we have an `Eagle` struct:"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "struct Eagle {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    // some functionalities here"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "As development progresses, you realize that you now want `Eagle` to conform to `Bird` and `Flyable` protocols. Instead of editing the code in `Eagle` struct directly, we can use extensions to implement each protocol separately. Do take note that you cannot add stored properties in extensions. As such, `canFly` and `airspeedVelocity` have to be computed properties (for more information, see [here](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Properties.html)):"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "struct Eagle {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    // we can leave the existing code here untouched"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "extension Eagle: Bird {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    var canFly: Bool {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        return true"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "extension Eagle: Flyable {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    var airspeedVelocity: Double {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        return 160.0"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Extensions also allow us to define instance methods and type methods for types which you do not have access to the original source code. For example: "
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "```swift"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "extension String { // String belongs to Swift Standard Library which we have no access to"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    // This method is copied from: "
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    // https://github.com/SwifterSwift/SwifterSwift/blob/master/Sources/Extensions/SwiftStdlib/StringExtensions.swift"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    func isAlphabetic() -\u003e Bool {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        let hasLetters \u003d rangeOfCharacter(from: .letters, options: .numeric, range: nil) !\u003d nil"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        let hasNumbers \u003d rangeOfCharacter(from: .decimalDigits, options: .literal, range: nil) !\u003d nil"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        return hasLetters \u0026\u0026 !hasNumbers"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "var foo: String \u003d \"a1\""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "print(foo.isAlphabetic()) // prints \"false\""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "To find out more about extensions, take a look at [Swift\u0027s documentation on Extensions](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/Extensions.html)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "### Automatic Reference Counting"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "A few keywords unique to Swift are `strong`, `weak` and `unowned`, which have to do with Swift\u0027s way of memory management, [Automatic Reference Counting (ARC)](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/AutomaticReferenceCounting.html). "
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Essentially, when an instance of a class is created, a chunk of memory is allocated to it until it is no longer strongly referenced by anything. References are strong by default. Thus, if we have an Object A (a `UIViewController`) that creates an Object B (a `UIAlertController`), B would be strongly referenced by A. However, B might also need access to a variable in A, such that A may be strongly referenced by B, resulting in a reference cycle."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "Reference cycles are bad, because they cause memory leaks. Even though A and B are no longer needed eventually, A and B will still sit in memory since they are both strongly referenced by each other. This is why we need the `strong`, `weak` and `unowned` keywords, to resolve reference cycles. "
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "Here is an [article](https://krakendev.io/blog/weak-and-unowned-references-in-swift) with greater in-depth explanation and examples."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "### CocoaPods"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "[CocoaPods](https://guides.cocoapods.org/using/getting-started.html) is a dependency manager for Swift and Objective-C Cocoa projects which has over 58 thousand libraries and is used in over 3 million apps. Instead of reinventing the wheel, you can check this out to obtain code that helps resolve common issues. If you have done something new with Swift, you can also make your code into a library with CocoaPods for others to use!"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "## How to Get Started"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "A Macbook is required for Swift development, but an iPhone or iPad is not. The Swift IDE `X-Code` has built-in simulators for all mobile devices."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "If you have not learnt any other programming languages before, this [Game App](https://www.apple.com/swift/playgrounds/) could be a good choice to learn swift as well as programming."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "If you are familiar with some programming languages, reading the [Language Guide in the official documentation](https://developer.apple.com/library/content/documentation/Swift/Conceptual/Swift_Programming_Language/) is recommended, since it explains everything quite clearly, albeit being quite verbose."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "If you are really pressed for time, here are a couple of cheatsheets with code examples:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Adoby7"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "- [Swift Cheat Sheet](https://mhm5000.gitbooks.io/swift-cheat-sheet/content/index.html) (web-friendly)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Adoby7"
        },
        "content": "- [Swift 3.0 Cheat Sheet and Quick Reference](https://koenig-media.raywenderlich.com/uploads/2014/06/RW-Swift-Cheatsheet-0_7.pdf) (print-friendly)"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 283,
      "Adoby7": 86
    }
  },
  {
    "path": "contents/uix/accessibility.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  title: Accessibility"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "# Accessibility"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "**Author(s): [Monika Manuela Hengki](https://github.com/monmanuela)**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Reviewers: [Rahul Rajesh](https://github.com/rrtheonlyone), [Jacob Li Pengcheng](https://github.com/jacoblipech), [Tan Heng Yeow](https://github.com/tanhengyeow)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003cbox type\u003d\"info\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Note that although the scope of this article covers the accessibility of websites, many of the points also apply to accessibility and UI/UX of other softwares too."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003c/box\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "## What is accessibility?"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003e Accessibility is the practice of making your websites usable by as many people as possible — we traditionally think of this as being about people with disabilities, but really it also benefits other groups such as those using mobile devices, or those with slow network connections. \u003csub\u003e--[MDN Web Docs](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/What_is_accessibility)\u003c/sub\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "## Why is accessibility important?"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Accessibility is important for users with disabilities to access the Web. There are many kinds of disabilities, including:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "   * Visual %%e.g., partial blindness, full blindness, color blindness, cataract, glaucoma, etc.%%"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "   * Auditory %%e.g., hard of hearing, deafness, etc.%%"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "   * Cognitive %%e.g., ADHD, autism spectrum, etc.%%"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "   * Mobility %%e.g., quadriplegia, muscular dystrophy, etc.%%"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "At the same time, accessibility also benefits people _without_ disabilities, for example:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "   * Device limitations %%e.g., using mobile phones, smart watches, smart TVs, and other devices with small screens, different input modes, etc.%%"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "   * Age-related limitations %%e.g., poor dexterity, poor eyesight%%"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "   * Temporary limitations %%e.g., broken arm, lost glasses%%"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "   * Situational limitations %%e.g., under bright sunlight, an environment where one cannot listen to audio%%"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "   * Internet-related limitations %%e.g., slow Internet connection, limited bandwidth%%"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "More information on the above can be found on [this article](https://www.w3.org/WAI/fundamentals/accessibility-intro/#what)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Improving accessibility also brings some benefits to you as a developer:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "1. **Accessibility is a right**. Caring about accessibility demonstrates good ethics/morals."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "2. **Accessibility helps you improve your website\u0027s UX**. [W3C](https://www.w3.org/standards/webdesign/accessibility) notes that accessibility practices are good design practices in general, which improve the UX of your website."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "3. **Accessibility makes your website more discoverable**. Web pages with good accessibility practices are ranked higher by search engine crawlers, making your website more discoverable and marketable to new users. %%(Read more on accessibility and search engine [here](https://blogs.perficientdigital.com/2018/01/12/website-accessibility-benefit-seo/))%%"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "4. **Accessibility helps you increase your user base**. According to the [World Health Organization world report on disability](https://www.who.int/disabilities/world_report/2011/report/en/), about 15% of the world\u0027s population live with some form of disability. That makes up more than 1 billion people. It is a significant population of users, so improving accessibility can help you reach more people."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "5. **Accessibility is part of the law in some places**. In [some countries](https://www.w3.org/WAI/policies/), abiding by accessibility guidelines is mandatory. Be careful not to break the law!"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "## How can I improve the accessibility of my website?"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "There are many ways to improve the accessibility of your website. Below are some tips, based on the type of disabilities they address."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "### Visual"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Users with visual impairments rely on assistive technologies such as a magnifier or a screen reader."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "##### :fas-thumbs-up: Best practice: Use more visual indicators to convey a message"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  "
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Let us look at the Facebook sign up page. Suppose I want to sign up for a new account, but I have not put in all the necessary information. So, it is supposed to tell me that my attempt to sign up has failed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "This page below uses a red color border around the text box to show that the information needed is missing. As red usually signifies failure, this seems enough."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "![Facebook sign up page](accessibility/fb-normal.png \"Facebook sign up page\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "However, to someone with a type of color blindness called [achromatopsia](https://en.wikipedia.org/wiki/Achromatopsia), this is how the page looks like:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "![Facebook sign up page to someone with achromatopsia](accessibility/fb-achromatopsia.png \"Facebook sign up page to someone with achromatopsia\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "To someone with another type of color blindness, [deuteranopia](https://en.wikipedia.org/wiki/Deuteranopia), the page looks like this:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "![Facebook sign up page to someone with deuteranopia](accessibility/fb-deuteranopia.png \"Facebook sign up page to someone with deuteranopia\")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "It may be unclear to color-blind users that the sign up has failed. To avoid confusion, we should not rely on colours alone to convey a message. Instead, we should use more visual indicators such as icons or an explanation box."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "![Sign up page with more visual indicators](accessibility/fb-more-indicators.png \"Facebook sign up page with more visual indicators\")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "##### :fas-thumbs-up: Best practice: Maintain good color contrast"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  "
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Look at this page taken from Tech Crunch."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "![Tech Crunch page](accessibility/tc-normal.png \"Tech Crunch page\")"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "To users with good vision, the design may look minimalist and clean. However, to someone suffering from cataract, the page looks like this."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "![Blurry Tech Crunch page](accessibility/tc-blurred.png \"Tech Crunch page to someone with cataract\")"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "It gets difficult to read the news snippets because of the poor color contrast (grey on white). On the other hand, the black colored texts are still legible. Thus, we should maintain good color contrast ratio in our websites for ease of reading."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "##### :fas-thumbs-up: Best practice: Use `alt` attribute for images"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  "
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "The `alt` attribute provides alternative information for an image that can be read out by a screen reader to describe an image."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "![Use of alt tag](accessibility/alt-tag.png \"Alt tag\")"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "The above are some examples of best practices to follow when developing for web accessibility. More can be found in [this article on developing for accessibility](https://www.w3.org/WAI/tips/developing/)."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  "
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "### Auditory"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Hearing-impaired users do use assistive technologies such as a [hearing aid](https://en.wikipedia.org/wiki/Hearing_aid) or a [cochlear implant](https://en.wikipedia.org/wiki/Cochlear_implant), but these are not specific for accessing websites."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "For users with hearing impairment, we should provide text alternatives to audio content, such as:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  * Text transcripts"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  * Captions"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Here\u0027s a [tutorial on adding transcripts](https://www.w3.org/2017/04/xsmedia-tute/page5.html). Adding captions is commonly supported in video hosting websites such as Youtube or Vimeo."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "More information can be found on [this article on transcripts and captions](https://webaim.org/techniques/captions/)."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  "
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "### Cognitive"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Cognitive disabilities range from mental illnesses to learning difficulties, difficulties in comprehension and concentration, etc. Some examples include [Attention Deficit Hyperactivity Disorder (ADHD)](https://en.wikipedia.org/wiki/Attention_deficit_hyperactivity_disorder), and [autism](https://en.wikipedia.org/wiki/Autism)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Such disabilities might affect how the user uses a website. It could be due to difficulty in understanding how to complete a task, remembering how to do something that was previously accomplished, increased frustration due to confusing workflows or inconsistent layouts/navigation/other page features."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Unlike other web accessibility issues, there is no quick fix to issues arising from cognitive disabilities. The rule of thumb you can follow is to always design your websites to be as logical, consistent, and usable as possible. Here are some best practices mentioned by [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Learn/Accessibility/What_is_accessibility#People_with_cognitive_impairments) and [National Autistic Society](https://www.autism.org.uk/professionals/others/website-design.aspx):"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "##### :fas-thumbs-up: Best practice: Avoid distractions \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "People with cognitive disabilities are more easily distracted, or they may have heightened sensory awareness where cluttered pages can be overwhelming."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  * Avoid unnecessary movements from animations or moving elements"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  * Have a clean and uncluttered design"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  "
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  Here\u0027s a comparison of a cluttered vs clean website landing page taken from [British Gas website](https://www.britishgas.co.uk/)."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  "
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  Cluttered page:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  ![Cluttered landing page](accessibility/bg-old.png \"Cluttered landing page\")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  Clean page:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  ![Clean landing page](accessibility/bg-new.png \"Clean landing page\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "##### :fas-thumbs-up: Best practice: Be logical"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  * Multi-stage processes should be broken down into logical steps, with regular reminders of how far through the process you are, and how long you\u0027ve got left to complete the process, if appropriate."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  * Workflows are logical, simple, and require as little interaction as possible to complete."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "##### :fas-thumbs-up: Best practice: Be consistent"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  * Navigation, header, footer, and main content are always in the same places."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  * Navigation mechanisms are consistent in appearance and behaviour."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "##### :fas-thumbs-up: Best practice: Communicate well \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "People with cognitive disabilities are more likely to take things literally and can benefit from more visual cues."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  * Pages are not overly long or dense in terms of the amount of information presented at once."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  "
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "    \u003e [An article](https://www.lifewire.com/web-page-length-3468959) says a rule of thumb is \"No article should exceed 2 printed pages of double-spaced, 12 point text.\" whereas [another article](https://www.greenmellenmedia.com/how-long-should-my-website-content-be/) says \"There is no \"magic number\" for a number of characters for content. As long as the web page content is clear, to the point and written for people\". Ultimately, what\u0027s most important is what _your_ users think, so validation during user testing is paramount."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  * The language used is as plain and easy to follow, and not full of unneccessary jargon and slang."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  * Important points and content are highlighted in some way."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  * User errors are clearly highlighted, with help messages to suggest solutions."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "More importantly, after following the best practices, you should conduct user testing with people with cognitive disabilities. Sometimes the web page may look fine to someone without disabilities, but it could be difficult for someone with autism or ADHD to navigate through the web page."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "WebAIM\u0027s [Cognitive](http://webaim.org/articles/cognitive/) page provides a useful expansion of the ideas above, and is certainly worth reading."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "### Mobility"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Mobility impairments include paralysis, physical weakness or loss of control in limbs. This can cause users to find it difficult or impossible to use a mouse as the main form of interaction with websites."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Assistive devices include a [switch access](https://en.wikipedia.org/wiki/Switch_access), or a [head pointer](https://www.performancehealth.com/baseball-cap-head-pointer). Users may also use a keyboard instead of a mouse to interact with the website."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "The key to improve accessibility for mobility is to make the website keyboard accessible. Keyboard accessible means that users can navigate through the website using the keyboard. For example, users can use `Tab`, `Shift` + `Tab` keystrokes to navigate through interactive elements on a page, click `Enter` to open a hyperlink, etc."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "WebAIM\u0027s article on [keyboard accessibility](https://webaim.org/techniques/keyboard/) provides a thorough tutorial for this."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "## Tools for Developers"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Here are some useful tools that you can use to improve the accessibility of your website:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "* [**Google Lighthouse**](https://developers.google.com/web/tools/lighthouse/). Google Lighthouse is an automated tool that audits the accessibility level of your websites. It can be found in Chrome DevTools. Given a URL to audit, Lighthouse runs a series of audits and generates a report. The failing audits will show which part of the page causes it, and how to fix it. \u003cbr\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Here\u0027s how an audit report looks like:"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "![Lighthouse audit](accessibility/lh-audit.png \"Lighthouse audit\")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "* [**Color Safe Palette Generator**](http://colorsafe.co/). This website can help you to create a color palette that is based on the Web Content Accessibility Guidelines (WCAG) for text and background contrast ratios."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "* [**ChromeLens**](http://chromelens.xyz/). This Chrome extension has 2 useful features:"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  * **Filters**: To simulate various color blindness so you can browse your website as how a color blind person sees it."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  ![Filters](http://chromelens.xyz/images/website_protanopia.png)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  * **Tracker**: To show the pathway a blind user will go through when browsing your web page with a screen reader. You can check if your web page goes through a logical flow and that the important content is included for the screen reader to narrate."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "  ![Tracker](http://chromelens.xyz/images/website_trace.png)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Note that although there are many accessibility testing tools available, user testing with actual users with disabilities is still important. The automated testing tools may not point out all of the accessibility issues that actual users face."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "## Concluding Remarks"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "Ultimately, the most important thing you need to start designing accessible websites is empathy for your users. Each user is unique, and each user has different needs. As a developer, you need to put yourself in the users\u0027 shoes, understand their pain points, and then develop solutions for them so that everyone can navigate through your website freely."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "## Useful Resources"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "You are ready for your accessibility journey! Here are some resources to help you get started:"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "* [**The A11Y Project**](https://a11yproject.com/resources). The Accessibility Project is an open-source resource library on accessibility. It seeks to make it easier for developers to implement accessible websites by providing tips, tutorials and a widget and pattern library."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "* [**Web Content Accessibility Guidelines (WCAG)**](https://www.w3.org/WAI/standards-guidelines/wcag/). WCAG provides a single shared standard for web content accessibility that meets the needs of individuals, organizations, and governments internationally."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "* [**Web Accessibility in Mind (WebAIM)**](https://webaim.org/articles). WebAIM contains well-written articles on specific topics on accessibility issues and how to tackle them."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "monmanuela"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "monmanuela"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "monmanuela": 179,
      "-": 3
    }
  },
  {
    "path": "contents/uix/refining-ux-skills.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfrontmatter\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  title: Refining UX Design Skills"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "  header: pagetop.md"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  footer: footer.md"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  head: head.md"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  siteNav: mainNav.md"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "  pageNav: 3"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/frontmatter\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cdiv class\u003d\"website-content\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "{{ booktitle | safe }}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "# Refining UX Design Skills"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Author: [Tan Jun Kiat](https://github.com/junkiattan)"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "## Table of Contents"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Overview](#overview)"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "  * [Building a relationship with a UX mentor](#building-a-relationship-with-a-ux-mentor)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "  * [Becoming a UX apprentice](#becoming-a-ux-apprentice)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "  * [Engaging in individual UX projects](#engaging-in-individual-ux-projects)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  * [Summary](#summary)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "  * [Additional Resource(s)](#additional-resource-s)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "## Overview"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "As someone new to UX Design, honing your design skills is crucial to getting a UX-related career. In addition to knowing the definition of UX Design and it\u0027s stages, it is also important to know the practical aspect of starting and refining the required skillsets. This section will explain a few tactics to help you on this journey of improvement."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "#### Summary of keypoints"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "1. Building a relationship with a UX mentor"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "1. Becoming a UX apprentice"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "1. Engaging in individual UX projects"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Each keypoint represents a tactic to help you refine your UX skillsets, supplemented with the potential pitfalls of each tactic and solutions to consider."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "## Building a relationship with a UX mentor"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "Mentors are invaluable because they are able to use their experience to fill in any knowledge gaps a budding UX designer would have at the beginning. Chances are that they have already asked the same questions you are having and can therefore provide constructive feedback on workable solutions. Even if they have not tried tackled the same issues, they stand in a better position to provide sound advice by using any transferable lessons learnt in their own expert areas."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "There are many avenues to find a UX mentor. Listed below are some links to get you started on some ways you can find a potential mentor."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Mentoring networks:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Find a Mentor (RookieUp)](https://www.rookieup.com/find-a-mentor/)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "1. [UXPA UK Mentoring programme](http://uxpa-uk.org/development/mentoring/)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "1. [IDF Design League program](https://www.interaction-design.org/design-league?ep\u003daz)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "1. [UX Mentorship Program (The UX Review)](https://theuxreview.co.uk/ux-mentorship-program-by-uxr/)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "Conferences"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Nielsen Norman Group UX Conferences](https://www.nngroup.com/ux-conference/)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "Local meet-ups"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "1. [UXSG Community](http://www.uxsg.org/)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "1. [IxDA Singapore](https://www.meetup.com/IxDA-Singapore/)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Singapore Lean Startup Circle](https://www.meetup.com/Singapore-Lean-Startup-Circle/)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Singapore Dribbble Meetup](https://www.facebook.com/groups/dribbble.sg/)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "If you are concerned with how to find the right mentor, check out below articles that offer tips on how to select the right mentor for yourself."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "1. [How to Find a UX Mentor](https://www.uxbeginner.com/how-to-find-a-ux-mentor/)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "1. [How (and Why) You Want to Find a Great Design Mentor](https://medium.com/@myplanet/how-and-why-you-want-to-find-a-great-design-mentor-6faa7c0fffd9)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "#### Potential pitfalls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "*Unresponsive or ineffective mentors*: Not everyone would be cut out to be a mentor, hence it is up to you to determine if your needs are being met by a specific mentor. The key thing is to always be proactive on your side by following up with your mentor, and having the courage to move on if you feel that the specific mentorship isn\u0027t working out."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "## Becoming a UX apprentice"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "This tactic may sound similar to the first one, but apprenticeship here connotes a stronger meaning for a formal learning experience. While the previous point talks about getting on-the-job advice from more experienced individuals, this tactic mainly discusses learning bootcamps that focuses on bringing an individual from \"UX Zero\" to \"UX Hero\" within the span of a few months."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "Bootcamps can be classified into online or in-person, each with its advantages and disadvantages."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "#### Online"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Broadly speaking, the main advantages of online courses are it\u0027s convenience and price. Online courses cater to students globally and are generally more affordable than in-person courses. Most online courses are also self-paced based on each student\u0027s schedule. However, online courses lack the in-person interactions which can impact the learning experience. Completing online courses also requires long term self-discipline, which places more responsibility on the student. Hence, completion rates are generally not as high compared to in-person courses."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "#### In-person"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "The main advantages of in-person courses are the interactions, which can help to solidify learning experiences and concepts. For UX Design specifically, students might benefit learning skills like drafting user-scenarios or prototyping with in-class guidance rather than through the web. As a result of in-person learning and collaboration, students would also be more motivated and completion rates for in-person courses are higher in general. However, such courses are limited by price and their locations."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "#### Recommendations"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "There are many bootcamps of both classifications for considerations. I have listed a few famous ones below for consideration that are more applicable for Singaporean students."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Online:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "1. [UX Design (Career Foundry)](https://careerfoundry.com/en/courses/become-a-ux-designer/)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Designer Track (Bloc)](https://www.bloc.io/designer-track)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "1. [UX Design Bootcamp (Designation)](http://designation.io/)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "1. [UX Design Course (BrainStation)](https://brainstation.io/course/online/remote-user-experience-design-bootcamp)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "In-person:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "1. [UX Design Immersive (General Assembly)](https://generalassemb.ly/education/user-experience-design-immersive)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Product Design (Alpha Camp)](https://sg.alphacamp.co/full-time-product-design/)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Human Centered Design (Hyper Island)](https://www.hyperisland.com/programs-and-courses/human-centered-design)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "#### Potential pitfalls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "*Ineffective learning experiences*: A common mistake is signing up for any program thinking that all UX Design programs are the same. The curriculum of most courses were developed separately, hence their teaching methodology and focus would be different from each other. Consider requesting the course syllabus for each couse and asking a few questions:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* What kinds of portfolio deliverables will you produce through the program? Will you actually produce things you can showcase as evidence of your problem-solving skills?"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "* Does the program have a trusted network of potential employers that you can be connected with?"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* How practical are the experiences promised by the program? How conceptual? How product-based? How process-based?"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Be honest with your expectations on what you wish to get out of the course and find a suitable one based on your answers to the questions above."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "## Engaging in individual UX projects"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "This is the tactic that shows your proactiveness and desire to excel in UX Design. Whether you have a mentor or have participated in a UX Bootcamp, nothing shows your commitment to UX Design more than if you had further honed those learned skills in actual UX projects."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Find a local organisation with a website/app that you believe needs design help. Approach them via call/email to let them know that you are new to design but would like to gain some experience by providing advice on how certain aspects of their websites can be improved, bearing in mind that it\u0027s good to always frame design issues as business issues. Afterwards, simply treat it as your own UX project and work with the organisation to produce value-added content such as prototypes that can help to showcase your ideas. By doing it well, you can gain experience and even add value to your resume."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Listed below are some examples of UX projects that can be self-initiated."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "1. [10 UX/UI Projects to Help You Build Your Portfolio](https://www.rookieup.com/blog/10-uxui-projects-help-build-portfolio/)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "1. [5 Hidden Sources of UX Portfolio Projects](https://www.uxbeginner.com/5-hidden-sources-of-ux-portfolio-projects/)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "1. [Two Projects to Hone your UX Skills](http://thehipperelement.com/post/145959249463/two-projects-to-hone-your-ux-skills)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "#### Potential pitfalls:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "*Projects that don’t count as legitimate UX experience*: It is important to be careful of the type of projects you end up taking. Producing content for non-digital media, such as a brochure or an advertisement, would not be as relevant as producing wireframes for a website. Furthermore, even with a relevant UX experience, it is crucial to be able to link your work to communicate the following points:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* How you helped the team balance user goals and business goals"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* How you analyzed the business and technology constraints"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* How you collaborated with non-designers"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* How you transformed user research and quantitative data into actionable insights for the team"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* How you worked with the team to resolve unexpected challenges"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Applying UX skills and being able to communicate your ideas/results clearly to your clients based on the questions listed above helps you to sell the true value of your design work."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "## Summary"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Being a UX designer requires tenacity as a lot of the responsibility, i.e. be it approaching a right mentor, determining a right course syllabus for yourself or approaching a local organisation for potential work, ultimately falls on you. Therefore, knowing the tactics and solutions to common pitfalls would definitely help clarify the steps needed to refine your UX skills. Bear in mind that the tactics are not used exclusively, as all of them can be applied simultaneously in your journey of mastering UX Design."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Know that there are many others before you who were new but successfully went into UX Design through their tenacity and hard work. Check out the below links for some success stories of individuals who started with zero experience but managed to secure full-time UX jobs. Use those stories as inspiration to motivate your own UX journey!"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* [How I landed a job in UX Design with no degree or work experience](https://blog.prototypr.io/how-i-landed-a-job-in-ux-design-with-no-degree-or-work-experience-ca22c22a1c68)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* [How I Landed a UX Job in 8 Months Without Work Experience or a Degree](https://medium.com/capitalonedesign/how-i-landed-a-ux-job-in-8-months-without-work-experience-or-a-degree-a057d32df1f9)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "luyangkenneth"
        },
        "content": "## Additional Resource(s)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "1. [List of Meetups/Conferences/Resources in Singapore](http://interface.sg/)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/div\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 116,
      "luyangkenneth": 10
    }
  }
]
